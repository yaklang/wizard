import { PresetColors } from 'antd/es/theme/internal';
import { Key } from 'react';

const data = [
    {
        description: '20240926',
        disallow_scheduled: true,
        prompt_args: [
            {
                explain: '当输入 1-65535 时，会分配 syn 和 tcp 扫描全端口',
                key: 'ports',
                value: '7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018,93,6666,7010,100,9003,6789,7060,8022,4848,3050,8787,8013,8040,10021,2011,6006,4000,8055,4430,6060,7788,8066,9898,8801,10040,7006,803,6688,10080,8050,7011,7009,40310,802,10003,8014,2080,7288,9992,8005,8889,5644,8886,9500,58031,50000,9020,8015,50060,8887,8021,8700,9900,9191,3312,8186,8735,8380,1234,38080,2110,8007,21245,3333,2046,9061,8686,9011,8061,9876,8282,60465,2222,9009,1100,18081,70,8383,5155,8188,2517,50070,8062,11324,9231,999,28214,8987,809,2010,7700,3535,7921,11080,6778,805,8073,114,2012,701,8810,8400,9007,8808,8065,8822,15000,9901,11158,1107,28099,12345,2006,9527,51106,688,25006,8045,9006,8023,8029,9997,7048,8580,8585,8035,10088,20022,4001,9005,2013,20808,3580,7742,8119,32766,50075,7272,3380,3220,7801,5256,5255,10086,1300,5200,6198,1158,6889,3503,6088,9991,806,8183,8688,1001,58080,1182,9025,8112,7776,7321,235,8077,8500,11347,7081,8877,8480,9182,58000,8026,11001,10089,5888,8196,8078,9995,2014,5656,8019,5003,8481,6002,9889,9015,8866,8182,8057,8399,8308,511,12881,4016,1039,28080,5678,7500,8051,18801,15018,15888,38443,8123,9004,8144,94,9070,1800,9112,8990,3456,2051,9131,97,7100,7711,7180,11000,8037,6988,122,8885,14007,8184,7012,8079,9888,9301,59999,49705,1979,8900,5080,5013,1550,8844,4850,206,5156,8813,3030,1790,8802,9012,5544,3721,8980,10009,8043,8390,7943,8381,8056,7111,1500,5881,9437,5655,8102,65486,4443,3690,10025,8024,8333,8666,103,8,9666,8999,9111,8071,522,11381,20806,8041,1085,8864,7900,1700,8036,8032,8033,8111,60022,955,3080,8788,27017,7443,8192,6969,9909,5002,9990,188,8910,9022,50030,866,8582,4300,9101,6879,8891,4567,4440,10051,10068,50080,8341,30001,6890,8168,8955,16788,8190,18060,6379,7041,42424,15693,2521,19010,18103,6010,8898,9910,9190,8260,8445,1680,8890,8649,30082,3013,30000,2480,7202,9704,5233,8991,11366,7888,8780,7129,6600,47088,7791,18888,50045,15672,2585,60,9494,31945,2060,8610,8860,58060,6118,2348,38000,18880,13382,6611,8064,7101,5081,7380,7942,10016,8027,2093,403,9014,8133,6886,95,8058,9201,6443,5966,27000,7017,6680,8401,9036,8988,8806,6180,421,423,57880,7778,18881,812,15004,9110,8213,9300,1213,8193,8956,1108,778,65000,7020,1122,9031,17000,8039,8600,50090,1863,8191,65,6587,8136,9507,132,200,2070,308,5811,3465,8680,7999,7084,3938,5902,9595,442,4433,7171,7567,811,1128,6003,2125,6090,10007,7022,1949,6565,65001,1301,19244,10087,8025,5098,21080,1200,15801,1005,22343,7086,8601,6259,7102,10333,211,10082,18085,180,40000,7021,7702,66,38086,666,6603,1212,65493,96,9053,7031,23454,30088,6226,8660,6170,8972,48080,10118,40069,28780,20153,20021,20151,58898,10066,1818,9914,55351,8343,6546,3880,8902,22222,19045,5561,7979,5203,50240,49960,2007,1722,8913,8912,9504,8103,8567,1666,8720,8197,3012,8220,9039,5898,925,38517,8382,6842,8895,2808,447,3600,3606,45177,19101,171,133,8189,7108,10154,47078,6800,8122,381,15580,23352,3443,1180,268,2382,43651,10099,65533,7018,60010,60101,6699,2005,2009,59777,591,1933,9013,8477,9696,9030,2015,7925,6510,18803,280,5601,2901,2301,5201,302,610,5552,8809,6869,9212,17095,20001,8781,25024,5280,7909,17003,1088,7117,20052,10038,30551,9980,9180,59009,28280,7028,61999,7915,8384,9918,9919,55858,7215,77,9845,20140,7856,1982,1123,17777,8839,208,2886,877,6101,5100,804,983,5600,8402,5887,8322,5632,770,13333,7330,3216,31188,47583,8710,22580,1042,34440,20,7703,65055,8997,6543,6388,8283,7201,4040,61081,12001,3588,7123,2490,4389,1313,19080,9050,6920,299,20046,8892,9302,7899,30058,7094,6801,321,1356,12333,11362,11372,6602,7709,45149,3668,517,9912,8130,7050,7713,40080,8104,13988,18264,8799,7072,55070,23458,8176,9517,9541,9542,9512,8905,11660,44445,44401,17173,436,560,733,968,602,3133,3398,16580,8488,8901,8512,10443,9113,9119,6606,22080,5560,5757,1600,8250,10024,10200,333,73,7547,8054,6372,223,3737,9019,8067,45692,15400,15698,9038,37006,2086,1002,9188,8201,8202,30030,2663,9105,10017,4503,1104,8893,40001,27779,3010,7083,5010,5501,309,1389,10070,10069,10056,3094,10057,10078,10050,10060,10098,4180,10777,270,6365,9801,1046,7140,1004,9198,8465,8548,108,30015,8153,1020,50100,8391,34899,7090,6100,8777,8298,8281,7023,3377,8499,7501,4321,3437,9977,14338,843,7901,6020,6011,1988,4023,20202,20200,7995,18181,9836,586,2340,8110,9192,2525,6887,4005,8992,11212,2168,60080,6664,10005,956,1016,4453,8974,10101,58124,30025,7789,7280,8068,11180,1984,5566,916,8828,17071,15080,8820,104,21900,5151,860,6286,5118,18765,7055,9989,807,7751,8684,1999,9333,55352,8681,19994,3033,8017,7093,7896,4242,58083,56688,6167,9922,3618,7082,1603,16929,198,8075,7044,8232,12315,4570,4569,31082,8861,3680,4455,8403,4497,4380,7273,8896,21188,22480,1445,20165,20142,9068,1083,59093,41474,9224,9718,23380,5225,18889,4237,30,14549,8052,911,19000,7799,7300,9168,29798,4480,22228,7903,810,68,31000,9103,20992,8049,2261,8105,10152,5780,10111,3003,1,3,4,6,24,32,33,42,43,49,109,125,146,161,163,212,222,254,256,259,264,301,306,311,340,366,406,407,416,417,425,458,464,481,497,500,512,524,541,545,555,563,593,616,617,625,636,648,667,668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,898,900,901,902,903,912,981,987,992,1007,1009,1011,1021,1022,1023,1031,1032,1033,1034,1035,1036,1037,1038,1040,1043,1044,1045,1047,1050,1051,1052,1055,1057,1058,1059,1060,1061,1062,1063,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1084,1086,1087,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1102,1105,1106,1111,1112,1113,1114,1117,1119,1121,1124,1126,1130,1131,1132,1137,1138,1141,1145,1147,1148,1149,1151,1152,1154,1163,1164,1165,1166,1169,1174,1175,1183,1185,1186,1187,1192,1198,1199,1201,1216,1217,1218,1233,1236,1244,1247,1248,1259,1271,1272,1277,1287,1296,1309,1310,1311,1322,1328,1334,1352,1417,1434,1455,1461,1494,1501,1503,1521,1524,1533,1556,1580,1583,1594,1641,1658,1687,1688,1717,1718,1719,1721,1761,1782,1783,1805,1812,1839,1840,1862,1864,1875,1914,1935,1947,1971,1972,1974,1998,2002,2003,2004,2021,2022,2030,2033,2034,2035,2038,2040,2041,2042,2043,2045,2047,2048,2065,2068,2099,2105,2106,2111,2119,2126,2135,2144,2160,2161,2170,2179,2190,2191,2196,2200,2251,2260,2288,2323,2366,2381,2383,2393,2394,2399,2401,2492,2500,2522,2557,2601,2602,2604,2605,2607,2608,2638,2701,2702,2710,2718,2725,2800,2809,2811,2869,2875,2909,2910,2920,2968,2998,3005,3006,3007,3011,3017,3031,3052,3071,3077,3119,3162,3168,3211,3221,3260,3261,3268,3269,3283,3300,3301,3304,3307,3322,3323,3324,3325,3351,3367,3369,3370,3371,3372,3376,3390,3400,3404,3410,3476,3493,3514,3517,3527,3546,3551,3659,3684,3689,3697,3700,3731,3766,3784,3792,3800,3801,3808,3809,3814,3820,3824,3826,3827,3828,3846,3848,3849,3851,3852,3853,3859,3863,3869,3871,3878,3889,3905,3914,3918,3920,3945,3971,3995,3998,4002,4003,4004,4006,4045,4111,4125,4126,4129,4224,4279,4343,4444,4445,4446,4449,4550,4662,4900,4998,5004,5030,5033,5054,5061,5087,5102,5120,5214,5221,5222,5226,5269,5298,5405,5414,5431,5440,5500,5510,5550,5633,5679,5718,5730,5801,5802,5810,5815,5822,5825,5850,5859,5862,5877,5901,5903,5904,5906,5907,5910,5911,5915,5922,5925,5950,5952,5959,5960,5961,5962,5963,5987,5988,5989,5998,5999,6005,6007,6009,6025,6059,6106,6112,6123,6129,6156,6346,6389,6502,6547,6566,6567,6580,6667,6668,6669,6689,6692,6779,6788,6792,6839,6881,6901,7019,7025,7103,7106,7402,7435,7496,7512,7625,7627,7676,7741,7800,7911,7920,7937,7938,8194,8254,8290,8291,8292,8651,8652,8654,8701,8873,8994,9040,9071,9102,9207,9220,9290,9415,9418,9485,9502,9503,9535,9575,9593,9594,9618,9877,9878,9917,9929,9943,9944,9968,10012,10180,10215,10243,10566,10616,10617,10621,10626,10628,10629,10778,11110,11111,11967,12000,12174,12265,13456,13722,13782,13783,14238,14441,14442,15002,15003,15660,15742,16000,16001,16012,16016,16018,16113,16992,16993,17877,17988,18040,18101,18988,19283,19315,19350,19780,19801,19842,20005,20031,20221,20222,20828,21571,22939,23502,24444,24800,25734,25735,26214,27352,27353,27355,27356,27715,28201,30718,30951,31038,31337,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,33354,33899,34571,34572,34573,35500,38292,40193,40911,41511,42510,44176,44442,44443,44501,45100,49158,49159,49160,49161,49163,49165,49167,49175,49176,49400,49999,50001,50002,50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055,55056,55555,55600,56737,56738,57294,57797,60020,60443,61532,61900,62078,63331,64623,64680,65129,65389',
            },
        ],
        script: '// 更新top5000 端口\n// 内置CVE脚本，通过传参开关CVE扫描 20240926\n// 重构SYN-20240718 go0p\n\nyakit.AutoInitYakit()\nloglevel(`info`)\n\n/*\n创建插件:\n   1. 插件的执行状态需要注意：加载成功与否？\n*/\n\n\ntargetRaw = cli.String("target",cli.setRequired(true))\n\npluginsStr = cli.String("plugins")\n\n// host alive scan\nskippedHostAliveScan = cli.String("skipped-host-alive-scan",cli.setDefault("false"))\nhostAliveConcurrent = cli.Int("host-alive-concurrent", cli.setDefault(20), cli.setRequired(false))\nhostAliveTimeout = cli.Float("host-alive-timeout", cli.setDefault(5.0), cli.setRequired(false))\nhostAliveTCPPorts = cli.String("host-alive-ports", cli.setDefault("80,22,443"), cli.setRequired(false))\n\nskippedHostAliveScanFlag = false\n\nif skippedHostAliveScan == "true" {\n    skippedHostAliveScanFlag = true\n}\n\n\npluginStatusMap = {};\npluginNames = str.Split(pluginsStr, ",")\nyakit.Info("开始创建漏洞扫描管理器")\nmanager, err := hook.NewMixPluginCaller()\nif err != nil {\n    yakit.Error("创建失败：%v", err)\n}\n\nmanager.SetDividedContext(true)\nmanager.SetConcurrent(20)\n\nloadPluginFinished = 0\nx.Foreach(pluginNames, func(i) {\n    // 插件加载状态\n    statusName = "加载中"\n    err = manager.LoadPlugin(i)\n    if err != nil {\n        yakit.Info("加载插件【%v】失败：%v", i, err)\n        statusName = "加载失败"\n    } else {\n        loadPluginFinished++\n\n        yakit.Info(i + " [加载成功]")\n\t   yakit.Info(sprintf("涉及扫描插件：%v个", len(pluginNames)))\n        statusName = "加载成功"\n    }\n    pluginStatusMap[i] = [i, statusName]\n})\n\n\npingOpt = []\n\n\nenableBrute = cli.String("enable-brute",cli.setDefault("false"))\n\nenableBruteFlag = false\n\nif enableBrute == "true" {\n    enableBruteFlag = true\n}\n\n\nenableCveBaseLine = cli.String("enbale-cve-baseline",cli.setDefault("false"))\nenableCVEFlag = false\n\nif enableCveBaseLine == "true" {\n    enableCVEFlag = true\n}\n\nif skippedHostAliveScan {\n    pingOpt = append(pingOpt, ping.skip(skippedHostAliveScanFlag))\n}\n\nif hostAliveTimeout > 0 {\n    pingOpt = append(pingOpt, ping.timeout(hostAliveTimeout))\n}\n\n\nif hostAliveConcurrent > 0 {\n    pingOpt = append(pingOpt, ping.concurrent(hostAliveConcurrent))\n}\n\n\nif len(hostAliveTCPPorts) > 0 {\n    pingOpt = append(pingOpt, ping.tcpPingPorts(hostAliveTCPPorts))\n}\n\nsynConcurrent = cli.Int("syn-concurrent", cli.setDefault(2000))\n\nexcludeHosts = cli.String("exclude-hosts")\nexcludePorts = cli.String("exclude-ports")\n\ntop100 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018"\n\ntcpPorts = cli.String("ports", cli.setDefault(top100))\n\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\n\nif len(tcpPortsList) == 0{\n    tcpPorts = top100\n}\n\n// top 5000 ports\ntop5000 = "80,23,443,21,22,25,3389,110,445,139,143,53,135,3306,8080,1723,111,995,993,5900,1025,587,8888,199,1720,465,548,113,81,6001,10000,514,5060,179,1026,2000,8443,8000,32768,554,26,1433,49152,2001,515,8008,49154,1027,5666,646,5000,5631,631,49153,8081,2049,88,79,5800,106,2121,1110,49155,6000,513,990,5357,427,49156,543,544,5101,144,7,389,8009,3128,444,9999,5009,7070,5190,3000,5432,1900,3986,13,1029,9,5051,6646,49157,1028,873,1755,2717,4899,9100,119,37,1000,3001,5001,82,10010,1030,9090,2107,1024,2103,6004,1801,5050,19,8031,1041,255,1049,1048,2967,1053,3703,1056,1065,1064,1054,17,808,3689,1031,1044,1071,5901,100,9102,8010,2869,1039,5120,4001,9000,2105,636,1038,2601,1,7000,1066,1069,625,311,280,254,4000,1993,1761,5003,2002,2005,1998,1032,1050,6112,3690,1521,2161,6002,1080,2401,4045,902,7937,787,1058,2383,32771,1033,1040,1059,50000,5555,10001,1494,593,2301,3,1,3268,7938,1234,1022,1074,8002,1036,1035,9001,1037,464,497,1935,6666,2003,6543,1352,24,3269,1111,407,500,20,2006,3260,15000,1218,1034,4444,264,2004,33,1042,42510,999,3052,1023,1068,222,7100,888,4827,1999,563,1717,2008,992,32770,32772,7001,8082,2007,740,5550,2009,5801,1043,512,2701,7019,50001,1700,4662,2065,2010,42,9535,2602,3333,161,5100,5002,2604,4002,6059,1047,8192,8193,2702,6789,9595,1051,9594,9593,16993,16992,5226,5225,32769,3283,1052,8194,1055,1062,9415,8701,8652,8651,8089,65389,65000,64680,64623,55600,55555,52869,35500,33354,23502,20828,1311,1060,4443,730,731,709,1067,13782,5902,366,9050,1002,85,5500,5431,1864,1863,8085,51103,49999,45100,10243,49,3495,6667,90,475,27000,1503,6881,1500,8021,340,78,5566,8088,2222,9071,8899,6005,9876,1501,5102,32774,32773,9101,5679,163,648,146,1666,901,83,9207,8001,8083,5004,3476,8084,5214,14238,12345,912,30,2605,2030,6,541,8007,3005,4,1248,2500,880,306,4242,1097,9009,2525,1086,1088,8291,52822,6101,900,7200,2809,395,800,32775,12000,1083,211,987,705,20005,711,13783,6969,3071,5269,5222,1085,1046,5987,5989,5988,2190,11967,8600,3766,7627,8087,30000,9010,7741,14000,3367,1099,1098,3031,2718,6580,15002,4129,6901,3827,3580,2144,9900,8181,3801,1718,2811,9080,2135,1045,2399,3017,10002,1148,9002,8873,2875,9011,5718,8086,3998,2607,11110,4126,5911,5910,9618,2381,1096,3300,3351,1073,8333,3784,5633,15660,6123,3211,1078,3659,3551,2260,2160,2100,16001,3325,3323,1104,9968,9503,9502,9485,9290,9220,8994,8649,8222,7911,7625,7106,65129,63331,6156,6129,60020,5962,5961,5960,5959,5925,5877,5825,5810,58080,57294,50800,50006,50003,49160,49159,49158,48080,40193,34573,34572,34571,3404,33899,3301,32782,32781,31038,30718,28201,27715,25734,24800,22939,21571,20221,20031,19842,19801,19101,17988,1783,16018,16016,15003,14442,13456,10629,10628,10626,10621,10617,10616,10566,10025,10024,10012,1169,5030,5414,1057,6788,1947,1094,1075,1108,4003,1081,1093,4449,1687,1840,1100,1063,1061,1107,1106,9500,20222,7778,1077,1310,2119,2492,1070,20000,8400,1272,6389,7777,1072,1079,1082,8402,89,691,1001,32776,1999,212,2020,6003,7002,2998,50002,3372,898,5510,32,2033,4165,3061,5903,99,749,425,43,5405,6106,13722,6502,7007,458,9666,8100,3737,5298,1152,8090,2191,3011,1580,5200,3851,3371,3370,3369,7402,5054,3918,3077,7443,3493,3828,1186,2179,1183,19315,19283,3995,5963,1124,8500,1089,10004,2251,1087,5280,3871,3030,62078,9091,4111,1334,3261,2522,5859,1247,9944,9943,9877,9110,8654,8254,8180,8011,7512,7435,7103,61900,61532,5922,5915,5904,5822,56738,55055,51493,50636,50389,49175,49165,49163,3546,32784,27355,27353,27352,24444,19780,18988,16012,15742,10778,4006,2126,4446,3880,1782,1296,9998,9040,32779,1021,32777,2021,32778,616,666,700,5802,4321,545,1524,1112,49400,84,38292,2040,32780,3006,2111,1084,1600,2048,2638,6699,9111,16080,6547,6007,1533,5560,2106,1443,667,720,2034,555,801,6025,3221,3826,9200,2608,4279,7025,11111,3527,1151,8200,8300,6689,9878,10009,8800,5730,2394,2393,2725,5061,6566,9081,5678,3800,4550,5080,1201,3168,3814,1862,1114,6510,3905,8383,3914,3971,3809,5033,7676,3517,4900,3869,9418,2909,3878,8042,1091,1090,3920,6567,1138,3945,1175,10003,3390,3889,1131,8292,5087,1119,1117,4848,7800,16000,3324,3322,5221,4445,9917,9575,9099,9003,8290,8099,8093,8045,7921,7920,7496,6839,6792,6779,6692,6565,60443,5952,5950,5907,5906,5862,5850,5815,5811,57797,56737,5544,55056,5440,54328,54045,52848,52673,50500,50300,49176,49167,49161,44501,44176,41511,40911,32785,32783,30951,27356,26214,25735,19350,18101,18040,17877,16113,15004,14441,12265,12174,10215,10180,4567,6100,4004,4005,8022,9898,7999,1271,1199,3003,1122,2323,4224,2022,617,777,417,714,6346,981,722,1009,4998,70,1076,5999,10082,765,301,524,668,2041,6009,1417,1434,259,44443,1984,2068,7004,1007,4343,416,2038,6006,109,4125,1461,9103,911,726,1010,2046,2035,7201,687,2013,481,125,6669,6668,903,1455,683,1011,2043,2047,31337,256,9929,5998,406,44442,783,843,2042,2045,4040,6060,6051,1145,3916,9443,9444,1875,7272,4252,4200,7024,1556,13724,1141,1233,8765,1137,3963,5938,9191,3808,8686,3981,2710,3852,3849,3944,3853,9988,1163,4164,3820,6481,3731,5081,40000,8097,4555,3863,1287,4430,7744,1812,7913,1166,1164,1165,8019,10160,4658,7878,3304,3307,1259,1092,7278,3872,10008,7725,3410,1971,3697,3859,3514,4949,4147,7900,5353,3931,8675,1277,3957,1213,2382,6600,3700,3007,4080,1113,3969,1132,1309,3848,7281,3907,3972,3968,1126,5223,1217,3870,3941,8293,1719,1300,2099,6068,3013,3050,1174,3684,2170,3792,1216,5151,7080,22222,4143,5868,8889,12006,1121,3119,8015,10023,3824,1154,20002,3888,4009,5063,3376,1185,1198,1192,1972,1130,1149,4096,6500,8294,3990,3993,8016,3846,3929,1187,5074,8766,1102,2800,9941,9914,9815,9673,9643,9621,9501,9409,9198,9197,9098,8996,8987,8877,8676,8648,8540,8481,8385,8189,8098,8095,8050,7929,7770,7749,7438,7241,7123,7051,7050,6896,6732,6711,65310,6520,6504,6247,6203,61613,60642,60146,60123,5981,5940,59202,59201,59200,5918,5914,59110,5909,5905,5899,58838,5869,58632,58630,5823,5818,5812,5807,58002,58001,57665,55576,55020,53535,5339,53314,53313,53211,52853,52851,52850,52849,52847,5279,52735,52710,52660,5242,5212,51413,51191,5040,50050,49401,49236,49195,49186,49171,49168,49164,4875,47544,46996,46200,44709,41523,41064,40811,3994,39659,39376,39136,38188,38185,37839,35513,33554,33453,32835,32822,32816,32803,32792,32791,30704,30005,29831,29672,28211,27357,26470,23796,23052,2196,21792,19900,18264,18018,17595,16851,16800,16705,15402,15001,12452,12380,12262,12215,12059,12021,10873,10058,10034,10022,10011,2910,1594,1658,1583,3162,2920,26000,2366,4600,1688,1322,2557,1095,1839,2288,1123,5968,9600,1244,1641,2200,1105,6550,5501,1328,2968,1805,1914,1974,31727,3400,1301,1147,1721,1236,2501,2012,6222,1220,1109,1347,502,701,2232,2241,4559,710,10005,5680,623,913,1103,780,930,803,725,639,540,102,5010,1222,953,8118,9992,1270,27,123,86,447,1158,442,18000,419,931,874,856,250,475,2044,441,210,6008,7003,5803,1008,556,6103,829,3299,55,713,1550,709,2628,223,3025,87,57,10083,5520,980,251,1013,9152,1212,2433,1516,333,2011,748,1350,1526,7010,1241,127,157,220,1351,2067,684,77,4333,674,943,904,840,825,792,732,1020,1006,657,557,610,1547,523,996,2025,602,3456,862,600,2903,257,1522,1353,6662,998,660,729,730,731,782,1357,3632,3399,6050,2201,971,969,905,846,839,823,822,795,790,778,757,659,225,1015,1014,1012,655,786,6017,6670,690,388,44334,754,5011,98,411,1525,3999,740,12346,802,1337,1127,2112,1414,2600,621,606,59,928,924,922,921,918,878,864,859,806,805,728,252,1005,1004,641,758,669,38037,715,1413,2104,1229,3817,6063,6062,6055,6052,6030,6021,6015,6010,3220,6115,3940,2340,8006,4141,3810,1565,3511,5986,5985,2723,9202,4036,4035,2312,3652,3280,4243,4298,4297,4294,4262,4234,4220,4206,22555,9300,7121,1927,4433,5070,2148,1168,9979,7998,4414,1823,3653,1223,8201,4876,3240,2644,4020,2436,3906,4375,4024,5581,5580,9694,6251,7345,7325,7320,7300,3121,5473,5475,3600,3943,4912,2142,1976,1975,5202,5201,4016,5111,9911,10006,3923,3930,1221,2973,3909,5814,14001,3080,4158,3526,1911,5066,2711,2187,3788,3796,3922,2292,16161,3102,4881,3979,3670,4174,3483,2631,1750,3897,7500,5553,5554,9875,4570,3860,3712,8052,2083,8883,2271,1208,3319,3935,3430,1215,3962,3368,3964,1128,5557,4010,9400,1605,3291,7400,5005,1699,1195,5053,3813,1712,3002,3765,3806,43000,2371,3532,3799,3790,3599,3850,4355,4358,4357,4356,5433,3928,4713,4374,3961,9022,3911,3396,7628,3200,1753,3967,2505,5133,3658,8471,1314,2558,6161,4025,3089,9021,30001,8472,5014,9990,1159,1157,1308,5723,3443,4161,1135,9211,9210,4090,7789,6619,9628,12121,4454,3680,3167,3902,3901,3890,3842,16900,4700,4687,8980,1196,4407,3520,3812,5012,10115,1615,2902,4118,2706,2095,2096,3363,5137,3795,8005,10007,3515,8003,3847,3503,5252,27017,2197,4120,1180,5722,1134,1883,1249,3311,3837,2804,4558,4190,2463,1204,4056,1184,19333,9333,3913,3672,4342,4877,3586,8282,1861,1752,9592,1701,6085,2081,4058,2115,8900,4328,2958,2957,7071,3899,2531,2691,5052,1638,3419,2551,4029,3603,1336,2082,1143,3602,1176,4100,3486,6077,4800,2062,1918,12001,12002,9084,7072,1156,2313,3952,4999,5023,2069,28017,27019,27018,3439,6324,1188,1125,3908,7501,8232,1722,2988,10500,1136,1162,10020,22128,1211,3530,12009,9005,3057,3956,1191,3519,5235,1144,4745,1901,1807,2425,5912,3210,32767,5015,5013,3622,4039,10101,5233,5152,3983,3982,9616,4369,3728,3621,2291,5114,7101,1315,2087,5234,1635,3263,4121,4602,2224,3949,9131,3310,3937,2253,3882,3831,2376,2375,3876,3362,3663,3334,47624,1825,3868,4302,5721,1279,2606,1173,22125,17500,12005,6113,1973,3793,3637,8954,3742,9667,41795,41794,4300,8445,12865,3365,4665,3190,3577,3823,2261,2262,2812,1190,22350,3374,4135,2598,2567,1167,8470,8116,3830,8880,2734,3505,3388,3669,1871,4325,8025,1958,3681,3014,8999,4415,3414,4101,6503,9700,3683,1150,18333,4376,3991,3989,3992,2302,3415,1179,3946,2203,4192,4418,2712,25565,4065,3915,2080,3103,2265,8202,2304,8060,4119,4401,1560,3904,4534,1835,1116,8023,8474,3879,4087,4112,6350,9950,3506,3948,3825,2325,1800,1153,6379,3839,5672,4689,47806,3975,3980,4113,2847,2070,3425,6628,3997,3513,3656,2335,1182,1954,3996,4599,2391,3479,5021,5020,1558,1924,4545,2991,6065,1290,1559,1317,5423,1707,5055,9975,9971,9919,9915,9912,9910,9908,9901,9844,9830,9826,9825,9823,9814,9812,9777,9745,9683,9680,9679,9674,9665,9661,9654,9648,9620,9619,9613,9583,9527,9513,9493,9478,9464,9454,9364,9351,9183,9170,9133,9130,9128,9125,9065,9061,9044,9037,9013,9004,8925,8898,8887,8882,8879,8878,8865,8843,8801,8798,8790,8772,8756,8752,8736,8680,8673,8658,8655,8644,8640,8621,8601,8562,8539,8531,8530,8515,8484,8479,8477,8455,8454,8453,8452,8451,8409,8339,8308,8295,8273,8268,8255,8248,8245,8144,8133,8110,8092,8064,8037,8029,8018,8014,7975,7895,7854,7853,7852,7830,7813,7788,7780,7772,7771,7688,7685,7654,7637,7600,7555,7553,7456,7451,7231,7218,7184,7119,7104,7102,7092,7068,7067,7043,7033,6973,6972,6956,6942,6922,6920,6897,6877,6780,6734,6725,6710,6709,6650,6647,6644,6606,65514,65488,6535,65311,65048,64890,64727,64726,64551,64507,64438,64320,6412,64127,64080,63803,63675,6349,63423,6323,63156,6310,63105,6309,62866,6274,6273,62674,6259,62570,62519,6250,62312,62188,62080,62042,62006,61942,61851,61827,61734,61722,61669,61617,61616,61516,61473,61402,6126,6120,61170,61169,61159,60989,6091,6090,60794,60789,60783,60782,60753,60743,60728,60713,6067,60628,60621,60612,60579,60544,60504,60492,60485,60403,60401,60377,60279,60243,60227,60177,60111,60086,60055,60003,60002,60000,59987,59841,59829,59810,59778,5975,5974,5971,59684,5966,5958,59565,5954,5953,59525,59510,59509,59504,5949,59499,5948,5945,5939,5936,5934,59340,5931,5927,5926,5924,5923,59239,5921,5920,59191,5917,59160,59149,59122,59107,5908,59087,58991,58970,58908,5888,5887,5881,5878,5875,5874,58721,5871,58699,58634,58622,58610,5860,5858,58570,58562,5854,5853,5852,5849,58498,5848,58468,5845,58456,58446,58430,5840,5839,5838,58374,5836,5834,5831,58310,58305,5827,5826,58252,5824,5821,5820,5817,58164,58109,58107,5808,58072,5806,5804,57999,57988,57928,57923,57896,57891,57733,57730,57702,57681,57678,57576,57479,57398,57387,5737,57352,57350,5734,57347,57335,5732,57325,57123,5711,57103,57020,56975,56973,56827,56822,56810,56725,56723,56681,5667,56668,5665,56591,56535,56507,56293,56259,5622,5621,5620,5612,5611,56055,56016,55948,55910,55907,55901,55781,55773,55758,55721,55684,55652,55635,55579,55569,55568,55556,5552,55527,55479,55426,55400,55382,55350,55312,55227,55187,55183,55000,54991,54987,54907,54873,54741,54722,54688,54658,54605,5458,5457,54551,54514,5444,5442,5441,54323,54321,54276,54263,54235,54127,54101,54075,53958,53910,53852,53827,53782,5377,53742,5370,53690,53656,53639,53633,53491,5347,53469,53460,53370,53361,53319,53240,53212,53189,53178,53085,52948,5291,52893,52675,52665,5261,5259,52573,52506,52477,52391,52262,52237,52230,52226,52225,5219,52173,52071,52046,52025,52003,52002,52001,52000,51965,51961,51909,51906,51809,51800,51772,51771,51658,51582,51515,51488,51485,51484,5147,51460,51423,51366,51351,51343,51300,5125,51240,51235,51234,51233,5122,5121,51139,51118,51067,51037,51020,51011,50997,5098,5096,5095,50945,5090,50903,5088,50887,50854,50849,50836,50835,50834,50833,50831,50815,50809,50787,50733,50692,50585,50577,50576,50545,50529,50513,50356,50277,50258,50246,50224,50205,50202,50198,50189,5017,5016,50101,50040,50019,50016,49927,49803,49765,49762,49751,49678,49603,49597,49522,49521,49520,49519,49500,49498,49452,49398,49372,49352,4931,49302,49275,49241,49235,49232,49228,49216,49213,49211,49204,49203,49202,49201,49197,49196,49191,49190,49189,49179,49173,49172,49170,49169,49166,49132,49048,4903,49002,48973,48967,48966,48925,48813,48783,48682,48648,48631,4860,4859,48434,48356,4819,48167,48153,48127,48083,48067,48009,47969,47966,4793,47860,47858,47850,4778,47777,4771,4770,47700,4767,47634,4760,47595,47581,47567,47448,47372,47348,47267,47197,4712,47119,47029,47012,46992,46813,46593,4649,4644,46436,46418,46372,46310,46182,46171,46115,4609,4606,46069,46034,45960,45864,45777,45697,45624,45602,45463,45438,45413,4530,45226,45220,4517,4516,45164,45136,45050,45038,44981,44965,4476,4471,44711,44704,4464,44628,44616,44541,44505,44479,44431,44410,44380,44200,44119,44101,44004,4388,43868,4384,43823,43734,43690,43654,43425,43242,43231,43212,43143,43139,43103,43027,43018,43002,42990,42906,42735,42685,42679,42675,42632,42590,42575,42560,42559,42452,42449,42322,42276,42251,42158,42127,42035,42001,41808,41773,41632,41551,41442,41398,41348,41345,41342,41318,41281,41250,41142,41123,40951,40834,40812,40754,40732,40712,40628,40614,40513,40489,40457,40400,40393,40306,40011,40005,40003,40002,40001,39917,39895,39883,39869,39795,39774,39763,39732,39630,39489,39482,39433,39380,39293,39265,39117,39067,38936,38805,38780,38764,38761,38570,38561,38546,38481,38446,38358,38331,38313,38270,38224,38205,38194,38029,37855,37789,37777,37674,37647,37614,37607,37522,37393,37218,37185,37174,37151,37121,36983,36962,36950,36914,36824,36823,36748,36710,36694,36677,36659,36552,36530,36508,36436,36368,36275,36256,36105,36104,36046,35986,35929,35906,35901,35900,35879,35731,35593,35553,35506,35401,35393,35392,35349,35272,35217,35131,35116,35050,35033,34875,34833,34783,34765,34728,34683,34510,34507,34401,34381,34341,34317,34189,34096,34036,34021,33895,33889,33882,33879,33841,33605,33604,33550,33523,33522,33444,33395,33367,33337,33335,33327,33277,33203,33200,33192,33175,33124,33087,33070,33017,33011,33000,32976,32961,32960,32944,32932,32911,32910,32908,32905,32904,32898,32897,32888,32871,32869,32868,32858,32842,32837,32820,32815,32814,32807,32799,32798,32797,32790,32789,32788,32765,32764,32261,32260,32219,32200,32102,32088,32031,32022,32006,31728,31657,31522,31438,31386,31339,31072,31058,31033,30896,30705,30659,30644,30599,30519,30299,30195,30087,29810,29507,29243,29152,29045,28967,28924,28851,28850,28717,28567,28374,28142,28114,27770,27537,27521,27372,27351,27350,27316,27204,27087,27075,27074,27055,27016,27015,26972,26669,26417,26340,26007,26001,25847,25717,25703,25486,25473,25445,25327,25288,25262,25260,25174,24999,24616,24552,24416,24392,24218,23953,23887,23723,23451,23430,23382,23342,23296,23270,23228,23219,23040,23017,22969,22959,22882,22769,22727,22719,22711,22563,22341,22290,22223,22200,22177,22100,22063,22022,21915,21891,21728,21634,21631,21473,21078,21011,20990,20940,20934,20883,20734,20473,20280,20228,20227,20226,20225,20224,20223,20180,20179,20147,20127,20125,20118,20111,20106,20102,20089,20085,20080,20076,20052,20039,20032,20021,20017,20011,19996,19995,19852,19715,19634,19612,19501,19464,19403,19353,19201,19200,19130,19010,18962,18910,18887,18874,18669,18569,18517,18505,18439,18380,18337,18336,18231,18148,18080,18015,18012,17997,17985,17969,17867,17860,17802,17801,17715,17702,17701,17700,17413,17409,17255,17251,17129,17089,17070,17017,17016,16901,16845,16797,16725,16724,16723,16464,16372,16349,16297,16286,16283,16273,16270,16048,15915,15758,15730,15722,15677,15670,15646,15645,15631,15550,15448,15344,15317,15275,15191,15190,15145,15050,15005,14916,14891,14827,14733,14693,14545,14534,14444,14443,14418,14254,14237,14218,14147,13899,13846,13784,13766,13730,13723,13695,13580,13502,13359,13340,13318,13306,13265,13264,13261,13250,13229,13194,13193,13192,13188,13167,13149,13142,13140,13132,13130,13093,13017,12962,12955,12892,12891,12766,12702,12699,12414,12340,12296,12275,12271,12251,12243,12240,12225,12192,12171,12156,12146,12137,12132,12097,12096,12090,12080,12077,12034,12031,12019,11940,11863,11862,11813,11735,11697,11552,11401,11296,11288,11250,11224,11200,11180,11100,11089,11033,11032,11031,11026,11019,11007,11003,10900,10878,10852,10842,10754,10699,10602,10601,10567,10565,10556,10555,10554,10553,10552,10551,10550,10535,10529,10509,10494,10443,10414,10387,10357,10347,10338,10280,10255,10246,10245,10238,10093,10064,10045,10042,10035,10019,10018,1327,2330,2580,2700,1584,9020,3281,2439,1250,1607,1736,1330,2270,2728,2888,3803,5250,1645,1303,3636,1251,1243,1291,1297,1200,1811,4442,1118,8401,2101,2889,1694,1730,1912,1745,2250,1306,2997,2449,1262,4007,1101,1268,1735,1858,1264,1711,3118,4601,1321,1598,1305,1632,9995,1307,1981,2532,1808,2435,1194,1622,1239,1799,2882,1683,3063,3062,1340,4447,1806,6888,2438,1261,5969,9343,2583,2031,3798,2269,20001,2622,11001,1207,2850,21201,2908,3936,3023,2280,2623,7099,2372,1318,1339,1276,11000,48619,3497,1209,1331,1240,3856,2987,2326,25001,25000,1792,3919,1299,2984,1715,1703,1677,2086,1708,1228,3787,5502,1620,1316,1569,1210,1691,1282,2124,1791,2150,9909,4022,1324,2584,2300,9287,2806,1566,1713,1592,3749,1302,1709,3485,2418,2472,24554,3146,2134,2898,9161,9160,2930,1319,3811,2456,2901,6579,2550,8403,31416,22273,7005,66,32786,32787,706,635,6105,400,47,830,4008,5977,1989,1444,3985,678,27001,591,642,446,1441,54320,11,769,983,979,973,967,965,961,942,935,926,925,914,863,858,844,834,817,815,811,809,789,779,743,1019,1507,1492,509,762,5632,578,1495,5308,52,219,525,1420,665,620,3064,3045,653,158,716,861,9991,3049,1366,1364,833,91,1680,3398,750,615,603,6110,101,989,27010,510,810,1139,4199,76,847,649,707,68,449,664,75,104,629,1652,682,577,985,984,974,958,952,949,946,923,916,899,897,894,889,835,824,814,807,804,798,733,727,237,12,10,501,122,440,771,1663,828,860,695,634,538,1359,1358,1517,1370,3900,492,268,27374,605,8076,1651,1178,6401,761,5145,50,2018,1349,2014,7597,2120,1445,1402,1465,9104,627,4660,7273,950,1384,1388,760,92,831,5978,4557,45,112,456,1214,3086,702,6665,1404,651,5300,6347,5400,1389,647,448,1356,5232,1484,450,1991,1988,1523,1400,1399,221,1385,5191,1346,2024,2430,988,962,948,945,941,938,936,929,927,919,906,883,881,875,872,870,866,855,851,850,841,836,826,820,819,816,813,791,745,736,735,724,719,343,334,300,28,249,230,16,1018,1016,658,1474,696,630,663,2307,1552,609,741,353,638,1551,661,491,640,507,673,632,1354,9105,6143,676,214,14141,182,69,27665,1475,97,633,560,799,7009,2015,628,751,4480,1403,8123,1527,723,1466,1486,1650,991,832,137,1348,685,1762,6701,994,4500,194,180,1539,1379,51,886,2064,1405,1435,11371,1401,1369,402,103,1372,704,854,8892,47557,624,1387,3397,1996,1995,1997,18182,18184,3264,3292,13720,9107,9106,201,1381,35,6588,5530,3141,670,970,968,964,963,960,959,951,947,944,939,933,909,895,891,879,869,868,867,837,821,812,797,796,794,788,756,734,721,718,708,703,60,40,253,231,14,1017,1003,656,975,2026,1497,553,511,611,689,1668,1664,15,561,997,505,1496,637,213,1412,1515,692,694,681,680,644,675,1467,454,622,1476,1373,770,262,654,1535,58,177,26208,677,1519,1398,3457,401,412,493,13713,94,1498,871,1390,6145,133,362,118,193,115,1549,7008,608,1426,1436,38,74,73,71,601,136,4144,129,16444,1446,4132,308,1528,1365,1393,1394,1493,138,5997,397,29,31,44,2627,6147,1510,568,350,2053,6146,6544,1763,3531,399,1537,1992,1355,1454,261,887,200,1376,1424,6111,1410,1409,686,5301,5302,1513,747,9051,1499,7006,1439,1438,8770,853,196,93,410,462,619,1529,1990,1994,1986,1386,18183,18181,6700,1442,95,6400,1432,1548,486,1422,114,1397,6142,1827,626,422,688,206,202,204,1483,7634,774,699,2023,776,672,1545,2431,697,982,978,972,966,957,956,934,920,915,908,907,892,890,885,884,882,877,876,865,857,852,849,842,838,827,818,793,785,784,755,746,738,737,717,34,336,325,303,276,273,236,235,233,181,604,1362,712,1437,2027,1368,1531,645,65301,260,536,764,698,607,1667,1662,1661,404,224,418,176,848,315,466,403,1456,1479,355,763,1472,453,759,437,2432,120,415,1544,1511,1538,346,173,54,56,265,1462,13701,1518,1457,117,1470,13715,13714,267,1419,1418,1407,380,518,65,391,392,413,1391,614,1408,162,108,4987,1502,598,582,487,530,1509,72,4672,189,209,270,7464,408,191,1459,5714,5717,5713,564,767,583,1395,192,1448,428,4133,1416,773,1458,526,1363,742,1464,1427,1482,569,571,6141,351,3984,5490,2,13718,373,17300,910,148,7326,271,423,1451,480,1430,1429,781,383,2564,613,612,652,5303,1383,128,19150,1453,190,1505,1371,533,27009,27007,27005,27003,27002,744,1423,1374,141,1440,1396,352,96,48,552,570,217,528,452,451,2766,2108,132,1993,1987,130,18187,216,3421,142,13721,67,15151,364,1411,205,6548,124,116,5193,258,485,599,149,1469,775,2019,516,986,977,976,955,954,937,932,8,896,893,845,768,766,739,337,329,326,305,295,294,293,289,288,277,238,234,229,228,226,522,2028,150,572,596,420,460,1543,358,361,470,360,457,643,322,168,753,369,185,43188,1541,1540,752,496,662,1449,1480,1473,184,1672,1671,1670,435,434,1532,1360,174,472,1361,17007,414,535,432,479,473,151,1542,438,1488,1508,618,316,1367,439,284,542,370,2016,248,1491,44123,41230,7173,5670,18136,3925,7088,1425,17755,17756,4072,5841,2102,4123,2989,10051,10050,31029,3726,9978,9925,6061,6058,6057,6056,6054,6053,6049,6048,6047,6046,6045,6044,6043,6042,6041,6040,6039,6038,6037,6036,6035,6034,6033,6032,6031,6029,6028,6027,6026,6024,6023,6022,6020,6019,6018,6016,6014,6013,6012,6011,36462,5793,3423,3424,4095,3646,3510,3722,3651,14500,3865,15345,3763,38422,3877,9092,5344,2341,6116,2157,165,6936,8041,4888,4889,3074,2165,4389,5770,5769,16619,11876,11877,3741,3633,3840,3717,3716,3590,2805,4537,9762,5007,5006,5358,4879,6114,4185,2784,3724,2596,2595,4417,4845,22321,22289,3219,1338,36411,3861,5166,3674,1785,534,6602,47001,5363,8912,2231,5747,5748,11208,7236,4049,4050,22347,63,3233,3359,4177,48050,3111,3427,5321,5320,3702,2907,8991,8990,2054,4847,9802,9800,4368,5990,3563,5744,5743,12321,12322,9206,9204,9205,9201,9203,2949,2948,6626,8199,4145,3482,2216,13708,3786,3375,7566,2539,2387,3317,2410,2255,3883,4299,4296,4295,4293,4292,4291,4290,4289,4288,4287,4286,4285,4284,4283,4282,4281,4280,4278,4277,4276,4275,4274,4273,4272,4271,4270,4269,4268,4267,4266,4265,4264,4263,4261,4260,4259,4258,4257,4256,4255,4254,4253,4251,4250,4249,4248,4247,4246,4245,4244,4241,4240,4239,4238,4237,4236,4235,4233,4232,4231,4230,4229,4228,4227,4226,4225,4223,4222,4221,4219,4218,4217,4216,4215,4214,4213,4212,4211,4210,4209,4208,4207,4205,4204,4203,4202,4201,2530,5164,28200,3845,3541,4052,21590,1796,25793,8699,8182,4991,2474,5780,3676,24249,1631,6672,6673,3601,5046,3509,1852,2386,8473,7802,4789,3555,12013,12012,3752,3245,3231,16666,6678,17184,9086,9598,3073,2074,1956,2610,3738,2994,2993,2802,1885,14149,13786,10100,9284,14150,10107,4032,2821,3207,14154,24323,2771,5646,2426,18668,2554,4188,3654,8034,5675,15118,4031,2529,2248,1142,19194,433,3534,3664,2537,519,2655,4184,1506,3098,7887,37654,1979,9629,2357,1889,3314,3313,4867,2696,3217,6306,1189,5281,8953,1910,13894,372,3720,1382,2542,3584,4034,145,27999,3791,21800,2670,3492,24678,34249,39681,1846,5197,5462,5463,2862,2977,2978,3468,2675,3474,4422,12753,13709,2573,3012,4307,4725,3346,3686,4070,9555,4711,4323,4322,10200,7727,3608,3959,2405,3858,3857,24322,6118,4176,6442,8937,17224,17225,33434,1906,22351,2158,5153,3885,24465,3040,20167,8066,474,2739,3308,590,3309,7902,7901,7903,20046,5582,5583,7872,13716,13717,13705,6252,2915,1965,3459,3160,3754,3243,10261,7932,7933,5450,11971,379,7548,1832,3805,3805,16789,8320,8321,4423,2296,7359,7358,7357,7356,7355,7354,7353,7352,7351,7350,7349,7348,7347,7346,7344,7343,7342,7341,7340,7339,7338,7337,7336,7335,7334,7333,7332,7331,7330,7329,7328,7327,7324,7323,7322,7321,7319,7318,7317,7316,7315,7314,7313,7312,7311,7310,7309,7308,7307,7306,7305,7304,7303,7302,7301,8140,5196,5195,6130,5474,5471,5472,5470,4146,3713,5048,31457,7631,3544,41121,11600,3696,3696,3549,1380,22951,22800,3521,2060,6083,9668,3552,1814,1977,2576,2729,24680,13710,13712,25900,2403,2402,2470,5203,3579,2306,1450,7015,7012,7011,22763,2156,2493,4019,4018,4017,4015,2392,3175,32249,1627,10104,2609,5406,3251,4094,3241,6514,6418,3734,2679,4953,5008,2880,8243,8280,26133,8555,5629,3547,5639,5638,5637,5115,3723,4950,3895,3894,3491,3318,6419,3185,243,3212,9536,1925,11171,8404,8405,8989,6787,6483,3867,3866,1860,1870,5306,3816,7588,6786,2084,11165,11161,11163,11162,11164,3708,4850,7677,16959,247,3478,5349,3854,5397,7411,9612,11173,9293,5027,5026,5705,8778,527,1312,8808,6144,4157,4156,3249,7471,3615,2154,45966,17235,3018,38800,2737,156,3807,2876,1759,7981,3606,3647,3438,4683,9306,9312,7016,33334,3413,3834,3835,2440,6121,2568,17185,7982,2290,2569,2863,1964,4738,2132,17777,16162,6551,3230,4538,3884,9282,9281,4882,5146,580,1967,2659,2409,5416,2657,3380,5417,2658,5161,5162,10162,10161,33656,7560,2599,2704,2703,4170,7734,9522,3158,4426,4786,2721"\n\nsynPorts = cli.String("syn-ports", cli.setDefault(top5000))\n\nsynPortsList = str.ParseStringToPorts(top5000)\n\nif synPortsList != "" && len(synPortsList) == 0{\n    synPorts = top5000\n}\n\ncli.check()\n\nif len(tcpPortsList) >= 65535 {\n    tcpPorts = "1,3,4,6,7,8,9,13,17,19,20,21,22,23,24,25,26,27,30,32,33,37,42,43,49,53,55,57,59,60,65,66,68,70,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,106,108,109,110,111,113,114,119,122,123,125,127,132,133,135,137,138,139,143,144,146,157,161,163,171,179,180,188,198,199,200,206,208,210,211,212,220,222,223,225,235,250,251,252,254,255,256,257,259,264,268,270,280,299,301,302,306,308,309,311,321,333,340,366,381,388,389,403,406,407,411,416,417,419,421,423,425,427,436,441,442,443,444,445,447,458,464,465,475,481,497,500,502,511,512,513,514,515,517,522,523,524,540,541,543,544,545,548,554,555,556,557,560,563,586,587,590,591,593,600,602,606,610,616,617,621,623,625,631,636,639,641,646,648,655,657,659,660,666,667,668,669,674,683,684,687,688,690,691,700,701,705,709,710,711,713,714,715,720,722,725,726,728,729,730,731,732,733,740,748,749,754,757,758,765,770,777,778,780,782,783,786,787,790,792,795,800,801,802,803,804,805,806,807,808,809,810,811,812,822,823,825,829,839,840,843,846,856,859,860,862,864,866,873,874,877,878,880,888,889,898,900,901,902,903,904,905,911,912,913,916,918,921,922,924,925,928,930,931,943,953,955,956,968,969,971,980,981,983,987,990,992,993,995,996,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1116,1117,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1130,1131,1132,1134,1135,1136,1137,1138,1141,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154,1156,1157,1158,1159,1162,1163,1164,1165,1166,1167,1168,1169,1173,1174,1175,1176,1179,1180,1182,1183,1184,1185,1186,1187,1188,1190,1191,1192,1194,1195,1196,1198,1199,1200,1201,1204,1207,1208,1209,1210,1211,1212,1213,1215,1216,1217,1218,1220,1221,1222,1223,1228,1229,1233,1234,1236,1239,1240,1241,1243,1244,1247,1248,1249,1250,1251,1259,1261,1262,1264,1268,1270,1271,1272,1276,1277,1279,1282,1287,1290,1291,1296,1297,1299,1300,1301,1302,1303,1305,1306,1307,1308,1309,1310,1311,1313,1314,1315,1316,1317,1318,1319,1321,1322,1324,1327,1328,1330,1331,1334,1336,1337,1339,1340,1347,1350,1351,1352,1353,1356,1357,1389,1413,1414,1417,1433,1434,1443,1445,1455,1461,1494,1500,1501,1503,1516,1521,1522,1524,1525,1526,1527,1533,1547,1550,1556,1558,1559,1560,1565,1566,1569,1580,1583,1584,1592,1594,1598,1600,1603,1605,1607,1615,1620,1622,1630,1632,1635,1638,1641,1645,1658,1666,1677,1680,1683,1687,1688,1691,1694,1699,1700,1701,1703,1707,1708,1709,1711,1712,1713,1715,1717,1718,1719,1720,1721,1722,1723,1730,1735,1736,1745,1750,1752,1753,1755,1761,1782,1783,1790,1791,1792,1799,1800,1801,1805,1806,1807,1808,1811,1812,1818,1823,1825,1835,1839,1840,1858,1861,1862,1863,1864,1871,1875,1883,1888,1900,1901,1911,1912,1914,1918,1924,1927,1933,1935,1947,1949,1954,1958,1971,1972,1973,1974,1975,1976,1979,1980,1981,1982,1984,1988,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2020,2021,2022,2025,2030,2031,2033,2034,2035,2038,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2051,2060,2062,2065,2067,2068,2069,2070,2080,2081,2082,2083,2086,2087,2093,2095,2096,2099,2100,2101,2103,2104,2105,2106,2107,2110,2111,2112,2115,2119,2121,2124,2125,2126,2134,2135,2142,2144,2148,2150,2160,2161,2168,2170,2179,2181,2187,2190,2191,2196,2197,2200,2201,2203,2222,2224,2232,2241,2250,2251,2253,2260,2261,2262,2265,2269,2270,2271,2280,2288,2291,2292,2300,2301,2302,2304,2312,2313,2323,2325,2326,2330,2335,2340,2348,2366,2371,2372,2375,2381,2382,2383,2391,2393,2394,2399,2401,2418,2425,2433,2435,2436,2438,2439,2449,2456,2463,2472,2480,2490,2492,2500,2501,2505,2517,2521,2522,2525,2531,2532,2550,2551,2557,2558,2567,2580,2583,2584,2585,2598,2600,2601,2602,2604,2605,2606,2607,2608,2622,2623,2628,2631,2638,2644,2663,2691,2700,2701,2702,2706,2710,2711,2712,2717,2718,2723,2725,2728,2734,2800,2804,2806,2808,2809,2811,2812,2847,2850,2869,2875,2882,2886,2888,2889,2898,2901,2902,2903,2908,2909,2910,2920,2930,2957,2958,2967,2968,2973,2984,2987,2988,2991,2997,2998,3000,3001,3002,3003,3005,3006,3007,3008,3010,3011,3012,3013,3014,3017,3023,3025,3030,3031,3033,3050,3052,3057,3062,3063,3071,3077,3080,3089,3094,3102,3103,3118,3119,3121,3128,3133,3146,3162,3167,3168,3190,3200,3210,3211,3216,3220,3221,3240,3260,3261,3263,3268,3269,3280,3281,3283,3291,3299,3300,3301,3304,3306,3307,3310,3311,3312,3319,3322,3323,3324,3325,3333,3334,3351,3362,3363,3365,3367,3368,3369,3370,3371,3372,3374,3376,3377,3380,3388,3389,3390,3396,3398,3399,3400,3404,3410,3414,3415,3419,3425,3430,3437,3439,3443,3456,3465,3476,3479,3483,3485,3486,3493,3497,3503,3505,3506,3511,3513,3514,3515,3517,3519,3520,3526,3527,3530,3532,3535,3546,3551,3577,3580,3586,3588,3599,3600,3602,3603,3606,3618,3621,3622,3632,3636,3637,3652,3653,3656,3658,3659,3663,3668,3669,3670,3672,3680,3681,3683,3684,3689,3690,3697,3700,3703,3712,3721,3728,3731,3737,3742,3749,3765,3766,3784,3787,3788,3790,3792,3793,3795,3796,3798,3799,3800,3801,3803,3806,3808,3809,3810,3811,3812,3813,3814,3817,3820,3823,3824,3825,3826,3827,3828,3830,3831,3837,3839,3842,3846,3847,3848,3849,3850,3851,3852,3853,3856,3859,3860,3863,3868,3869,3870,3871,3872,3876,3878,3879,3880,3882,3888,3889,3890,3897,3899,3901,3902,3904,3905,3906,3907,3908,3909,3911,3913,3914,3915,3916,3918,3919,3920,3922,3923,3928,3929,3930,3931,3935,3936,3937,3938,3940,3941,3943,3944,3945,3946,3948,3949,3952,3956,3957,3961,3962,3963,3964,3967,3968,3969,3971,3972,3975,3979,3980,3981,3982,3983,3986,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4009,4010,4016,4020,4022,4023,4024,4025,4029,4035,4036,4039,4040,4045,4056,4058,4065,4080,4087,4090,4096,4100,4101,4111,4112,4113,4118,4119,4120,4121,4125,4126,4129,4135,4141,4143,4147,4158,4161,4164,4174,4180,4190,4192,4200,4206,4220,4224,4234,4237,4242,4252,4262,4279,4294,4297,4298,4300,4302,4321,4325,4328,4333,4342,4343,4355,4356,4357,4358,4369,4374,4375,4376,4380,4384,4388,4389,4401,4407,4414,4415,4418,4430,4433,4440,4442,4443,4444,4445,4446,4447,4449,4453,4454,4455,4464,4471,4476,4480,4497,4503,4516,4517,4530,4534,4545,4550,4555,4558,4559,4567,4569,4570,4599,4600,4601,4602,4606,4609,4644,4649,4658,4662,4665,4687,4689,4700,4712,4713,4745,4760,4767,4770,4771,4778,4793,4800,4819,4848,4850,4859,4860,4875,4876,4877,4881,4899,4900,4903,4912,4931,4949,4998,4999,5000,5001,5002,5003,5004,5005,5009,5010,5011,5012,5013,5014,5015,5016,5017,5020,5021,5023,5030,5033,5040,5050,5051,5052,5053,5054,5055,5060,5061,5063,5066,5070,5074,5080,5081,5087,5088,5090,5095,5096,5098,5100,5101,5102,5111,5114,5118,5120,5121,5122,5125,5133,5137,5147,5151,5152,5155,5156,5190,5200,5201,5202,5203,5212,5214,5219,5221,5222,5223,5225,5226,5233,5234,5235,5242,5250,5252,5255,5256,5259,5261,5269,5279,5280,5291,5298,5339,5347,5353,5357,5370,5377,5405,5414,5423,5431,5432,5433,5440,5441,5442,5444,5457,5458,5473,5475,5500,5501,5502,5510,5520,5544,5550,5552,5553,5555,5560,5561,5566,5600,5601,5631,5632,5633,5644,5655,5656,5666,5671,5672,5678,5679,5680,5718,5730,5757,5780,5800,5801,5802,5803,5807,5810,5811,5812,5815,5818,5822,5823,5825,5850,5859,5862,5868,5869,5877,5881,5887,5888,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5909,5910,5911,5914,5915,5918,5922,5925,5938,5940,5950,5952,5959,5960,5961,5962,5963,5966,5968,5981,5987,5988,5989,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6017,6020,6025,6050,6051,6059,6060,6068,6080,6088,6090,6100,6101,6103,6106,6112,6118,6123,6129,6156,6167,6170,6180,6198,6203,6222,6226,6247,6259,6286,6346,6365,6372,6379,6388,6389,6443,6481,6500,6502,6504,6510,6520,6543,6546,6547,6550,6565,6566,6567,6580,6587,6600,6602,6603,6606,6611,6646,6648,6662,6664,6666,6667,6668,6669,6670,6677,6680,6688,6689,6692,6699,6711,6732,6778,6779,6788,6789,6792,6800,6801,6839,6842,6868,6869,6879,6881,6886,6887,6888,6889,6890,6896,6901,6920,6969,6988,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7017,7018,7019,7020,7021,7022,7023,7024,7025,7028,7031,7041,7044,7048,7050,7051,7055,7060,7070,7071,7072,7074,7078,7080,7081,7082,7083,7084,7086,7088,7090,7093,7094,7100,7101,7102,7103,7106,7108,7111,7117,7123,7129,7140,7171,7180,7200,7201,7202,7215,7241,7272,7273,7278,7280,7281,7288,7300,7321,7330,7380,7402,7435,7438,7443,7474,7496,7500,7501,7512,7547,7567,7625,7627,7676,7680,7687,7688,7700,7702,7703,7709,7711,7713,7725,7741,7742,7744,7749,7751,7770,7776,7777,7778,7788,7789,7791,7799,7800,7801,7856,7878,7888,7890,7896,7899,7900,7901,7903,7909,7911,7913,7915,7920,7921,7925,7929,7937,7938,7942,7943,7979,7995,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8060,8061,8062,8064,8065,8066,8067,8068,8069,8070,8071,8073,8075,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8108,8110,8111,8112,8118,8119,8122,8123,8130,8133,8136,8144,8153,8161,8168,8172,8176,8180,8181,8182,8183,8184,8186,8188,8189,8190,8191,8192,8193,8194,8196,8197,8200,8201,8202,8213,8220,8222,8232,8244,8250,8254,8258,8260,8280,8281,8282,8283,8288,8290,8291,8292,8293,8294,8298,8300,8308,8322,8333,8341,8343,8360,8380,8381,8382,8383,8384,8385,8390,8391,8399,8400,8401,8402,8403,8443,8445,8448,8465,8477,8480,8481,8484,8488,8499,8500,8512,8540,8548,8567,8580,8582,8585,8600,8601,8610,8648,8649,8651,8652,8654,8660,8666,8675,8676,8680,8681,8684,8686,8688,8700,8701,8710,8720,8735,8765,8766,8777,8780,8781,8787,8788,8799,8800,8801,8802,8806,8808,8809,8810,8813,8820,8822,8828,8834,8838,8839,8844,8848,8858,8860,8861,8864,8866,8868,8873,8877,8879,8880,8881,8885,8886,8887,8888,8889,8890,8891,8892,8893,8895,8896,8898,8899,8900,8901,8902,8905,8910,8912,8913,8955,8956,8972,8974,8980,8983,8987,8988,8989,8990,8991,8992,8994,8996,8997,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9019,9020,9022,9025,9030,9031,9036,9038,9039,9040,9043,9050,9053,9060,9061,9068,9070,9071,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9105,9110,9111,9112,9113,9119,9131,9152,9168,9180,9182,9188,9190,9191,9192,9197,9198,9200,9201,9207,9212,9220,9224,9231,9290,9300,9301,9302,9333,9409,9415,9418,9437,9443,9444,9448,9485,9494,9500,9501,9502,9503,9504,9507,9512,9517,9527,9535,9541,9542,9575,9593,9594,9595,9600,9618,9621,9643,9666,9673,9696,9704,9718,9800,9801,9815,9836,9845,9876,9877,9878,9888,9889,9898,9900,9901,9909,9910,9912,9914,9917,9918,9919,9922,9929,9941,9943,9944,9968,9977,9980,9981,9986,9988,9989,9990,9991,9992,9995,9997,9998,9999,10000,10001,10002,10003,10004,10005,10007,10008,10009,10010,10011,10012,10016,10017,10021,10022,10023,10024,10025,10034,10038,10040,10050,10051,10056,10057,10058,10060,10066,10068,10069,10070,10078,10080,10082,10083,10086,10087,10088,10089,10098,10099,10101,10111,10118,10152,10154,10160,10180,10200,10215,10243,10250,10255,10333,10443,10566,10616,10617,10621,10626,10628,10629,10777,10778,10873,11000,11001,11080,11110,11111,11158,11180,11211,11212,11324,11347,11362,11366,11372,11381,11660,11967,12000,12001,12006,12018,12021,12059,12174,12215,12262,12265,12315,12333,12345,12346,12380,12443,12452,12881,13333,13382,13456,13722,13724,13782,13783,13988,14000,14007,14238,14338,14441,14442,14549,15000,15001,15002,15003,15004,15018,15080,15400,15402,15580,15660,15672,15693,15698,15742,15801,15888,16000,16001,16012,16016,16018,16080,16113,16580,16705,16788,16800,16851,16929,16992,16993,17000,17003,17071,17095,17173,17595,17777,17877,17988,18000,18001,18002,18004,18008,18018,18040,18060,18080,18081,18082,18085,18088,18090,18098,18101,18103,18181,18264,18765,18801,18803,18880,18881,18888,18889,18988,19000,19001,19010,19045,19080,19101,19244,19283,19315,19350,19780,19801,19842,19900,19994,20000,20001,20002,20005,20021,20022,20031,20046,20052,20140,20142,20151,20153,20165,20200,20202,20221,20222,20720,20806,20808,20828,20992,21000,21080,21188,21245,21501,21502,21571,21792,21900,22080,22222,22228,22343,22480,22580,22939,23052,23352,23380,23454,23458,23502,23796,24444,24800,25006,25024,25734,25735,26000,26214,26470,27000,27017,27352,27353,27355,27356,27357,27715,27779,28017,28018,28080,28099,28201,28211,28214,28280,28780,29672,29798,29831,30000,30001,30005,30015,30025,30030,30058,30082,30088,30551,30704,30718,30951,31000,31038,31082,31188,31337,31727,31945,32766,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,32791,32792,32803,32816,32822,32835,33354,33453,33554,33899,34440,34571,34572,34573,34899,35500,35513,37006,37839,38000,38037,38080,38086,38185,38188,38292,38443,38501,38517,38888,39136,39376,39659,40000,40001,40069,40080,40193,40310,40811,40911,41064,41474,41511,41516,41523,42424,42510,43651,44176,44334,44401,44442,44443,44445,44501,44709,45100,45149,45177,45692,46200,46996,47078,47088,47544,47583,48080,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49164,49165,49167,49168,49171,49175,49176,49186,49195,49236,49400,49401,49705,49960,49999,50000,50001,50002,50003,50006,50030,50045,50050,50060,50070,50075,50080,50090,50100,50240,50300,50389,50500,50636,50800,51103,51106,51191,51413,51493,52660,52673,52710,52735,52822,52847,52848,52849,52850,52851,52853,52869,53211,53313,53314,53535,54045,54328,55020,55055,55056,55070,55351,55352,55555,55576,55600,55858,56688,56737,56738,57294,57665,57797,57880,58000,58001,58002,58031,58060,58080,58083,58124,58630,58632,58838,58898,59009,59093,59110,59200,59201,59202,59777,59999,60000,60010,60020,60022,60030,60080,60101,60123,60146,60443,60465,60642,61081,61532,61613,61616,61900,61999,62078,63331,64623,64680,65000,65001,65055,65129,65310,65389,65486,65493,65533"\n    synPorts = str.Join(str.FilterPorts("1-65535",tcpPorts), ",")\n} else {\n    synPorts = str.Join(str.FilterPorts(synPorts,tcpPorts), ",")\n}\n\ntcpOps = []\ntcpOps = append(tcpOps, servicescan.active(true))\n\ntcpOps = append(tcpOps, servicescan.concurrent(50))\ntcpOps = append(tcpOps, servicescan.maxProbes(4))\n\ntcpOps = append(tcpOps, servicescan.probeTimeout(5.0))\n\ntcpOps = append(tcpOps, servicescan.all())\n\n// 设置排除端口和主机\nif excludePorts != "" {\n    yakit.Info("设置排除端口：%v", excludePorts)\n    tcpOps = append(tcpOps, servicescan.excludePorts(excludePorts))\n}\nif excludeHosts != "" {\n    yakit.Info("设置排除主机：%v", excludeHosts)\n    tcpOps = append(tcpOps, servicescan.excludeHosts(excludeHosts))\n}\n\nsynPortsList = str.ParseStringToPorts(synPorts)\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\nyakit.Info("SYN Port 端口个数 ：%v",len(synPortsList))\nyakit.Info("TCP Port 端口个数 ：%v",len(tcpPortsList))\nyakit.Info("扫描参数设置完成，准备扫描~")\n\n\nvar synscanEnable = false\ntry {\n    yakit.Info("检测 SYN 扫描是否可用中")\n    for res in synscan.Scan("127.0.0.1", "80", synscan.wait(1))~ {  }\n    \n    synscanEnable = true\n    // yakit.StatusCard("SYN 扫描", "可用")\n} catch err {\n    yakit.Info("SYN 扫描不可用，原因是：%v", err)\n}\n\n\n\nbruteOpt = []\n\nbruteOpt = append(bruteOpt, brute.minDelay(1), brute.maxDelay(5))\n\nbruteOpt = append(bruteOpt, brute.finishingThreshold(1))\nbruteOpt = append(bruteOpt, brute.concurrentTarget(20))\nbruteOpt = append(bruteOpt, brute.concurrent(10))\n\n\nbruteScan = func(result) {\n    bruteType = ""\n    if result.GetServiceName() == "exasoftport1" {\n        return\n    }\n    \n    for _, bt := range brute.GetAvailableBruteTypes() {\n        if result.GetServiceName().Lower().Contains(bt) || bt.Contains(result.GetServiceName().Lower()) {\n            bruteType = bt\n            break\n        }\n        \n    }\n    \n\n    if bruteType == "" {\n        return\n    }\n    \n\n    defaultusers = []\n    defaultpass = []\n\n    if bruteType == "ftp" {\n        defaultusers = ["ftp", "www", "anonymous", "admin"]\n        defaultpass = ["admin", "admin123", "123456"]\n    } else if bruteType == "memcached" {\n        defaultusers = ["root", "admin"]\n        defaultpass = ["root", "123456"]\n    } else if bruteType == "mongodb" {\n        defaultusers = ["root", "admin", "mongodb"]\n        defaultpass = ["root", "admin123", "root@123", "123456"]\n    } else if bruteType == "mssql" {\n        defaultusers = ["root", "admin", "mssql"]\n        defaultpass = ["root", "admin123", "root@123", "admin", "123456"]\n    } else if bruteType == "mysql" {\n        defaultusers = ["mysql", "root", "admin"]\n        defaultpass = ["root", "123456", "admin123", "admin", "root@123"]\n    } else if bruteType == "postgres" {\n        defaultusers = ["postgres", "root", "admin"]\n        defaultpass = ["root", "admin", "123456"]\n    } else if bruteType == "rdp" {\n        defaultusers = ["admin", "administrator", "root", "guest"]\n        defaultpass = ["administrator", "guest", "admin", "123456"]\n    } else if bruteType == "redis" {\n        defaultusers = ["redis"]\n        defaultpass = ["redis", "123456"]\n    } else if bruteType == "smb" {\n        defaultusers = ["administrator", "admin", "test", "guest", "system", "root", "sa"]\n        defaultpass = ["admin123!@#", "admin", "admin123", "admin@123", "admin#123", "123456", "root@123"]\n    } else if bruteType == "snmp" {\n        defaultusers = ["snmp"]\n        defaultpass = ["public", "private", "0", "0392a0", "1234", "2read", "4changes"]\n    } else if bruteType == "ssh" {\n        defaultusers = ["root", "admin"]\n        defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n    } else if bruteType == "telnet" {\n        defaultusers = ["root", "admin"]\n        defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n    } else if bruteType == "tomcat" {\n        defaultusers = ["manager", "tomcat"]\n        defaultpass = ["tomcat", "manager"]\n    } else if bruteType == "vnc" {\n        defaultusers = ["vnc"]\n        defaultpass = ["123456", "admin", "root"]\n    //} else if bruteType == "oracle" {\n        //  defaultusers = ["sys", "system", "oracle"]\n        //defaultpass = ["sys", "system", "oracle", "123456", ""]\n    } else if bruteType == "rtsp" {\n        defaultusers = ["admin"]\n        defaultpass = ["12345", "123456", ""]\n    } else {\n        return\n    }\n    \n\n    uL = make([]string)\n    pL = make([]string)\n\n    uL = append(uL, defaultusers...)\n\n    pL = append(pL, defaultpass...)\n\n    bruteTasks := len(uL) * len(pL)// 计算爆破任务数量        \n\n    addr := str.HostPort(result.Target, result.Port)\n    yakit.Info("Start Load Bruter for %s: %s", bruteType, addr)\n\n    instance, err := brute.New(string(bruteType), brute.userList(uL...), brute.passList(pL...), brute.debug(true), \n                                brute.okToStop(true), bruteOpt...)\n    if err != nil {\n        yakit.Error(\n            "构建弱口令与未授权扫描失败：%v", \n            err, \n        )\n        return\n    }\n    \n\n    res, err := instance.Start(addr)\n    if err != nil {\n        yakit.Error("输入目标失败：%v", err)\n        return\n    }\n    \n\n    riskTarget = addr\n    for rt := range res {\n        yakit.Info("rt string %v ", rt.String())\n        if rt == nil {\n            continue\n        }\n        \n\n        if !rt.Ok {\n            continue\n        }\n        \n        if rt.Username == "" && rt.Password == "" {\n            risk.NewRisk(\n                riskTarget, \n                risk.severity("high"), \n                risk.type("weak-pass"), \n                risk.typeVerbose("未授权访问"), \n                risk.title(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                risk.titleVerbose(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                risk.description("由于配置不当或管理疏忽，某些服务、接口或应用存在未授权访问的风险。攻击者可以直接访问这些资源而不需要任何身份验证，这可能会导致敏感数据的泄露、系统的滥用或其他恶意行为。"), \n                risk.solution(`1. 审核所有公开可访问的服务、接口和应用，确保它们都有适当的访问控制。\n2. 使用身份验证机制，如用户名/密码、API密钥或OAuth。\n3. 定期监控和审查访问日志，以检测任何可疑或未授权的活动。`), \n                risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n            )\n        } else {\n            risk.NewRisk(\n                riskTarget, \n                risk.severity("high"), \n                risk.type("weak-pass"), \n                risk.typeVerbose("弱口令"), \n                risk.description("网站管理、运营人员由于安全意识不足，为了方便、避免忘记密码等，使用了非常容易记住的密码，或者是直接采用了系统的默认密码等。攻击者利用此漏洞可直接进入应用系统或者管理系统，从而进行系统、网页、数据的篡改与删除，非法获取系统、用户的数据，甚至可能导致服务器沦陷。"), \n                risk.solution("用户层面 : 不要使用常见的弱口令作为密码,不要多个系统或者社交账号使用同一套密码,定期修改密码,建议使用包含随机值的或者随机生成的字符串作为系统密码"), \n                risk.title(sprintf(\n                    "Weak Password[%v]：%v user(%v) pass(%v)", \n                    rt.Type, \n                    rt.Target, \n                    rt.Username, \n                    rt.Password, \n                )), \n                risk.titleVerbose(sprintf("弱口令[%v]：%v user(%v) pass(%v)", rt.Type, rt.Target, rt.Username, \n                                            rt.Password)), \n                risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n            )\n        }\n        \n    }\n}\n\n\ncveBaseLineWg = sync.NewSizedWaitGroup(10)\n\ncveBaselineCheck = func (result) {\n    cveBaseLineWg.Add(1)\n    go func() {\n        defer cveBaseLineWg.Done()\n        target = str.HostPort(result.Target, result.Port)\n        cpes = x.RemoveRepeat(result.Fingerprint.CPEs)\n        versionList = []\n        for _, cpe = range cpes {\n            parameter = cpe\n            cpe, err = cve.parseToCpe(cpe)\n            if err != nil {\n                continue\n            }\n            if cpe.Version != "*" {\n                // 防止重复判断漏洞\n                if cpe.Version not in versionList {\n                    versionList = append(versionList, cpe.Version)\n                    for res = range cve.QueryEx(cve.product(cpe.Product, cpe.Version)) {\n                        titleStr = sprintf("%s: - %s", res.CVE, res.TitleZh)\n                        risk.NewRisk(target, risk.title(titleStr), risk.type("cve-baseline"), risk.typeVerbose("CVE基线检查"),\n                                risk.parameter(parameter), risk.potential(true), risk.level(res.Severity),\n                                risk.description(res.DescriptionMainZh), risk.solution(res.Solution), risk.cve(res.CVE))\n                    }\n\n                }\n\n            }\n        }\n    }()\n}\n\nhandleServiceScanResult = func(result) {\n    if enableCVEFlag {\n        cveBaselineCheck(result)\n    }\n    manager.HandleServiceScanResult(result)\n    if enableBruteFlag && len(result.GetServiceName()) != 0 {\n        serviceName = result.GetServiceName()\n        yakit.Info("Start Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n        bruteScan(result)\n        yakit.Info("End Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n    }\n}\n\naliveHostCountList = []\n\n\nOpenPortCount = 0\nopenPortCountLock = sync.NewLock()\naddOpenPortCount = func() {\n    openPortCountLock.Lock()\n    defer openPortCountLock.Unlock()\n    OpenPortCount++\n}\n\nruntimeID = os.Getenv("YAK_RUNTIME_ID")\n\nfunc handleTCP(targets) {\n    try {\n        for result in servicescan.Scan(targets, tcpPorts, tcpOps...)~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            \n            yakit.Info("GOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err {\n        yakit.Error("处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\nfunc handleSYN(targets){\n\n    try {\n        for result in servicescan.ScanFromSynResult(\n            synscan.Scan(targets, synPorts, \n                    synscan.excludePorts(tcpPorts),\n                    synscan.concurrent(synConcurrent),\n                )~, \n                tcpOps..., \n            )~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            yakit.Info("SYNGOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err { \n        yakit.Error("SYN 处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\n\n\n\n\ntargets = str.ParseStringToHosts(targetRaw)\n\ninfo = {}\n\nalive = ""\n\nfor res := range ping.Scan(targetRaw, pingOpt...) {\n    if res.Ok {\n        alive += res.IP + ","\n    }\n}\n\nlog.Info("ping res %s",alive)\n\naliveTargets = str.ParseStringToHosts(alive)\n\n\ninfo["runtime_id"] = runtimeID\ninfo["host_total"] = len(targets)\ninfo["port_total"] = len(synPortsList) + len(tcpPortsList)\ninfo["plugins"] = len(pluginNames)\n\ninfoJson = json.dumps(info)\n\ndb.SetKey("JznQXuFDSepeNWHbiLGEwONiaBxhvj_SERVER_SCAN_MANAGER", infoJson)\n\ntargetBatch = ""\ncount := 0\nwgScan := sync.NewSizedWaitGroup(2)\n\nfor _, target = range aliveTargets{\n    currentTarget = target\n\n    if count > 0 {\n        targetBatch += "," + currentTarget\n    } else {\n        targetBatch = currentTarget\n    }\n    count++\n\n    if count == 200 {\n        wgScan.Add(1)\n        go func() {\n            defer wgScan.Done()\n            handleTCP(targetBatch)\n        }()\n\n        if synscanEnable {\n            wgScan.Add(1)\n            go func() {\n                defer wgScan.Done()\n                handleSYN(targetBatch)\n            }()\n        }\n        targetBatch = ""\n        count = 0\n    }\n}\nlog.Info("targetBatch %s", targetBatch)\n\nif count > 0 {\n    wgScan.Add(1)\n    go func {\n        defer wgScan.Done()\n        handleTCP(targetBatch)\n    }\n    if synscanEnable {\n        wgScan.Add(1)\n        go func() {\n            defer wgScan.Done()\n            handleSYN(targetBatch)\n        }()\n    }\n}\n\n\nwgScan.Wait()\n\nyakit.StatusCard("Scan", "DONE")\n\nhostCountSec = len(aliveHostCountList)\n\n\nif hostCountSec != 0 {\n    // 根据存活 ip + (加载成功的插件数 * 2s)/concurrent  + 开放端口数\n    // 定时器，超过一定时间，就扫描结束\n    waitTimeSec = hostCountSec + (loadPluginFinished * 2)/20 + OpenPortCount\n    if waitTimeSec < 10 {\n        waitTimeSec = 60\n    }\n  \tyakit.Info("waitTimeSec %v", waitTimeSec)\n    time.AfterFunc(waitTimeSec * 1000 * 1000 * 1000, func() {\n        yakit.SetProgress(1)\n        yakit.Info("AfterFunc 本次扫描任务已完成。")\n        os.Exit(0)\n    })\n}\n\ncveBaseLineWg.Wait()\nyakit.Info("cvebaseline end success!")\nyakit.Info("brute end success!")\n\nmanager.Wait()',
        script_type: '端口与漏洞扫描',
        tags: [
            'afasfaasd',
            'asd',
            'distributed-script',
            '新建标签1',
            '新建标签2',
        ],
        type: '内置 CVE 脚本',
    },
    {
        description: '',
        disallow_scheduled: true,
        prompt_args: [
            {
                explain: '',
                key: 'target',
                value: '',
            },
            {
                explain: '',
                key: 'ports',
                value: '',
            },
        ],
        script: '// 重构SYN-20240718 go0p\n\nyakit.AutoInitYakit()\nloglevel(`info`)\n\n/*\n创建插件:\n   1. 插件的执行状态需要注意：加载成功与否？\n*/\n\n\ntargetRaw = cli.String("target",cli.setRequired(true))\n\npluginsStr = cli.String("plugins",cli.setRequired(true))\n\n// host alive scan\nskippedHostAliveScan = cli.String("skipped-host-alive-scan",cli.setDefault("false"))\nhostAliveConcurrent = cli.Int("host-alive-concurrent", cli.setDefault(20), cli.setRequired(false))\nhostAliveTimeout = cli.Float("host-alive-timeout", cli.setDefault(5.0), cli.setRequired(false))\nhostAliveTCPPorts = cli.String("host-alive-ports", cli.setDefault("80,22,443"), cli.setRequired(false))\n\nskippedHostAliveScanFlag = false\n\nif skippedHostAliveScan == "true" {\n    skippedHostAliveScanFlag = true\n}\n\n\npluginStatusMap = {};\npluginNames = str.Split(pluginsStr, ",")\nyakit.Info("开始创建漏洞扫描管理器")\nmanager, err := hook.NewMixPluginCaller()\nif err != nil {\n    yakit.Error("创建失败：%v", err)\n}\n\nmanager.SetDividedContext(true)\nmanager.SetConcurrent(20)\n\nloadPluginFinished = 0\nx.Foreach(pluginNames, func(i) {\n    // 插件加载状态\n    statusName = "加载中"\n    err = manager.LoadPlugin(i)\n    if err != nil {\n        yakit.Info("加载插件【%v】失败：%v", i, err)\n        statusName = "加载失败"\n    } else {\n        loadPluginFinished++\n\n        yakit.Info(i + " [加载成功]")\n\t   yakit.Info(sprintf("涉及扫描插件：%v个", len(pluginNames)))\n        statusName = "加载成功"\n    }\n    pluginStatusMap[i] = [i, statusName]\n})\n\n\npingOpt = []\n\n\nenableBrute = cli.String("enable-brute",cli.setDefault("false"))\n\n\nenableBruteFlag = false\n\nif enableBrute == "true" {\n    enableBruteFlag = true\n}\n\nif skippedHostAliveScan {\n    pingOpt = append(pingOpt, ping.skip(skippedHostAliveScanFlag))\n}\n\nif hostAliveTimeout > 0 {\n    pingOpt = append(pingOpt, ping.timeout(hostAliveTimeout))\n}\n\n\nif hostAliveConcurrent > 0 {\n    pingOpt = append(pingOpt, ping.concurrent(hostAliveConcurrent))\n}\n\n\nif len(hostAliveTCPPorts) > 0 {\n    pingOpt = append(pingOpt, ping.tcpPingPorts(hostAliveTCPPorts))\n}\n\nsynConcurrent = cli.Int("syn-concurrent", cli.setDefault(2000))\n\nexcludeHosts = cli.String("exclude-hosts")\nexcludePorts = cli.String("exclude-ports")\n\ntop100 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018"\n\ntcpPorts = cli.String("ports", cli.setDefault(top100))\n\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\n\nif len(tcpPortsList) == 0{\n    tcpPorts = top100\n}\n\n// top 5000 ports\ntop5000 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018,93,6666,7010,100,9003,6789,7060,8022,4848,3050,8787,8013,8040,10021,2011,6006,4000,8055,4430,6060,7788,8066,9898,8801,10040,7006,803,6688,10080,8050,7011,7009,40310,802,10003,8014,2080,7288,9992,8005,8889,5644,8886,9500,58031,50000,9020,8015,50060,8887,8021,8700,9900,9191,3312,8186,8735,8380,1234,38080,2110,8007,21245,3333,2046,9061,8686,9011,8061,9876,8282,60465,2222,9009,1100,18081,70,8383,5155,8188,2517,50070,8062,11324,9231,999,28214,8987,809,2010,7700,3535,7921,11080,6778,805,8073,114,2012,701,8810,8400,9007,8808,8065,8822,15000,9901,11158,1107,28099,12345,2006,9527,51106,688,25006,8045,9006,8023,8029,9997,7048,8580,8585,8035,10088,20022,4001,9005,2013,20808,3580,7742,8119,32766,50075,7272,3380,3220,7801,5256,5255,10086,1300,5200,6198,1158,6889,3503,6088,9991,806,8183,8688,1001,58080,1182,9025,8112,7776,7321,235,8077,8500,11347,7081,8877,8480,9182,58000,8026,11001,10089,5888,8196,8078,9995,2014,5656,8019,5003,8481,6002,9889,9015,8866,8182,8057,8399,8308,511,12881,4016,1039,28080,5678,7500,8051,18801,15018,15888,38443,8123,9004,8144,94,9070,1800,9112,8990,3456,2051,9131,97,7100,7711,7180,11000,8037,6988,122,8885,14007,8184,7012,8079,9888,9301,59999,49705,1979,8900,5080,5013,1550,8844,4850,206,5156,8813,3030,1790,8802,9012,5544,3721,8980,10009,8043,8390,7943,8381,8056,7111,1500,5881,9437,5655,8102,65486,4443,3690,10025,8024,8333,8666,103,8,9666,8999,9111,8071,522,11381,20806,8041,1085,8864,7900,1700,8036,8032,8033,8111,60022,955,3080,8788,27017,7443,8192,6969,9909,5002,9990,188,8910,9022,50030,866,8582,4300,9101,6879,8891,4567,4440,10051,10068,50080,8341,30001,6890,8168,8955,16788,8190,18060,6379,7041,42424,15693,2521,19010,18103,6010,8898,9910,9190,8260,8445,1680,8890,8649,30082,3013,30000,2480,7202,9704,5233,8991,11366,7888,8780,7129,6600,47088,7791,18888,50045,15672,2585,60,9494,31945,2060,8610,8860,58060,6118,2348,38000,18880,13382,6611,8064,7101,5081,7380,7942,10016,8027,2093,403,9014,8133,6886,95,8058,9201,6443,5966,27000,7017,6680,8401,9036,8988,8806,6180,421,423,57880,7778,18881,812,15004,9110,8213,9300,1213,8193,8956,1108,778,65000,7020,1122,9031,17000,8039,8600,50090,1863,8191,65,6587,8136,9507,132,200,2070,308,5811,3465,8680,7999,7084,3938,5902,9595,442,4433,7171,7567,811,1128,6003,2125,6090,10007,7022,1949,6565,65001,1301,19244,10087,8025,5098,21080,1200,15801,1005,22343,7086,8601,6259,7102,10333,211,10082,18085,180,40000,7021,7702,66,38086,666,6603,1212,65493,96,9053,7031,23454,30088,6226,8660,6170,8972,48080,10118,40069,28780,20153,20021,20151,58898,10066,1818,9914,55351,8343,6546,3880,8902,22222,19045,5561,7979,5203,50240,49960,2007,1722,8913,8912,9504,8103,8567,1666,8720,8197,3012,8220,9039,5898,925,38517,8382,6842,8895,2808,447,3600,3606,45177,19101,171,133,8189,7108,10154,47078,6800,8122,381,15580,23352,3443,1180,268,2382,43651,10099,65533,7018,60010,60101,6699,2005,2009,59777,591,1933,9013,8477,9696,9030,2015,7925,6510,18803,280,5601,2901,2301,5201,302,610,5552,8809,6869,9212,17095,20001,8781,25024,5280,7909,17003,1088,7117,20052,10038,30551,9980,9180,59009,28280,7028,61999,7915,8384,9918,9919,55858,7215,77,9845,20140,7856,1982,1123,17777,8839,208,2886,877,6101,5100,804,983,5600,8402,5887,8322,5632,770,13333,7330,3216,31188,47583,8710,22580,1042,34440,20,7703,65055,8997,6543,6388,8283,7201,4040,61081,12001,3588,7123,2490,4389,1313,19080,9050,6920,299,20046,8892,9302,7899,30058,7094,6801,321,1356,12333,11362,11372,6602,7709,45149,3668,517,9912,8130,7050,7713,40080,8104,13988,18264,8799,7072,55070,23458,8176,9517,9541,9542,9512,8905,11660,44445,44401,17173,436,560,733,968,602,3133,3398,16580,8488,8901,8512,10443,9113,9119,6606,22080,5560,5757,1600,8250,10024,10200,333,73,7547,8054,6372,223,3737,9019,8067,45692,15400,15698,9038,37006,2086,1002,9188,8201,8202,30030,2663,9105,10017,4503,1104,8893,40001,27779,3010,7083,5010,5501,309,1389,10070,10069,10056,3094,10057,10078,10050,10060,10098,4180,10777,270,6365,9801,1046,7140,1004,9198,8465,8548,108,30015,8153,1020,50100,8391,34899,7090,6100,8777,8298,8281,7023,3377,8499,7501,4321,3437,9977,14338,843,7901,6020,6011,1988,4023,20202,20200,7995,18181,9836,586,2340,8110,9192,2525,6887,4005,8992,11212,2168,60080,6664,10005,956,1016,4453,8974,10101,58124,30025,7789,7280,8068,11180,1984,5566,916,8828,17071,15080,8820,104,21900,5151,860,6286,5118,18765,7055,9989,807,7751,8684,1999,9333,55352,8681,19994,3033,8017,7093,7896,4242,58083,56688,6167,9922,3618,7082,1603,16929,198,8075,7044,8232,12315,4570,4569,31082,8861,3680,4455,8403,4497,4380,7273,8896,21188,22480,1445,20165,20142,9068,1083,59093,41474,9224,9718,23380,5225,18889,4237,30,14549,8052,911,19000,7799,7300,9168,29798,4480,22228,7903,810,68,31000,9103,20992,8049,2261,8105,10152,5780,10111,3003,1,3,4,6,24,32,33,42,43,49,109,125,146,161,163,212,222,254,256,259,264,301,306,311,340,366,406,407,416,417,425,458,464,481,497,500,512,524,541,545,555,563,593,616,617,625,636,648,667,668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,898,900,901,902,903,912,981,987,992,1007,1009,1011,1021,1022,1023,1031,1032,1033,1034,1035,1036,1037,1038,1040,1043,1044,1045,1047,1050,1051,1052,1055,1057,1058,1059,1060,1061,1062,1063,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1084,1086,1087,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1102,1105,1106,1111,1112,1113,1114,1117,1119,1121,1124,1126,1130,1131,1132,1137,1138,1141,1145,1147,1148,1149,1151,1152,1154,1163,1164,1165,1166,1169,1174,1175,1183,1185,1186,1187,1192,1198,1199,1201,1216,1217,1218,1233,1236,1244,1247,1248,1259,1271,1272,1277,1287,1296,1309,1310,1311,1322,1328,1334,1352,1417,1434,1455,1461,1494,1501,1503,1521,1524,1533,1556,1580,1583,1594,1641,1658,1687,1688,1717,1718,1719,1721,1761,1782,1783,1805,1812,1839,1840,1862,1864,1875,1914,1935,1947,1971,1972,1974,1998,2002,2003,2004,2021,2022,2030,2033,2034,2035,2038,2040,2041,2042,2043,2045,2047,2048,2065,2068,2099,2105,2106,2111,2119,2126,2135,2144,2160,2161,2170,2179,2190,2191,2196,2200,2251,2260,2288,2323,2366,2381,2383,2393,2394,2399,2401,2492,2500,2522,2557,2601,2602,2604,2605,2607,2608,2638,2701,2702,2710,2718,2725,2800,2809,2811,2869,2875,2909,2910,2920,2968,2998,3005,3006,3007,3011,3017,3031,3052,3071,3077,3119,3162,3168,3211,3221,3260,3261,3268,3269,3283,3300,3301,3304,3307,3322,3323,3324,3325,3351,3367,3369,3370,3371,3372,3376,3390,3400,3404,3410,3476,3493,3514,3517,3527,3546,3551,3659,3684,3689,3697,3700,3731,3766,3784,3792,3800,3801,3808,3809,3814,3820,3824,3826,3827,3828,3846,3848,3849,3851,3852,3853,3859,3863,3869,3871,3878,3889,3905,3914,3918,3920,3945,3971,3995,3998,4002,4003,4004,4006,4045,4111,4125,4126,4129,4224,4279,4343,4444,4445,4446,4449,4550,4662,4900,4998,5004,5030,5033,5054,5061,5087,5102,5120,5214,5221,5222,5226,5269,5298,5405,5414,5431,5440,5500,5510,5550,5633,5679,5718,5730,5801,5802,5810,5815,5822,5825,5850,5859,5862,5877,5901,5903,5904,5906,5907,5910,5911,5915,5922,5925,5950,5952,5959,5960,5961,5962,5963,5987,5988,5989,5998,5999,6005,6007,6009,6025,6059,6106,6112,6123,6129,6156,6346,6389,6502,6547,6566,6567,6580,6667,6668,6669,6689,6692,6779,6788,6792,6839,6881,6901,7019,7025,7103,7106,7402,7435,7496,7512,7625,7627,7676,7741,7800,7911,7920,7937,7938,8194,8254,8290,8291,8292,8651,8652,8654,8701,8873,8994,9040,9071,9102,9207,9220,9290,9415,9418,9485,9502,9503,9535,9575,9593,9594,9618,9877,9878,9917,9929,9943,9944,9968,10012,10180,10215,10243,10566,10616,10617,10621,10626,10628,10629,10778,11110,11111,11967,12000,12174,12265,13456,13722,13782,13783,14238,14441,14442,15002,15003,15660,15742,16000,16001,16012,16016,16018,16113,16992,16993,17877,17988,18040,18101,18988,19283,19315,19350,19780,19801,19842,20005,20031,20221,20222,20828,21571,22939,23502,24444,24800,25734,25735,26214,27352,27353,27355,27356,27715,28201,30718,30951,31038,31337,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,33354,33899,34571,34572,34573,35500,38292,40193,40911,41511,42510,44176,44442,44443,44501,45100,49158,49159,49160,49161,49163,49165,49167,49175,49176,49400,49999,50001,50002,50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055,55056,55555,55600,56737,56738,57294,57797,60020,60443,61532,61900,62078,63331,64623,64680,65129,65389"\n\nsynPorts = cli.String("syn-ports", cli.setDefault(top5000))\n\nsynPortsList = str.ParseStringToPorts(top5000)\n\nif synPortsList != "" && len(synPortsList) == 0{\n    synPorts = top5000\n}\n\ncli.check()\n\nif len(tcpPortsList) >= 65535 {\n    tcpPorts = "1,3,4,6,7,8,9,13,17,19,20,21,22,23,24,25,26,27,30,32,33,37,42,43,49,53,55,57,59,60,65,66,68,70,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,106,108,109,110,111,113,114,119,122,123,125,127,132,133,135,137,138,139,143,144,146,157,161,163,171,179,180,188,198,199,200,206,208,210,211,212,220,222,223,225,235,250,251,252,254,255,256,257,259,264,268,270,280,299,301,302,306,308,309,311,321,333,340,366,381,388,389,403,406,407,411,416,417,419,421,423,425,427,436,441,442,443,444,445,447,458,464,465,475,481,497,500,502,511,512,513,514,515,517,522,523,524,540,541,543,544,545,548,554,555,556,557,560,563,586,587,590,591,593,600,602,606,610,616,617,621,623,625,631,636,639,641,646,648,655,657,659,660,666,667,668,669,674,683,684,687,688,690,691,700,701,705,709,710,711,713,714,715,720,722,725,726,728,729,730,731,732,733,740,748,749,754,757,758,765,770,777,778,780,782,783,786,787,790,792,795,800,801,802,803,804,805,806,807,808,809,810,811,812,822,823,825,829,839,840,843,846,856,859,860,862,864,866,873,874,877,878,880,888,889,898,900,901,902,903,904,905,911,912,913,916,918,921,922,924,925,928,930,931,943,953,955,956,968,969,971,980,981,983,987,990,992,993,995,996,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1116,1117,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1130,1131,1132,1134,1135,1136,1137,1138,1141,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154,1156,1157,1158,1159,1162,1163,1164,1165,1166,1167,1168,1169,1173,1174,1175,1176,1179,1180,1182,1183,1184,1185,1186,1187,1188,1190,1191,1192,1194,1195,1196,1198,1199,1200,1201,1204,1207,1208,1209,1210,1211,1212,1213,1215,1216,1217,1218,1220,1221,1222,1223,1228,1229,1233,1234,1236,1239,1240,1241,1243,1244,1247,1248,1249,1250,1251,1259,1261,1262,1264,1268,1270,1271,1272,1276,1277,1279,1282,1287,1290,1291,1296,1297,1299,1300,1301,1302,1303,1305,1306,1307,1308,1309,1310,1311,1313,1314,1315,1316,1317,1318,1319,1321,1322,1324,1327,1328,1330,1331,1334,1336,1337,1339,1340,1347,1350,1351,1352,1353,1356,1357,1389,1413,1414,1417,1433,1434,1443,1445,1455,1461,1494,1500,1501,1503,1516,1521,1522,1524,1525,1526,1527,1533,1547,1550,1556,1558,1559,1560,1565,1566,1569,1580,1583,1584,1592,1594,1598,1600,1603,1605,1607,1615,1620,1622,1630,1632,1635,1638,1641,1645,1658,1666,1677,1680,1683,1687,1688,1691,1694,1699,1700,1701,1703,1707,1708,1709,1711,1712,1713,1715,1717,1718,1719,1720,1721,1722,1723,1730,1735,1736,1745,1750,1752,1753,1755,1761,1782,1783,1790,1791,1792,1799,1800,1801,1805,1806,1807,1808,1811,1812,1818,1823,1825,1835,1839,1840,1858,1861,1862,1863,1864,1871,1875,1883,1888,1900,1901,1911,1912,1914,1918,1924,1927,1933,1935,1947,1949,1954,1958,1971,1972,1973,1974,1975,1976,1979,1980,1981,1982,1984,1988,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2020,2021,2022,2025,2030,2031,2033,2034,2035,2038,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2051,2060,2062,2065,2067,2068,2069,2070,2080,2081,2082,2083,2086,2087,2093,2095,2096,2099,2100,2101,2103,2104,2105,2106,2107,2110,2111,2112,2115,2119,2121,2124,2125,2126,2134,2135,2142,2144,2148,2150,2160,2161,2168,2170,2179,2181,2187,2190,2191,2196,2197,2200,2201,2203,2222,2224,2232,2241,2250,2251,2253,2260,2261,2262,2265,2269,2270,2271,2280,2288,2291,2292,2300,2301,2302,2304,2312,2313,2323,2325,2326,2330,2335,2340,2348,2366,2371,2372,2375,2381,2382,2383,2391,2393,2394,2399,2401,2418,2425,2433,2435,2436,2438,2439,2449,2456,2463,2472,2480,2490,2492,2500,2501,2505,2517,2521,2522,2525,2531,2532,2550,2551,2557,2558,2567,2580,2583,2584,2585,2598,2600,2601,2602,2604,2605,2606,2607,2608,2622,2623,2628,2631,2638,2644,2663,2691,2700,2701,2702,2706,2710,2711,2712,2717,2718,2723,2725,2728,2734,2800,2804,2806,2808,2809,2811,2812,2847,2850,2869,2875,2882,2886,2888,2889,2898,2901,2902,2903,2908,2909,2910,2920,2930,2957,2958,2967,2968,2973,2984,2987,2988,2991,2997,2998,3000,3001,3002,3003,3005,3006,3007,3008,3010,3011,3012,3013,3014,3017,3023,3025,3030,3031,3033,3050,3052,3057,3062,3063,3071,3077,3080,3089,3094,3102,3103,3118,3119,3121,3128,3133,3146,3162,3167,3168,3190,3200,3210,3211,3216,3220,3221,3240,3260,3261,3263,3268,3269,3280,3281,3283,3291,3299,3300,3301,3304,3306,3307,3310,3311,3312,3319,3322,3323,3324,3325,3333,3334,3351,3362,3363,3365,3367,3368,3369,3370,3371,3372,3374,3376,3377,3380,3388,3389,3390,3396,3398,3399,3400,3404,3410,3414,3415,3419,3425,3430,3437,3439,3443,3456,3465,3476,3479,3483,3485,3486,3493,3497,3503,3505,3506,3511,3513,3514,3515,3517,3519,3520,3526,3527,3530,3532,3535,3546,3551,3577,3580,3586,3588,3599,3600,3602,3603,3606,3618,3621,3622,3632,3636,3637,3652,3653,3656,3658,3659,3663,3668,3669,3670,3672,3680,3681,3683,3684,3689,3690,3697,3700,3703,3712,3721,3728,3731,3737,3742,3749,3765,3766,3784,3787,3788,3790,3792,3793,3795,3796,3798,3799,3800,3801,3803,3806,3808,3809,3810,3811,3812,3813,3814,3817,3820,3823,3824,3825,3826,3827,3828,3830,3831,3837,3839,3842,3846,3847,3848,3849,3850,3851,3852,3853,3856,3859,3860,3863,3868,3869,3870,3871,3872,3876,3878,3879,3880,3882,3888,3889,3890,3897,3899,3901,3902,3904,3905,3906,3907,3908,3909,3911,3913,3914,3915,3916,3918,3919,3920,3922,3923,3928,3929,3930,3931,3935,3936,3937,3938,3940,3941,3943,3944,3945,3946,3948,3949,3952,3956,3957,3961,3962,3963,3964,3967,3968,3969,3971,3972,3975,3979,3980,3981,3982,3983,3986,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4009,4010,4016,4020,4022,4023,4024,4025,4029,4035,4036,4039,4040,4045,4056,4058,4065,4080,4087,4090,4096,4100,4101,4111,4112,4113,4118,4119,4120,4121,4125,4126,4129,4135,4141,4143,4147,4158,4161,4164,4174,4180,4190,4192,4200,4206,4220,4224,4234,4237,4242,4252,4262,4279,4294,4297,4298,4300,4302,4321,4325,4328,4333,4342,4343,4355,4356,4357,4358,4369,4374,4375,4376,4380,4384,4388,4389,4401,4407,4414,4415,4418,4430,4433,4440,4442,4443,4444,4445,4446,4447,4449,4453,4454,4455,4464,4471,4476,4480,4497,4503,4516,4517,4530,4534,4545,4550,4555,4558,4559,4567,4569,4570,4599,4600,4601,4602,4606,4609,4644,4649,4658,4662,4665,4687,4689,4700,4712,4713,4745,4760,4767,4770,4771,4778,4793,4800,4819,4848,4850,4859,4860,4875,4876,4877,4881,4899,4900,4903,4912,4931,4949,4998,4999,5000,5001,5002,5003,5004,5005,5009,5010,5011,5012,5013,5014,5015,5016,5017,5020,5021,5023,5030,5033,5040,5050,5051,5052,5053,5054,5055,5060,5061,5063,5066,5070,5074,5080,5081,5087,5088,5090,5095,5096,5098,5100,5101,5102,5111,5114,5118,5120,5121,5122,5125,5133,5137,5147,5151,5152,5155,5156,5190,5200,5201,5202,5203,5212,5214,5219,5221,5222,5223,5225,5226,5233,5234,5235,5242,5250,5252,5255,5256,5259,5261,5269,5279,5280,5291,5298,5339,5347,5353,5357,5370,5377,5405,5414,5423,5431,5432,5433,5440,5441,5442,5444,5457,5458,5473,5475,5500,5501,5502,5510,5520,5544,5550,5552,5553,5555,5560,5561,5566,5600,5601,5631,5632,5633,5644,5655,5656,5666,5671,5672,5678,5679,5680,5718,5730,5757,5780,5800,5801,5802,5803,5807,5810,5811,5812,5815,5818,5822,5823,5825,5850,5859,5862,5868,5869,5877,5881,5887,5888,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5909,5910,5911,5914,5915,5918,5922,5925,5938,5940,5950,5952,5959,5960,5961,5962,5963,5966,5968,5981,5987,5988,5989,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6017,6020,6025,6050,6051,6059,6060,6068,6080,6088,6090,6100,6101,6103,6106,6112,6118,6123,6129,6156,6167,6170,6180,6198,6203,6222,6226,6247,6259,6286,6346,6365,6372,6379,6388,6389,6443,6481,6500,6502,6504,6510,6520,6543,6546,6547,6550,6565,6566,6567,6580,6587,6600,6602,6603,6606,6611,6646,6648,6662,6664,6666,6667,6668,6669,6670,6677,6680,6688,6689,6692,6699,6711,6732,6778,6779,6788,6789,6792,6800,6801,6839,6842,6868,6869,6879,6881,6886,6887,6888,6889,6890,6896,6901,6920,6969,6988,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7017,7018,7019,7020,7021,7022,7023,7024,7025,7028,7031,7041,7044,7048,7050,7051,7055,7060,7070,7071,7072,7074,7078,7080,7081,7082,7083,7084,7086,7088,7090,7093,7094,7100,7101,7102,7103,7106,7108,7111,7117,7123,7129,7140,7171,7180,7200,7201,7202,7215,7241,7272,7273,7278,7280,7281,7288,7300,7321,7330,7380,7402,7435,7438,7443,7474,7496,7500,7501,7512,7547,7567,7625,7627,7676,7680,7687,7688,7700,7702,7703,7709,7711,7713,7725,7741,7742,7744,7749,7751,7770,7776,7777,7778,7788,7789,7791,7799,7800,7801,7856,7878,7888,7890,7896,7899,7900,7901,7903,7909,7911,7913,7915,7920,7921,7925,7929,7937,7938,7942,7943,7979,7995,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8060,8061,8062,8064,8065,8066,8067,8068,8069,8070,8071,8073,8075,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8108,8110,8111,8112,8118,8119,8122,8123,8130,8133,8136,8144,8153,8161,8168,8172,8176,8180,8181,8182,8183,8184,8186,8188,8189,8190,8191,8192,8193,8194,8196,8197,8200,8201,8202,8213,8220,8222,8232,8244,8250,8254,8258,8260,8280,8281,8282,8283,8288,8290,8291,8292,8293,8294,8298,8300,8308,8322,8333,8341,8343,8360,8380,8381,8382,8383,8384,8385,8390,8391,8399,8400,8401,8402,8403,8443,8445,8448,8465,8477,8480,8481,8484,8488,8499,8500,8512,8540,8548,8567,8580,8582,8585,8600,8601,8610,8648,8649,8651,8652,8654,8660,8666,8675,8676,8680,8681,8684,8686,8688,8700,8701,8710,8720,8735,8765,8766,8777,8780,8781,8787,8788,8799,8800,8801,8802,8806,8808,8809,8810,8813,8820,8822,8828,8834,8838,8839,8844,8848,8858,8860,8861,8864,8866,8868,8873,8877,8879,8880,8881,8885,8886,8887,8888,8889,8890,8891,8892,8893,8895,8896,8898,8899,8900,8901,8902,8905,8910,8912,8913,8955,8956,8972,8974,8980,8983,8987,8988,8989,8990,8991,8992,8994,8996,8997,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9019,9020,9022,9025,9030,9031,9036,9038,9039,9040,9043,9050,9053,9060,9061,9068,9070,9071,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9105,9110,9111,9112,9113,9119,9131,9152,9168,9180,9182,9188,9190,9191,9192,9197,9198,9200,9201,9207,9212,9220,9224,9231,9290,9300,9301,9302,9333,9409,9415,9418,9437,9443,9444,9448,9485,9494,9500,9501,9502,9503,9504,9507,9512,9517,9527,9535,9541,9542,9575,9593,9594,9595,9600,9618,9621,9643,9666,9673,9696,9704,9718,9800,9801,9815,9836,9845,9876,9877,9878,9888,9889,9898,9900,9901,9909,9910,9912,9914,9917,9918,9919,9922,9929,9941,9943,9944,9968,9977,9980,9981,9986,9988,9989,9990,9991,9992,9995,9997,9998,9999,10000,10001,10002,10003,10004,10005,10007,10008,10009,10010,10011,10012,10016,10017,10021,10022,10023,10024,10025,10034,10038,10040,10050,10051,10056,10057,10058,10060,10066,10068,10069,10070,10078,10080,10082,10083,10086,10087,10088,10089,10098,10099,10101,10111,10118,10152,10154,10160,10180,10200,10215,10243,10250,10255,10333,10443,10566,10616,10617,10621,10626,10628,10629,10777,10778,10873,11000,11001,11080,11110,11111,11158,11180,11211,11212,11324,11347,11362,11366,11372,11381,11660,11967,12000,12001,12006,12018,12021,12059,12174,12215,12262,12265,12315,12333,12345,12346,12380,12443,12452,12881,13333,13382,13456,13722,13724,13782,13783,13988,14000,14007,14238,14338,14441,14442,14549,15000,15001,15002,15003,15004,15018,15080,15400,15402,15580,15660,15672,15693,15698,15742,15801,15888,16000,16001,16012,16016,16018,16080,16113,16580,16705,16788,16800,16851,16929,16992,16993,17000,17003,17071,17095,17173,17595,17777,17877,17988,18000,18001,18002,18004,18008,18018,18040,18060,18080,18081,18082,18085,18088,18090,18098,18101,18103,18181,18264,18765,18801,18803,18880,18881,18888,18889,18988,19000,19001,19010,19045,19080,19101,19244,19283,19315,19350,19780,19801,19842,19900,19994,20000,20001,20002,20005,20021,20022,20031,20046,20052,20140,20142,20151,20153,20165,20200,20202,20221,20222,20720,20806,20808,20828,20992,21000,21080,21188,21245,21501,21502,21571,21792,21900,22080,22222,22228,22343,22480,22580,22939,23052,23352,23380,23454,23458,23502,23796,24444,24800,25006,25024,25734,25735,26000,26214,26470,27000,27017,27352,27353,27355,27356,27357,27715,27779,28017,28018,28080,28099,28201,28211,28214,28280,28780,29672,29798,29831,30000,30001,30005,30015,30025,30030,30058,30082,30088,30551,30704,30718,30951,31000,31038,31082,31188,31337,31727,31945,32766,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,32791,32792,32803,32816,32822,32835,33354,33453,33554,33899,34440,34571,34572,34573,34899,35500,35513,37006,37839,38000,38037,38080,38086,38185,38188,38292,38443,38501,38517,38888,39136,39376,39659,40000,40001,40069,40080,40193,40310,40811,40911,41064,41474,41511,41516,41523,42424,42510,43651,44176,44334,44401,44442,44443,44445,44501,44709,45100,45149,45177,45692,46200,46996,47078,47088,47544,47583,48080,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49164,49165,49167,49168,49171,49175,49176,49186,49195,49236,49400,49401,49705,49960,49999,50000,50001,50002,50003,50006,50030,50045,50050,50060,50070,50075,50080,50090,50100,50240,50300,50389,50500,50636,50800,51103,51106,51191,51413,51493,52660,52673,52710,52735,52822,52847,52848,52849,52850,52851,52853,52869,53211,53313,53314,53535,54045,54328,55020,55055,55056,55070,55351,55352,55555,55576,55600,55858,56688,56737,56738,57294,57665,57797,57880,58000,58001,58002,58031,58060,58080,58083,58124,58630,58632,58838,58898,59009,59093,59110,59200,59201,59202,59777,59999,60000,60010,60020,60022,60030,60080,60101,60123,60146,60443,60465,60642,61081,61532,61613,61616,61900,61999,62078,63331,64623,64680,65000,65001,65055,65129,65310,65389,65486,65493,65533"\n    synPorts = str.Join(str.FilterPorts("1-65535",tcpPorts), ",")\n} else {\n    synPorts = str.Join(str.FilterPorts(synPorts,tcpPorts), ",")\n}\n\ntcpOps = []\ntcpOps = append(tcpOps, servicescan.active(true))\n\ntcpOps = append(tcpOps, servicescan.concurrent(50))\ntcpOps = append(tcpOps, servicescan.maxProbes(4))\n\ntcpOps = append(tcpOps, servicescan.probeTimeout(5.0))\n\ntcpOps = append(tcpOps, servicescan.all())\n\n// 设置排除端口和主机\nif excludePorts != "" {\n    yakit.Info("设置排除端口：%v", excludePorts)\n    tcpOps = append(tcpOps, servicescan.excludePorts(excludePorts))\n}\nif excludeHosts != "" {\n    yakit.Info("设置排除主机：%v", excludeHosts)\n    tcpOps = append(tcpOps, servicescan.excludeHosts(excludeHosts))\n}\n\nsynPortsList = str.ParseStringToPorts(synPorts)\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\nyakit.Info("SYN Port 端口个数 ：%v",len(synPortsList))\nyakit.Info("TCP Port 端口个数 ：%v",len(tcpPortsList))\nyakit.Info("扫描参数设置完成，准备扫描~")\n\n\nvar synscanEnable = false\ntry {\n    yakit.Info("检测 SYN 扫描是否可用中")\n    for res in synscan.Scan("127.0.0.1", "80", synscan.wait(1))~ {  }\n    \n    synscanEnable = true\n    // yakit.StatusCard("SYN 扫描", "可用")\n} catch err {\n    yakit.Info("SYN 扫描不可用，原因是：%v", err)\n}\n\n\n\nbruteOpt = []\n\nbruteOpt = append(bruteOpt, brute.minDelay(1), brute.maxDelay(5))\n\nbruteOpt = append(bruteOpt, brute.finishingThreshold(1))\nbruteOpt = append(bruteOpt, brute.concurrentTarget(20))\nbruteOpt = append(bruteOpt, brute.concurrent(1))\n\nbruteWg = sync.NewSizedWaitGroup(10)\n\nbruteScan = func(result) {\n    bruteWg.Add()\n    go func() {\n      \tdefer bruteWg.Done()\n        bruteType = ""\n        if result.GetServiceName() == "exasoftport1" {\n            return\n        }\n        \n        for _, bt := range brute.GetAvailableBruteTypes() {\n            if result.GetServiceName().Lower().Contains(bt) || bt.Contains(result.GetServiceName().Lower()) {\n                bruteType = bt\n                break\n            }\n            \n        }\n        \n\n        if bruteType == "" {\n            return\n        }\n        \n\n        defaultusers = []\n        defaultpass = []\n\n        if bruteType == "ftp" {\n            defaultusers = ["ftp", "www", "anonymous", "admin"]\n            defaultpass = ["admin", "admin123", "123456"]\n        } else if bruteType == "memcached" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "123456"]\n        } else if bruteType == "mongodb" {\n            defaultusers = ["root", "admin", "mongodb"]\n            defaultpass = ["root", "admin123", "root@123", "123456"]\n        } else if bruteType == "mssql" {\n            defaultusers = ["root", "admin", "mssql"]\n            defaultpass = ["root", "admin123", "root@123", "admin", "123456"]\n        } else if bruteType == "mysql" {\n            defaultusers = ["mysql", "root", "admin"]\n            defaultpass = ["root", "123456", "admin123", "admin", "root@123"]\n        } else if bruteType == "postgres" {\n            defaultusers = ["postgres", "root", "admin"]\n            defaultpass = ["root", "admin", "123456"]\n        } else if bruteType == "rdp" {\n            defaultusers = ["admin", "administrator", "root", "guest"]\n            defaultpass = ["administrator", "guest", "admin", "123456"]\n        } else if bruteType == "redis" {\n            defaultusers = ["redis"]\n            defaultpass = ["redis", "123456"]\n        } else if bruteType == "smb" {\n            defaultusers = ["administrator", "admin", "test", "guest", "system", "root", "sa"]\n            defaultpass = ["admin123!@#", "admin", "admin123", "admin@123", "admin#123", "123456", "root@123"]\n        } else if bruteType == "snmp" {\n            defaultusers = ["snmp"]\n            defaultpass = ["public", "private", "0", "0392a0", "1234", "2read", "4changes"]\n        } else if bruteType == "ssh" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "telnet" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "tomcat" {\n            defaultusers = ["manager", "tomcat"]\n            defaultpass = ["tomcat", "manager"]\n        } else if bruteType == "vnc" {\n            defaultusers = ["vnc"]\n            defaultpass = ["123456", "admin", "root"]\n        //} else if bruteType == "oracle" {\n          //  defaultusers = ["sys", "system", "oracle"]\n            //defaultpass = ["sys", "system", "oracle", "123456", ""]\n        } else if bruteType == "rtsp" {\n            defaultusers = ["admin"]\n            defaultpass = ["12345", "123456", ""]\n        } else {\n          \treturn\n        }\n        \n\n        uL = make([]string)\n        pL = make([]string)\n\n        uL = append(uL, defaultusers...)\n\n        pL = append(pL, defaultpass...)\n\n        bruteTasks := len(uL) * len(pL)// 计算爆破任务数量        \n\n        addr := str.HostPort(result.Target, result.Port)\n        yakit.Info("Start Load Bruter for %s: %s", bruteType, addr)\n\n        instance, err := brute.New(string(bruteType), brute.userList(uL...), brute.passList(pL...), brute.debug(true), \n                                   brute.okToStop(true), bruteOpt...)\n        if err != nil {\n            yakit.Error(\n                "构建弱口令与未授权扫描失败：%v", \n                err, \n            )\n            return\n        }\n        \n\n        res, err := instance.Start(addr)\n        if err != nil {\n            yakit.Error("输入目标失败：%v", err)\n            return\n        }\n        \n\n        riskTarget = addr\n        for rt := range res {\n            yakit.Info("rt string %v ", rt.String())\n            if rt == nil {\n                continue\n            }\n            \n\n            if !rt.Ok {\n                continue\n            }\n            \n            if rt.Username == "" && rt.Password == "" {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("未授权访问"), \n                    risk.title(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.titleVerbose(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.description("由于配置不当或管理疏忽，某些服务、接口或应用存在未授权访问的风险。攻击者可以直接访问这些资源而不需要任何身份验证，这可能会导致敏感数据的泄露、系统的滥用或其他恶意行为。"), \n                    risk.solution(`1. 审核所有公开可访问的服务、接口和应用，确保它们都有适当的访问控制。\n2. 使用身份验证机制，如用户名/密码、API密钥或OAuth。\n3. 定期监控和审查访问日志，以检测任何可疑或未授权的活动。`), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            } else {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("弱口令"), \n                    risk.description("网站管理、运营人员由于安全意识不足，为了方便、避免忘记密码等，使用了非常容易记住的密码，或者是直接采用了系统的默认密码等。攻击者利用此漏洞可直接进入应用系统或者管理系统，从而进行系统、网页、数据的篡改与删除，非法获取系统、用户的数据，甚至可能导致服务器沦陷。"), \n                    risk.solution("用户层面 : 不要使用常见的弱口令作为密码,不要多个系统或者社交账号使用同一套密码,定期修改密码,建议使用包含随机值的或者随机生成的字符串作为系统密码"), \n                    risk.title(sprintf(\n                        "Weak Password[%v]：%v user(%v) pass(%v)", \n                        rt.Type, \n                        rt.Target, \n                        rt.Username, \n                        rt.Password, \n                    )), \n                    risk.titleVerbose(sprintf("弱口令[%v]：%v user(%v) pass(%v)", rt.Type, rt.Target, rt.Username, \n                                              rt.Password)), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            }\n            \n        }\n    }()\n}\n\nhandleServiceScanResult = func(result) {\n\n    manager.HandleServiceScanResult(result)\n    if enableBruteFlag && len(result.GetServiceName()) != 0 {\n        serviceName = result.GetServiceName()\n        yakit.Info("Start Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n        bruteScan(result)\n        yakit.Info("End Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n    }\n}\n\naliveHostCountList = []\n\n\nOpenPortCount = 0\nopenPortCountLock = sync.NewLock()\naddOpenPortCount = func() {\n    openPortCountLock.Lock()\n    defer openPortCountLock.Unlock()\n    OpenPortCount++\n}\n\nruntimeID = os.Getenv("YAK_RUNTIME_ID")\n\nfunc handleTCP(targets) {\n    try {\n        for result in servicescan.Scan(targets, tcpPorts, tcpOps...)~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            \n            yakit.Info("GOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err {\n        yakit.Error("处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\nfunc handleSYN(targets){\n\n    try {\n        for result in servicescan.ScanFromSynResult(\n            synscan.Scan(targets, synPorts, \n                    synscan.excludePorts(tcpPorts),\n                    synscan.concurrent(synConcurrent),\n                )~, \n                tcpOps..., \n            )~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            yakit.Info("SYNGOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err { \n        yakit.Error("SYN 处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\n\n\n\n\ntargets = str.ParseStringToHosts(targetRaw)\n\ninfo = {}\n\nalive = ""\n\nfor res := range ping.Scan(targetRaw, pingOpt...) {\n    if res.Ok {\n        alive += res.IP + ","\n    }\n}\n\nlog.Info("ping res %s",alive)\n\naliveTargets = str.ParseStringToHosts(alive)\n\n\ninfo["runtime_id"] = runtimeID\ninfo["host_total"] = len(targets)\ninfo["port_total"] = len(synPortsList) + len(tcpPortsList)\ninfo["plugins"] = len(pluginNames)\n\ninfoJson = json.dumps(info)\n\ndb.SetKey("JznQXuFDSepeNWHbiLGEwONiaBxhvj_SERVER_SCAN_MANAGER", infoJson)\n\ntargetBatch = ""\ncount := 0\nwgTCP := sync.NewSizedWaitGroup(50)\n\nfor _, target = range aliveTargets{\n    currentTarget = target\n\n    if count > 0 {\n        targetBatch += "," + currentTarget\n    } else {\n        targetBatch = currentTarget\n    }\n    count++\n\n    if count == 50 {\n        wgTCP.Add()\n        go func {\n            defer wgTCP.Done()\n            handleTCP(targetBatch)\n        }\n        if synscanEnable {\n            handleSYN(targetBatch)\n        }\n        targetBatch = ""\n        count = 0\n    }\n}\nlog.Info("targetBatch %s", targetBatch)\n\nif count > 0 {\n    wgTCP.Add()\n    go func {\n        defer wgTCP.Done()\n        handleTCP(targetBatch)\n    }\n    if synscanEnable {\n        handleSYN(targetBatch)\n    }\n}\n\nif synscanEnable {\n    yakit.StatusCard("SYN", "DONE")\n}\n\nwgTCP.Wait()\n\nhostCountSec = len(aliveHostCountList)\n\n\nif hostCountSec != 0 {\n    // 根据存活 ip + (加载成功的插件数 * 2s)/concurrent  + 开放端口数\n    // 定时器，超过一定时间，就扫描结束\n    waitTimeSec = hostCountSec + (loadPluginFinished * 2)/20 + OpenPortCount\n    if waitTimeSec < 10 {\n        waitTimeSec = 60\n    }\n  \tyakit.Info("waitTimeSec %v", waitTimeSec)\n    time.AfterFunc(waitTimeSec * 1000 * 1000 * 1000, func() {\n        yakit.SetProgress(1)\n        yakit.Info("AfterFunc 本次扫描任务已完成。")\n        os.Exit(0)\n    })\n}\nbruteWg.Wait()\nmanager.Wait()',
        script_type: '端口与漏洞扫描',
        tags: ['distributed-script'],
        type: '纯端口扫描',
    },
    {
        description: '',
        disallow_scheduled: true,
        prompt_args: [
            {
                explain: '',
                key: 'target',
                value: '',
            },
            {
                explain: '',
                key: 'ports',
                value: '',
            },
        ],
        script: '// 重构SYN-20240718 go0p\n\nyakit.AutoInitYakit()\nloglevel(`info`)\n\n/*\n创建插件:\n   1. 插件的执行状态需要注意：加载成功与否？\n*/\n\n\ntargetRaw = cli.String("target",cli.setRequired(true))\n\npluginsStr = cli.String("plugins",cli.setRequired(true))\n\n// host alive scan\nskippedHostAliveScan = cli.String("skipped-host-alive-scan",cli.setDefault("false"))\nhostAliveConcurrent = cli.Int("host-alive-concurrent", cli.setDefault(20), cli.setRequired(false))\nhostAliveTimeout = cli.Float("host-alive-timeout", cli.setDefault(5.0), cli.setRequired(false))\nhostAliveTCPPorts = cli.String("host-alive-ports", cli.setDefault("80,22,443"), cli.setRequired(false))\n\nskippedHostAliveScanFlag = false\n\nif skippedHostAliveScan == "true" {\n    skippedHostAliveScanFlag = true\n}\n\n\npluginStatusMap = {};\npluginNames = str.Split(pluginsStr, ",")\nyakit.Info("开始创建漏洞扫描管理器")\nmanager, err := hook.NewMixPluginCaller()\nif err != nil {\n    yakit.Error("创建失败：%v", err)\n}\n\nmanager.SetDividedContext(true)\nmanager.SetConcurrent(20)\n\nloadPluginFinished = 0\nx.Foreach(pluginNames, func(i) {\n    // 插件加载状态\n    statusName = "加载中"\n    err = manager.LoadPlugin(i)\n    if err != nil {\n        yakit.Info("加载插件【%v】失败：%v", i, err)\n        statusName = "加载失败"\n    } else {\n        loadPluginFinished++\n\n        yakit.Info(i + " [加载成功]")\n\t   yakit.Info(sprintf("涉及扫描插件：%v个", len(pluginNames)))\n        statusName = "加载成功"\n    }\n    pluginStatusMap[i] = [i, statusName]\n})\n\n\n\n\npingOpt = []\n\n\nenableBrute = cli.String("enable-brute",cli.setDefault("true"))\n\n\nenableBruteFlag = false\n\nif enableBrute == "true" {\n    enableBruteFlag = true\n}\n\nif skippedHostAliveScan {\n    pingOpt = append(pingOpt, ping.skip(skippedHostAliveScanFlag))\n}\n\nif hostAliveTimeout > 0 {\n    pingOpt = append(pingOpt, ping.timeout(hostAliveTimeout))\n}\n\n\nif hostAliveConcurrent > 0 {\n    pingOpt = append(pingOpt, ping.concurrent(hostAliveConcurrent))\n}\n\n\nif len(hostAliveTCPPorts) > 0 {\n    pingOpt = append(pingOpt, ping.tcpPingPorts(hostAliveTCPPorts))\n}\n\nsynConcurrent = cli.Int("syn-concurrent", cli.setDefault(2000))\n\nexcludeHosts = cli.String("exclude-hosts")\nexcludePorts = cli.String("exclude-ports")\n\ntop100 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018"\n\ntcpPorts = cli.String("ports", cli.setDefault(top100))\n\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\n\nif len(tcpPortsList) == 0{\n    tcpPorts = top100\n}\n\n// top 5000 ports\ntop5000 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018,93,6666,7010,100,9003,6789,7060,8022,4848,3050,8787,8013,8040,10021,2011,6006,4000,8055,4430,6060,7788,8066,9898,8801,10040,7006,803,6688,10080,8050,7011,7009,40310,802,10003,8014,2080,7288,9992,8005,8889,5644,8886,9500,58031,50000,9020,8015,50060,8887,8021,8700,9900,9191,3312,8186,8735,8380,1234,38080,2110,8007,21245,3333,2046,9061,8686,9011,8061,9876,8282,60465,2222,9009,1100,18081,70,8383,5155,8188,2517,50070,8062,11324,9231,999,28214,8987,809,2010,7700,3535,7921,11080,6778,805,8073,114,2012,701,8810,8400,9007,8808,8065,8822,15000,9901,11158,1107,28099,12345,2006,9527,51106,688,25006,8045,9006,8023,8029,9997,7048,8580,8585,8035,10088,20022,4001,9005,2013,20808,3580,7742,8119,32766,50075,7272,3380,3220,7801,5256,5255,10086,1300,5200,6198,1158,6889,3503,6088,9991,806,8183,8688,1001,58080,1182,9025,8112,7776,7321,235,8077,8500,11347,7081,8877,8480,9182,58000,8026,11001,10089,5888,8196,8078,9995,2014,5656,8019,5003,8481,6002,9889,9015,8866,8182,8057,8399,8308,511,12881,4016,1039,28080,5678,7500,8051,18801,15018,15888,38443,8123,9004,8144,94,9070,1800,9112,8990,3456,2051,9131,97,7100,7711,7180,11000,8037,6988,122,8885,14007,8184,7012,8079,9888,9301,59999,49705,1979,8900,5080,5013,1550,8844,4850,206,5156,8813,3030,1790,8802,9012,5544,3721,8980,10009,8043,8390,7943,8381,8056,7111,1500,5881,9437,5655,8102,65486,4443,3690,10025,8024,8333,8666,103,8,9666,8999,9111,8071,522,11381,20806,8041,1085,8864,7900,1700,8036,8032,8033,8111,60022,955,3080,8788,27017,7443,8192,6969,9909,5002,9990,188,8910,9022,50030,866,8582,4300,9101,6879,8891,4567,4440,10051,10068,50080,8341,30001,6890,8168,8955,16788,8190,18060,6379,7041,42424,15693,2521,19010,18103,6010,8898,9910,9190,8260,8445,1680,8890,8649,30082,3013,30000,2480,7202,9704,5233,8991,11366,7888,8780,7129,6600,47088,7791,18888,50045,15672,2585,60,9494,31945,2060,8610,8860,58060,6118,2348,38000,18880,13382,6611,8064,7101,5081,7380,7942,10016,8027,2093,403,9014,8133,6886,95,8058,9201,6443,5966,27000,7017,6680,8401,9036,8988,8806,6180,421,423,57880,7778,18881,812,15004,9110,8213,9300,1213,8193,8956,1108,778,65000,7020,1122,9031,17000,8039,8600,50090,1863,8191,65,6587,8136,9507,132,200,2070,308,5811,3465,8680,7999,7084,3938,5902,9595,442,4433,7171,7567,811,1128,6003,2125,6090,10007,7022,1949,6565,65001,1301,19244,10087,8025,5098,21080,1200,15801,1005,22343,7086,8601,6259,7102,10333,211,10082,18085,180,40000,7021,7702,66,38086,666,6603,1212,65493,96,9053,7031,23454,30088,6226,8660,6170,8972,48080,10118,40069,28780,20153,20021,20151,58898,10066,1818,9914,55351,8343,6546,3880,8902,22222,19045,5561,7979,5203,50240,49960,2007,1722,8913,8912,9504,8103,8567,1666,8720,8197,3012,8220,9039,5898,925,38517,8382,6842,8895,2808,447,3600,3606,45177,19101,171,133,8189,7108,10154,47078,6800,8122,381,15580,23352,3443,1180,268,2382,43651,10099,65533,7018,60010,60101,6699,2005,2009,59777,591,1933,9013,8477,9696,9030,2015,7925,6510,18803,280,5601,2901,2301,5201,302,610,5552,8809,6869,9212,17095,20001,8781,25024,5280,7909,17003,1088,7117,20052,10038,30551,9980,9180,59009,28280,7028,61999,7915,8384,9918,9919,55858,7215,77,9845,20140,7856,1982,1123,17777,8839,208,2886,877,6101,5100,804,983,5600,8402,5887,8322,5632,770,13333,7330,3216,31188,47583,8710,22580,1042,34440,20,7703,65055,8997,6543,6388,8283,7201,4040,61081,12001,3588,7123,2490,4389,1313,19080,9050,6920,299,20046,8892,9302,7899,30058,7094,6801,321,1356,12333,11362,11372,6602,7709,45149,3668,517,9912,8130,7050,7713,40080,8104,13988,18264,8799,7072,55070,23458,8176,9517,9541,9542,9512,8905,11660,44445,44401,17173,436,560,733,968,602,3133,3398,16580,8488,8901,8512,10443,9113,9119,6606,22080,5560,5757,1600,8250,10024,10200,333,73,7547,8054,6372,223,3737,9019,8067,45692,15400,15698,9038,37006,2086,1002,9188,8201,8202,30030,2663,9105,10017,4503,1104,8893,40001,27779,3010,7083,5010,5501,309,1389,10070,10069,10056,3094,10057,10078,10050,10060,10098,4180,10777,270,6365,9801,1046,7140,1004,9198,8465,8548,108,30015,8153,1020,50100,8391,34899,7090,6100,8777,8298,8281,7023,3377,8499,7501,4321,3437,9977,14338,843,7901,6020,6011,1988,4023,20202,20200,7995,18181,9836,586,2340,8110,9192,2525,6887,4005,8992,11212,2168,60080,6664,10005,956,1016,4453,8974,10101,58124,30025,7789,7280,8068,11180,1984,5566,916,8828,17071,15080,8820,104,21900,5151,860,6286,5118,18765,7055,9989,807,7751,8684,1999,9333,55352,8681,19994,3033,8017,7093,7896,4242,58083,56688,6167,9922,3618,7082,1603,16929,198,8075,7044,8232,12315,4570,4569,31082,8861,3680,4455,8403,4497,4380,7273,8896,21188,22480,1445,20165,20142,9068,1083,59093,41474,9224,9718,23380,5225,18889,4237,30,14549,8052,911,19000,7799,7300,9168,29798,4480,22228,7903,810,68,31000,9103,20992,8049,2261,8105,10152,5780,10111,3003,1,3,4,6,24,32,33,42,43,49,109,125,146,161,163,212,222,254,256,259,264,301,306,311,340,366,406,407,416,417,425,458,464,481,497,500,512,524,541,545,555,563,593,616,617,625,636,648,667,668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,898,900,901,902,903,912,981,987,992,1007,1009,1011,1021,1022,1023,1031,1032,1033,1034,1035,1036,1037,1038,1040,1043,1044,1045,1047,1050,1051,1052,1055,1057,1058,1059,1060,1061,1062,1063,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1084,1086,1087,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1102,1105,1106,1111,1112,1113,1114,1117,1119,1121,1124,1126,1130,1131,1132,1137,1138,1141,1145,1147,1148,1149,1151,1152,1154,1163,1164,1165,1166,1169,1174,1175,1183,1185,1186,1187,1192,1198,1199,1201,1216,1217,1218,1233,1236,1244,1247,1248,1259,1271,1272,1277,1287,1296,1309,1310,1311,1322,1328,1334,1352,1417,1434,1455,1461,1494,1501,1503,1521,1524,1533,1556,1580,1583,1594,1641,1658,1687,1688,1717,1718,1719,1721,1761,1782,1783,1805,1812,1839,1840,1862,1864,1875,1914,1935,1947,1971,1972,1974,1998,2002,2003,2004,2021,2022,2030,2033,2034,2035,2038,2040,2041,2042,2043,2045,2047,2048,2065,2068,2099,2105,2106,2111,2119,2126,2135,2144,2160,2161,2170,2179,2190,2191,2196,2200,2251,2260,2288,2323,2366,2381,2383,2393,2394,2399,2401,2492,2500,2522,2557,2601,2602,2604,2605,2607,2608,2638,2701,2702,2710,2718,2725,2800,2809,2811,2869,2875,2909,2910,2920,2968,2998,3005,3006,3007,3011,3017,3031,3052,3071,3077,3119,3162,3168,3211,3221,3260,3261,3268,3269,3283,3300,3301,3304,3307,3322,3323,3324,3325,3351,3367,3369,3370,3371,3372,3376,3390,3400,3404,3410,3476,3493,3514,3517,3527,3546,3551,3659,3684,3689,3697,3700,3731,3766,3784,3792,3800,3801,3808,3809,3814,3820,3824,3826,3827,3828,3846,3848,3849,3851,3852,3853,3859,3863,3869,3871,3878,3889,3905,3914,3918,3920,3945,3971,3995,3998,4002,4003,4004,4006,4045,4111,4125,4126,4129,4224,4279,4343,4444,4445,4446,4449,4550,4662,4900,4998,5004,5030,5033,5054,5061,5087,5102,5120,5214,5221,5222,5226,5269,5298,5405,5414,5431,5440,5500,5510,5550,5633,5679,5718,5730,5801,5802,5810,5815,5822,5825,5850,5859,5862,5877,5901,5903,5904,5906,5907,5910,5911,5915,5922,5925,5950,5952,5959,5960,5961,5962,5963,5987,5988,5989,5998,5999,6005,6007,6009,6025,6059,6106,6112,6123,6129,6156,6346,6389,6502,6547,6566,6567,6580,6667,6668,6669,6689,6692,6779,6788,6792,6839,6881,6901,7019,7025,7103,7106,7402,7435,7496,7512,7625,7627,7676,7741,7800,7911,7920,7937,7938,8194,8254,8290,8291,8292,8651,8652,8654,8701,8873,8994,9040,9071,9102,9207,9220,9290,9415,9418,9485,9502,9503,9535,9575,9593,9594,9618,9877,9878,9917,9929,9943,9944,9968,10012,10180,10215,10243,10566,10616,10617,10621,10626,10628,10629,10778,11110,11111,11967,12000,12174,12265,13456,13722,13782,13783,14238,14441,14442,15002,15003,15660,15742,16000,16001,16012,16016,16018,16113,16992,16993,17877,17988,18040,18101,18988,19283,19315,19350,19780,19801,19842,20005,20031,20221,20222,20828,21571,22939,23502,24444,24800,25734,25735,26214,27352,27353,27355,27356,27715,28201,30718,30951,31038,31337,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,33354,33899,34571,34572,34573,35500,38292,40193,40911,41511,42510,44176,44442,44443,44501,45100,49158,49159,49160,49161,49163,49165,49167,49175,49176,49400,49999,50001,50002,50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055,55056,55555,55600,56737,56738,57294,57797,60020,60443,61532,61900,62078,63331,64623,64680,65129,65389"\n\nsynPorts = cli.String("syn-ports", cli.setDefault(top5000))\n\nsynPortsList = str.ParseStringToPorts(top5000)\n\nif synPortsList != "" && len(synPortsList) == 0{\n    synPorts = top5000\n}\n\ncli.check()\n\nif len(tcpPortsList) >= 65535 {\n    tcpPorts = "1,3,4,6,7,8,9,13,17,19,20,21,22,23,24,25,26,27,30,32,33,37,42,43,49,53,55,57,59,60,65,66,68,70,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,106,108,109,110,111,113,114,119,122,123,125,127,132,133,135,137,138,139,143,144,146,157,161,163,171,179,180,188,198,199,200,206,208,210,211,212,220,222,223,225,235,250,251,252,254,255,256,257,259,264,268,270,280,299,301,302,306,308,309,311,321,333,340,366,381,388,389,403,406,407,411,416,417,419,421,423,425,427,436,441,442,443,444,445,447,458,464,465,475,481,497,500,502,511,512,513,514,515,517,522,523,524,540,541,543,544,545,548,554,555,556,557,560,563,586,587,590,591,593,600,602,606,610,616,617,621,623,625,631,636,639,641,646,648,655,657,659,660,666,667,668,669,674,683,684,687,688,690,691,700,701,705,709,710,711,713,714,715,720,722,725,726,728,729,730,731,732,733,740,748,749,754,757,758,765,770,777,778,780,782,783,786,787,790,792,795,800,801,802,803,804,805,806,807,808,809,810,811,812,822,823,825,829,839,840,843,846,856,859,860,862,864,866,873,874,877,878,880,888,889,898,900,901,902,903,904,905,911,912,913,916,918,921,922,924,925,928,930,931,943,953,955,956,968,969,971,980,981,983,987,990,992,993,995,996,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1116,1117,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1130,1131,1132,1134,1135,1136,1137,1138,1141,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154,1156,1157,1158,1159,1162,1163,1164,1165,1166,1167,1168,1169,1173,1174,1175,1176,1179,1180,1182,1183,1184,1185,1186,1187,1188,1190,1191,1192,1194,1195,1196,1198,1199,1200,1201,1204,1207,1208,1209,1210,1211,1212,1213,1215,1216,1217,1218,1220,1221,1222,1223,1228,1229,1233,1234,1236,1239,1240,1241,1243,1244,1247,1248,1249,1250,1251,1259,1261,1262,1264,1268,1270,1271,1272,1276,1277,1279,1282,1287,1290,1291,1296,1297,1299,1300,1301,1302,1303,1305,1306,1307,1308,1309,1310,1311,1313,1314,1315,1316,1317,1318,1319,1321,1322,1324,1327,1328,1330,1331,1334,1336,1337,1339,1340,1347,1350,1351,1352,1353,1356,1357,1389,1413,1414,1417,1433,1434,1443,1445,1455,1461,1494,1500,1501,1503,1516,1521,1522,1524,1525,1526,1527,1533,1547,1550,1556,1558,1559,1560,1565,1566,1569,1580,1583,1584,1592,1594,1598,1600,1603,1605,1607,1615,1620,1622,1630,1632,1635,1638,1641,1645,1658,1666,1677,1680,1683,1687,1688,1691,1694,1699,1700,1701,1703,1707,1708,1709,1711,1712,1713,1715,1717,1718,1719,1720,1721,1722,1723,1730,1735,1736,1745,1750,1752,1753,1755,1761,1782,1783,1790,1791,1792,1799,1800,1801,1805,1806,1807,1808,1811,1812,1818,1823,1825,1835,1839,1840,1858,1861,1862,1863,1864,1871,1875,1883,1888,1900,1901,1911,1912,1914,1918,1924,1927,1933,1935,1947,1949,1954,1958,1971,1972,1973,1974,1975,1976,1979,1980,1981,1982,1984,1988,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2020,2021,2022,2025,2030,2031,2033,2034,2035,2038,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2051,2060,2062,2065,2067,2068,2069,2070,2080,2081,2082,2083,2086,2087,2093,2095,2096,2099,2100,2101,2103,2104,2105,2106,2107,2110,2111,2112,2115,2119,2121,2124,2125,2126,2134,2135,2142,2144,2148,2150,2160,2161,2168,2170,2179,2181,2187,2190,2191,2196,2197,2200,2201,2203,2222,2224,2232,2241,2250,2251,2253,2260,2261,2262,2265,2269,2270,2271,2280,2288,2291,2292,2300,2301,2302,2304,2312,2313,2323,2325,2326,2330,2335,2340,2348,2366,2371,2372,2375,2381,2382,2383,2391,2393,2394,2399,2401,2418,2425,2433,2435,2436,2438,2439,2449,2456,2463,2472,2480,2490,2492,2500,2501,2505,2517,2521,2522,2525,2531,2532,2550,2551,2557,2558,2567,2580,2583,2584,2585,2598,2600,2601,2602,2604,2605,2606,2607,2608,2622,2623,2628,2631,2638,2644,2663,2691,2700,2701,2702,2706,2710,2711,2712,2717,2718,2723,2725,2728,2734,2800,2804,2806,2808,2809,2811,2812,2847,2850,2869,2875,2882,2886,2888,2889,2898,2901,2902,2903,2908,2909,2910,2920,2930,2957,2958,2967,2968,2973,2984,2987,2988,2991,2997,2998,3000,3001,3002,3003,3005,3006,3007,3008,3010,3011,3012,3013,3014,3017,3023,3025,3030,3031,3033,3050,3052,3057,3062,3063,3071,3077,3080,3089,3094,3102,3103,3118,3119,3121,3128,3133,3146,3162,3167,3168,3190,3200,3210,3211,3216,3220,3221,3240,3260,3261,3263,3268,3269,3280,3281,3283,3291,3299,3300,3301,3304,3306,3307,3310,3311,3312,3319,3322,3323,3324,3325,3333,3334,3351,3362,3363,3365,3367,3368,3369,3370,3371,3372,3374,3376,3377,3380,3388,3389,3390,3396,3398,3399,3400,3404,3410,3414,3415,3419,3425,3430,3437,3439,3443,3456,3465,3476,3479,3483,3485,3486,3493,3497,3503,3505,3506,3511,3513,3514,3515,3517,3519,3520,3526,3527,3530,3532,3535,3546,3551,3577,3580,3586,3588,3599,3600,3602,3603,3606,3618,3621,3622,3632,3636,3637,3652,3653,3656,3658,3659,3663,3668,3669,3670,3672,3680,3681,3683,3684,3689,3690,3697,3700,3703,3712,3721,3728,3731,3737,3742,3749,3765,3766,3784,3787,3788,3790,3792,3793,3795,3796,3798,3799,3800,3801,3803,3806,3808,3809,3810,3811,3812,3813,3814,3817,3820,3823,3824,3825,3826,3827,3828,3830,3831,3837,3839,3842,3846,3847,3848,3849,3850,3851,3852,3853,3856,3859,3860,3863,3868,3869,3870,3871,3872,3876,3878,3879,3880,3882,3888,3889,3890,3897,3899,3901,3902,3904,3905,3906,3907,3908,3909,3911,3913,3914,3915,3916,3918,3919,3920,3922,3923,3928,3929,3930,3931,3935,3936,3937,3938,3940,3941,3943,3944,3945,3946,3948,3949,3952,3956,3957,3961,3962,3963,3964,3967,3968,3969,3971,3972,3975,3979,3980,3981,3982,3983,3986,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4009,4010,4016,4020,4022,4023,4024,4025,4029,4035,4036,4039,4040,4045,4056,4058,4065,4080,4087,4090,4096,4100,4101,4111,4112,4113,4118,4119,4120,4121,4125,4126,4129,4135,4141,4143,4147,4158,4161,4164,4174,4180,4190,4192,4200,4206,4220,4224,4234,4237,4242,4252,4262,4279,4294,4297,4298,4300,4302,4321,4325,4328,4333,4342,4343,4355,4356,4357,4358,4369,4374,4375,4376,4380,4384,4388,4389,4401,4407,4414,4415,4418,4430,4433,4440,4442,4443,4444,4445,4446,4447,4449,4453,4454,4455,4464,4471,4476,4480,4497,4503,4516,4517,4530,4534,4545,4550,4555,4558,4559,4567,4569,4570,4599,4600,4601,4602,4606,4609,4644,4649,4658,4662,4665,4687,4689,4700,4712,4713,4745,4760,4767,4770,4771,4778,4793,4800,4819,4848,4850,4859,4860,4875,4876,4877,4881,4899,4900,4903,4912,4931,4949,4998,4999,5000,5001,5002,5003,5004,5005,5009,5010,5011,5012,5013,5014,5015,5016,5017,5020,5021,5023,5030,5033,5040,5050,5051,5052,5053,5054,5055,5060,5061,5063,5066,5070,5074,5080,5081,5087,5088,5090,5095,5096,5098,5100,5101,5102,5111,5114,5118,5120,5121,5122,5125,5133,5137,5147,5151,5152,5155,5156,5190,5200,5201,5202,5203,5212,5214,5219,5221,5222,5223,5225,5226,5233,5234,5235,5242,5250,5252,5255,5256,5259,5261,5269,5279,5280,5291,5298,5339,5347,5353,5357,5370,5377,5405,5414,5423,5431,5432,5433,5440,5441,5442,5444,5457,5458,5473,5475,5500,5501,5502,5510,5520,5544,5550,5552,5553,5555,5560,5561,5566,5600,5601,5631,5632,5633,5644,5655,5656,5666,5671,5672,5678,5679,5680,5718,5730,5757,5780,5800,5801,5802,5803,5807,5810,5811,5812,5815,5818,5822,5823,5825,5850,5859,5862,5868,5869,5877,5881,5887,5888,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5909,5910,5911,5914,5915,5918,5922,5925,5938,5940,5950,5952,5959,5960,5961,5962,5963,5966,5968,5981,5987,5988,5989,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6017,6020,6025,6050,6051,6059,6060,6068,6080,6088,6090,6100,6101,6103,6106,6112,6118,6123,6129,6156,6167,6170,6180,6198,6203,6222,6226,6247,6259,6286,6346,6365,6372,6379,6388,6389,6443,6481,6500,6502,6504,6510,6520,6543,6546,6547,6550,6565,6566,6567,6580,6587,6600,6602,6603,6606,6611,6646,6648,6662,6664,6666,6667,6668,6669,6670,6677,6680,6688,6689,6692,6699,6711,6732,6778,6779,6788,6789,6792,6800,6801,6839,6842,6868,6869,6879,6881,6886,6887,6888,6889,6890,6896,6901,6920,6969,6988,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7017,7018,7019,7020,7021,7022,7023,7024,7025,7028,7031,7041,7044,7048,7050,7051,7055,7060,7070,7071,7072,7074,7078,7080,7081,7082,7083,7084,7086,7088,7090,7093,7094,7100,7101,7102,7103,7106,7108,7111,7117,7123,7129,7140,7171,7180,7200,7201,7202,7215,7241,7272,7273,7278,7280,7281,7288,7300,7321,7330,7380,7402,7435,7438,7443,7474,7496,7500,7501,7512,7547,7567,7625,7627,7676,7680,7687,7688,7700,7702,7703,7709,7711,7713,7725,7741,7742,7744,7749,7751,7770,7776,7777,7778,7788,7789,7791,7799,7800,7801,7856,7878,7888,7890,7896,7899,7900,7901,7903,7909,7911,7913,7915,7920,7921,7925,7929,7937,7938,7942,7943,7979,7995,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8060,8061,8062,8064,8065,8066,8067,8068,8069,8070,8071,8073,8075,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8108,8110,8111,8112,8118,8119,8122,8123,8130,8133,8136,8144,8153,8161,8168,8172,8176,8180,8181,8182,8183,8184,8186,8188,8189,8190,8191,8192,8193,8194,8196,8197,8200,8201,8202,8213,8220,8222,8232,8244,8250,8254,8258,8260,8280,8281,8282,8283,8288,8290,8291,8292,8293,8294,8298,8300,8308,8322,8333,8341,8343,8360,8380,8381,8382,8383,8384,8385,8390,8391,8399,8400,8401,8402,8403,8443,8445,8448,8465,8477,8480,8481,8484,8488,8499,8500,8512,8540,8548,8567,8580,8582,8585,8600,8601,8610,8648,8649,8651,8652,8654,8660,8666,8675,8676,8680,8681,8684,8686,8688,8700,8701,8710,8720,8735,8765,8766,8777,8780,8781,8787,8788,8799,8800,8801,8802,8806,8808,8809,8810,8813,8820,8822,8828,8834,8838,8839,8844,8848,8858,8860,8861,8864,8866,8868,8873,8877,8879,8880,8881,8885,8886,8887,8888,8889,8890,8891,8892,8893,8895,8896,8898,8899,8900,8901,8902,8905,8910,8912,8913,8955,8956,8972,8974,8980,8983,8987,8988,8989,8990,8991,8992,8994,8996,8997,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9019,9020,9022,9025,9030,9031,9036,9038,9039,9040,9043,9050,9053,9060,9061,9068,9070,9071,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9105,9110,9111,9112,9113,9119,9131,9152,9168,9180,9182,9188,9190,9191,9192,9197,9198,9200,9201,9207,9212,9220,9224,9231,9290,9300,9301,9302,9333,9409,9415,9418,9437,9443,9444,9448,9485,9494,9500,9501,9502,9503,9504,9507,9512,9517,9527,9535,9541,9542,9575,9593,9594,9595,9600,9618,9621,9643,9666,9673,9696,9704,9718,9800,9801,9815,9836,9845,9876,9877,9878,9888,9889,9898,9900,9901,9909,9910,9912,9914,9917,9918,9919,9922,9929,9941,9943,9944,9968,9977,9980,9981,9986,9988,9989,9990,9991,9992,9995,9997,9998,9999,10000,10001,10002,10003,10004,10005,10007,10008,10009,10010,10011,10012,10016,10017,10021,10022,10023,10024,10025,10034,10038,10040,10050,10051,10056,10057,10058,10060,10066,10068,10069,10070,10078,10080,10082,10083,10086,10087,10088,10089,10098,10099,10101,10111,10118,10152,10154,10160,10180,10200,10215,10243,10250,10255,10333,10443,10566,10616,10617,10621,10626,10628,10629,10777,10778,10873,11000,11001,11080,11110,11111,11158,11180,11211,11212,11324,11347,11362,11366,11372,11381,11660,11967,12000,12001,12006,12018,12021,12059,12174,12215,12262,12265,12315,12333,12345,12346,12380,12443,12452,12881,13333,13382,13456,13722,13724,13782,13783,13988,14000,14007,14238,14338,14441,14442,14549,15000,15001,15002,15003,15004,15018,15080,15400,15402,15580,15660,15672,15693,15698,15742,15801,15888,16000,16001,16012,16016,16018,16080,16113,16580,16705,16788,16800,16851,16929,16992,16993,17000,17003,17071,17095,17173,17595,17777,17877,17988,18000,18001,18002,18004,18008,18018,18040,18060,18080,18081,18082,18085,18088,18090,18098,18101,18103,18181,18264,18765,18801,18803,18880,18881,18888,18889,18988,19000,19001,19010,19045,19080,19101,19244,19283,19315,19350,19780,19801,19842,19900,19994,20000,20001,20002,20005,20021,20022,20031,20046,20052,20140,20142,20151,20153,20165,20200,20202,20221,20222,20720,20806,20808,20828,20992,21000,21080,21188,21245,21501,21502,21571,21792,21900,22080,22222,22228,22343,22480,22580,22939,23052,23352,23380,23454,23458,23502,23796,24444,24800,25006,25024,25734,25735,26000,26214,26470,27000,27017,27352,27353,27355,27356,27357,27715,27779,28017,28018,28080,28099,28201,28211,28214,28280,28780,29672,29798,29831,30000,30001,30005,30015,30025,30030,30058,30082,30088,30551,30704,30718,30951,31000,31038,31082,31188,31337,31727,31945,32766,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,32791,32792,32803,32816,32822,32835,33354,33453,33554,33899,34440,34571,34572,34573,34899,35500,35513,37006,37839,38000,38037,38080,38086,38185,38188,38292,38443,38501,38517,38888,39136,39376,39659,40000,40001,40069,40080,40193,40310,40811,40911,41064,41474,41511,41516,41523,42424,42510,43651,44176,44334,44401,44442,44443,44445,44501,44709,45100,45149,45177,45692,46200,46996,47078,47088,47544,47583,48080,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49164,49165,49167,49168,49171,49175,49176,49186,49195,49236,49400,49401,49705,49960,49999,50000,50001,50002,50003,50006,50030,50045,50050,50060,50070,50075,50080,50090,50100,50240,50300,50389,50500,50636,50800,51103,51106,51191,51413,51493,52660,52673,52710,52735,52822,52847,52848,52849,52850,52851,52853,52869,53211,53313,53314,53535,54045,54328,55020,55055,55056,55070,55351,55352,55555,55576,55600,55858,56688,56737,56738,57294,57665,57797,57880,58000,58001,58002,58031,58060,58080,58083,58124,58630,58632,58838,58898,59009,59093,59110,59200,59201,59202,59777,59999,60000,60010,60020,60022,60030,60080,60101,60123,60146,60443,60465,60642,61081,61532,61613,61616,61900,61999,62078,63331,64623,64680,65000,65001,65055,65129,65310,65389,65486,65493,65533"\n    synPorts = str.Join(str.FilterPorts("1-65535",tcpPorts), ",")\n} else {\n    synPorts = str.Join(str.FilterPorts(synPorts,tcpPorts), ",")\n}\n\ntcpOps = []\ntcpOps = append(tcpOps, servicescan.active(true))\n\ntcpOps = append(tcpOps, servicescan.concurrent(50))\ntcpOps = append(tcpOps, servicescan.maxProbes(4))\n\ntcpOps = append(tcpOps, servicescan.probeTimeout(5.0))\n\ntcpOps = append(tcpOps, servicescan.all())\n\n// 设置排除端口和主机\nif excludePorts != "" {\n    yakit.Info("设置排除端口：%v", excludePorts)\n    tcpOps = append(tcpOps, servicescan.excludePorts(excludePorts))\n}\nif excludeHosts != "" {\n    yakit.Info("设置排除主机：%v", excludeHosts)\n    tcpOps = append(tcpOps, servicescan.excludeHosts(excludeHosts))\n}\n\nsynPortsList = str.ParseStringToPorts(synPorts)\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\nyakit.Info("SYN Port 端口个数 ：%v",len(synPortsList))\nyakit.Info("TCP Port 端口个数 ：%v",len(tcpPortsList))\nyakit.Info("扫描参数设置完成，准备扫描~")\n\n\nvar synscanEnable = false\ntry {\n    yakit.Info("检测 SYN 扫描是否可用中")\n    for res in synscan.Scan("127.0.0.1", "80", synscan.wait(1))~ {  }\n    \n    synscanEnable = true\n    // yakit.StatusCard("SYN 扫描", "可用")\n} catch err {\n    yakit.Info("SYN 扫描不可用，原因是：%v", err)\n}\n\n\n\nbruteOpt = []\n\nbruteOpt = append(bruteOpt, brute.minDelay(1), brute.maxDelay(5))\n\nbruteOpt = append(bruteOpt, brute.finishingThreshold(1))\nbruteOpt = append(bruteOpt, brute.concurrentTarget(20))\nbruteOpt = append(bruteOpt, brute.concurrent(1))\n\nbruteWg = sync.NewSizedWaitGroup(10)\n\nbruteScan = func(result) {\n    bruteWg.Add()\n    go func() {\n      \tdefer bruteWg.Done()\n        bruteType = ""\n        if result.GetServiceName() == "exasoftport1" {\n            return\n        }\n        \n        for _, bt := range brute.GetAvailableBruteTypes() {\n            if result.GetServiceName().Lower().Contains(bt) || bt.Contains(result.GetServiceName().Lower()) {\n                bruteType = bt\n                break\n            }\n            \n        }\n        \n\n        if bruteType == "" {\n            return\n        }\n        \n\n        defaultusers = []\n        defaultpass = []\n\n        if bruteType == "ftp" {\n            defaultusers = ["ftp", "www", "anonymous", "admin"]\n            defaultpass = ["admin", "admin123", "123456"]\n        } else if bruteType == "memcached" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "123456"]\n        } else if bruteType == "mongodb" {\n            defaultusers = ["root", "admin", "mongodb"]\n            defaultpass = ["root", "admin123", "root@123", "123456"]\n        } else if bruteType == "mssql" {\n            defaultusers = ["root", "admin", "mssql"]\n            defaultpass = ["root", "admin123", "root@123", "admin", "123456"]\n        } else if bruteType == "mysql" {\n            defaultusers = ["mysql", "root", "admin"]\n            defaultpass = ["root", "123456", "admin123", "admin", "root@123"]\n        } else if bruteType == "postgres" {\n            defaultusers = ["postgres", "root", "admin"]\n            defaultpass = ["root", "admin", "123456"]\n        } else if bruteType == "rdp" {\n            defaultusers = ["admin", "administrator", "root", "guest"]\n            defaultpass = ["administrator", "guest", "admin", "123456"]\n        } else if bruteType == "redis" {\n            defaultusers = ["redis"]\n            defaultpass = ["redis", "123456"]\n        } else if bruteType == "smb" {\n            defaultusers = ["administrator", "admin", "test", "guest", "system", "root", "sa"]\n            defaultpass = ["admin123!@#", "admin", "admin123", "admin@123", "admin#123", "123456", "root@123"]\n        } else if bruteType == "snmp" {\n            defaultusers = ["snmp"]\n            defaultpass = ["public", "private", "0", "0392a0", "1234", "2read", "4changes"]\n        } else if bruteType == "ssh" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "telnet" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "tomcat" {\n            defaultusers = ["manager", "tomcat"]\n            defaultpass = ["tomcat", "manager"]\n        } else if bruteType == "vnc" {\n            defaultusers = ["vnc"]\n            defaultpass = ["123456", "admin", "root"]\n        //} else if bruteType == "oracle" {\n          //  defaultusers = ["sys", "system", "oracle"]\n            //defaultpass = ["sys", "system", "oracle", "123456", ""]\n        } else if bruteType == "rtsp" {\n            defaultusers = ["admin"]\n            defaultpass = ["12345", "123456", ""]\n        } else {\n          \treturn\n        }\n        \n\n        uL = make([]string)\n        pL = make([]string)\n\n        uL = append(uL, defaultusers...)\n\n        pL = append(pL, defaultpass...)\n\n        bruteTasks := len(uL) * len(pL)// 计算爆破任务数量        \n\n        addr := str.HostPort(result.Target, result.Port)\n        yakit.Info("Start Load Bruter for %s: %s", bruteType, addr)\n\n        instance, err := brute.New(string(bruteType), brute.userList(uL...), brute.passList(pL...), brute.debug(true), \n                                   brute.okToStop(true), bruteOpt...)\n        if err != nil {\n            yakit.Error(\n                "构建弱口令与未授权扫描失败：%v", \n                err, \n            )\n            return\n        }\n        \n\n        res, err := instance.Start(addr)\n        if err != nil {\n            yakit.Error("输入目标失败：%v", err)\n            return\n        }\n        \n\n        riskTarget = addr\n        for rt := range res {\n            yakit.Info("rt string %v ", rt.String())\n            if rt == nil {\n                continue\n            }\n            \n\n            if !rt.Ok {\n                continue\n            }\n            \n            if rt.Username == "" && rt.Password == "" {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("未授权访问"), \n                    risk.title(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.titleVerbose(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.description("由于配置不当或管理疏忽，某些服务、接口或应用存在未授权访问的风险。攻击者可以直接访问这些资源而不需要任何身份验证，这可能会导致敏感数据的泄露、系统的滥用或其他恶意行为。"), \n                    risk.solution(`1. 审核所有公开可访问的服务、接口和应用，确保它们都有适当的访问控制。\n2. 使用身份验证机制，如用户名/密码、API密钥或OAuth。\n3. 定期监控和审查访问日志，以检测任何可疑或未授权的活动。`), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            } else {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("弱口令"), \n                    risk.description("网站管理、运营人员由于安全意识不足，为了方便、避免忘记密码等，使用了非常容易记住的密码，或者是直接采用了系统的默认密码等。攻击者利用此漏洞可直接进入应用系统或者管理系统，从而进行系统、网页、数据的篡改与删除，非法获取系统、用户的数据，甚至可能导致服务器沦陷。"), \n                    risk.solution("用户层面 : 不要使用常见的弱口令作为密码,不要多个系统或者社交账号使用同一套密码,定期修改密码,建议使用包含随机值的或者随机生成的字符串作为系统密码"), \n                    risk.title(sprintf(\n                        "Weak Password[%v]：%v user(%v) pass(%v)", \n                        rt.Type, \n                        rt.Target, \n                        rt.Username, \n                        rt.Password, \n                    )), \n                    risk.titleVerbose(sprintf("弱口令[%v]：%v user(%v) pass(%v)", rt.Type, rt.Target, rt.Username, \n                                              rt.Password)), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            }\n            \n        }\n    }()\n}\n\nhandleServiceScanResult = func(result) {\n\n    manager.HandleServiceScanResult(result)\n    if enableBruteFlag && len(result.GetServiceName()) != 0 {\n        serviceName = result.GetServiceName()\n        yakit.Info("Start Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n        bruteScan(result)\n        yakit.Info("End Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n    }\n}\n\naliveHostCountList = []\n\n\nOpenPortCount = 0\nopenPortCountLock = sync.NewLock()\naddOpenPortCount = func() {\n    openPortCountLock.Lock()\n    defer openPortCountLock.Unlock()\n    OpenPortCount++\n}\n\nruntimeID = os.Getenv("YAK_RUNTIME_ID")\n\nfunc handleTCP(targets) {\n    try {\n        for result in servicescan.Scan(targets, tcpPorts, tcpOps...)~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            \n            yakit.Info("GOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err {\n        yakit.Error("处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\nfunc handleSYN(targets){\n\n    try {\n        for result in servicescan.ScanFromSynResult(\n            synscan.Scan(targets, synPorts, \n                    synscan.excludePorts(tcpPorts),\n                    synscan.concurrent(synConcurrent),\n                )~, \n                tcpOps..., \n            )~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            yakit.Info("SYNGOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err { \n        yakit.Error("SYN 处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\n\n\n\n\ntargets = str.ParseStringToHosts(targetRaw)\n\ninfo = {}\n\nalive = ""\n\nfor res := range ping.Scan(targetRaw, pingOpt...) {\n    if res.Ok {\n        alive += res.IP + ","\n    }\n}\n\nlog.Info("ping res %s",alive)\n\naliveTargets = str.ParseStringToHosts(alive)\n\n\ninfo["runtime_id"] = runtimeID\ninfo["host_total"] = len(targets)\ninfo["port_total"] = len(synPortsList) + len(tcpPortsList)\ninfo["plugins"] = len(pluginNames)\n\ninfoJson = json.dumps(info)\n\ndb.SetKey("JznQXuFDSepeNWHbiLGEwONiaBxhvj_SERVER_SCAN_MANAGER", infoJson)\n\ntargetBatch = ""\ncount := 0\nwgTCP := sync.NewSizedWaitGroup(50)\n\nfor _, target = range aliveTargets{\n    currentTarget = target\n\n    if count > 0 {\n        targetBatch += "," + currentTarget\n    } else {\n        targetBatch = currentTarget\n    }\n    count++\n\n    if count == 50 {\n        wgTCP.Add()\n        go func {\n            defer wgTCP.Done()\n            handleTCP(targetBatch)\n        }\n        if synscanEnable {\n            handleSYN(targetBatch)\n        }\n        targetBatch = ""\n        count = 0\n    }\n}\nlog.Info("targetBatch %s", targetBatch)\n\nif count > 0 {\n    wgTCP.Add()\n    go func {\n        defer wgTCP.Done()\n        handleTCP(targetBatch)\n    }\n    if synscanEnable {\n        handleSYN(targetBatch)\n    }\n}\n\nif synscanEnable {\n    yakit.StatusCard("SYN", "DONE")\n}\n\nwgTCP.Wait()\n\nhostCountSec = len(aliveHostCountList)\n\n\nif hostCountSec != 0 {\n    // 根据存活 ip + (加载成功的插件数 * 2s)/concurrent  + 开放端口数\n    // 定时器，超过一定时间，就扫描结束\n    waitTimeSec = hostCountSec + (loadPluginFinished * 2)/20 + OpenPortCount\n    if waitTimeSec < 10 {\n        waitTimeSec = 60\n    }\n  \tyakit.Info("waitTimeSec %v", waitTimeSec)\n    time.AfterFunc(waitTimeSec * 1000 * 1000 * 1000, func() {\n        yakit.SetProgress(1)\n        yakit.Info("AfterFunc 本次扫描任务已完成。")\n        os.Exit(0)\n    })\n}\nbruteWg.Wait()\nmanager.Wait()',
        script_type: '端口与漏洞扫描',
        tags: ['distributed-script'],
        type: '纯弱口令协议检测',
    },
    {
        description: '',
        disallow_scheduled: true,
        prompt_args: [
            {
                explain: '',
                key: 'target',
                value: '',
            },
            {
                explain: '',
                key: 'ports',
                value: '',
            },
        ],
        script: '// 重构SYN-20240718 go0p\n\nyakit.AutoInitYakit()\nloglevel(`info`)\n\n/*\n创建插件:\n   1. 插件的执行状态需要注意：加载成功与否？\n*/\n\n\ntargetRaw = cli.String("target",cli.setRequired(true))\n\npluginsStr = cli.String("plugins",cli.setRequired(true))\n\n// host alive scan\nskippedHostAliveScan = cli.String("skipped-host-alive-scan",cli.setDefault("false"))\nhostAliveConcurrent = cli.Int("host-alive-concurrent", cli.setDefault(20), cli.setRequired(false))\nhostAliveTimeout = cli.Float("host-alive-timeout", cli.setDefault(5.0), cli.setRequired(false))\nhostAliveTCPPorts = cli.String("host-alive-ports", cli.setDefault("80,22,443"), cli.setRequired(false))\n\nskippedHostAliveScanFlag = false\n\nif skippedHostAliveScan == "true" {\n    skippedHostAliveScanFlag = true\n}\n\n\npluginStatusMap = {};\npluginNames = str.Split(pluginsStr, ",")\nyakit.Info("开始创建漏洞扫描管理器")\nmanager, err := hook.NewMixPluginCaller()\nif err != nil {\n    yakit.Error("创建失败：%v", err)\n}\n\nmanager.SetDividedContext(true)\nmanager.SetConcurrent(20)\n\nloadPluginFinished = 0\nx.Foreach(pluginNames, func(i) {\n    // 插件加载状态\n    statusName = "加载中"\n    err = manager.LoadPlugin(i)\n    if err != nil {\n        yakit.Info("加载插件【%v】失败：%v", i, err)\n        statusName = "加载失败"\n    } else {\n        loadPluginFinished++\n\n        yakit.Info(i + " [加载成功]")\n\t   yakit.Info(sprintf("涉及扫描插件：%v个", len(pluginNames)))\n        statusName = "加载成功"\n    }\n    pluginStatusMap[i] = [i, statusName]\n})\n\n\n\n\npingOpt = []\n\n\nenableBrute = cli.String("enable-brute",cli.setDefault("false"))\n\nenableBruteFlag = false\n\nif enableBrute == "true" {\n    enableBruteFlag = true\n}\n\nif skippedHostAliveScan {\n    pingOpt = append(pingOpt, ping.skip(skippedHostAliveScanFlag))\n}\n\nif hostAliveTimeout > 0 {\n    pingOpt = append(pingOpt, ping.timeout(hostAliveTimeout))\n}\n\n\nif hostAliveConcurrent > 0 {\n    pingOpt = append(pingOpt, ping.concurrent(hostAliveConcurrent))\n}\n\n\nif len(hostAliveTCPPorts) > 0 {\n    pingOpt = append(pingOpt, ping.tcpPingPorts(hostAliveTCPPorts))\n}\n\nsynConcurrent = cli.Int("syn-concurrent", cli.setDefault(2000))\n\nexcludeHosts = cli.String("exclude-hosts")\nexcludePorts = cli.String("exclude-ports")\n\ntop100 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018"\n\ntcpPorts = cli.String("ports", cli.setDefault(top100))\n\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\n\nif len(tcpPortsList) == 0{\n    tcpPorts = top100\n}\n\n// top 5000 ports\ntop5000 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018,93,6666,7010,100,9003,6789,7060,8022,4848,3050,8787,8013,8040,10021,2011,6006,4000,8055,4430,6060,7788,8066,9898,8801,10040,7006,803,6688,10080,8050,7011,7009,40310,802,10003,8014,2080,7288,9992,8005,8889,5644,8886,9500,58031,50000,9020,8015,50060,8887,8021,8700,9900,9191,3312,8186,8735,8380,1234,38080,2110,8007,21245,3333,2046,9061,8686,9011,8061,9876,8282,60465,2222,9009,1100,18081,70,8383,5155,8188,2517,50070,8062,11324,9231,999,28214,8987,809,2010,7700,3535,7921,11080,6778,805,8073,114,2012,701,8810,8400,9007,8808,8065,8822,15000,9901,11158,1107,28099,12345,2006,9527,51106,688,25006,8045,9006,8023,8029,9997,7048,8580,8585,8035,10088,20022,4001,9005,2013,20808,3580,7742,8119,32766,50075,7272,3380,3220,7801,5256,5255,10086,1300,5200,6198,1158,6889,3503,6088,9991,806,8183,8688,1001,58080,1182,9025,8112,7776,7321,235,8077,8500,11347,7081,8877,8480,9182,58000,8026,11001,10089,5888,8196,8078,9995,2014,5656,8019,5003,8481,6002,9889,9015,8866,8182,8057,8399,8308,511,12881,4016,1039,28080,5678,7500,8051,18801,15018,15888,38443,8123,9004,8144,94,9070,1800,9112,8990,3456,2051,9131,97,7100,7711,7180,11000,8037,6988,122,8885,14007,8184,7012,8079,9888,9301,59999,49705,1979,8900,5080,5013,1550,8844,4850,206,5156,8813,3030,1790,8802,9012,5544,3721,8980,10009,8043,8390,7943,8381,8056,7111,1500,5881,9437,5655,8102,65486,4443,3690,10025,8024,8333,8666,103,8,9666,8999,9111,8071,522,11381,20806,8041,1085,8864,7900,1700,8036,8032,8033,8111,60022,955,3080,8788,27017,7443,8192,6969,9909,5002,9990,188,8910,9022,50030,866,8582,4300,9101,6879,8891,4567,4440,10051,10068,50080,8341,30001,6890,8168,8955,16788,8190,18060,6379,7041,42424,15693,2521,19010,18103,6010,8898,9910,9190,8260,8445,1680,8890,8649,30082,3013,30000,2480,7202,9704,5233,8991,11366,7888,8780,7129,6600,47088,7791,18888,50045,15672,2585,60,9494,31945,2060,8610,8860,58060,6118,2348,38000,18880,13382,6611,8064,7101,5081,7380,7942,10016,8027,2093,403,9014,8133,6886,95,8058,9201,6443,5966,27000,7017,6680,8401,9036,8988,8806,6180,421,423,57880,7778,18881,812,15004,9110,8213,9300,1213,8193,8956,1108,778,65000,7020,1122,9031,17000,8039,8600,50090,1863,8191,65,6587,8136,9507,132,200,2070,308,5811,3465,8680,7999,7084,3938,5902,9595,442,4433,7171,7567,811,1128,6003,2125,6090,10007,7022,1949,6565,65001,1301,19244,10087,8025,5098,21080,1200,15801,1005,22343,7086,8601,6259,7102,10333,211,10082,18085,180,40000,7021,7702,66,38086,666,6603,1212,65493,96,9053,7031,23454,30088,6226,8660,6170,8972,48080,10118,40069,28780,20153,20021,20151,58898,10066,1818,9914,55351,8343,6546,3880,8902,22222,19045,5561,7979,5203,50240,49960,2007,1722,8913,8912,9504,8103,8567,1666,8720,8197,3012,8220,9039,5898,925,38517,8382,6842,8895,2808,447,3600,3606,45177,19101,171,133,8189,7108,10154,47078,6800,8122,381,15580,23352,3443,1180,268,2382,43651,10099,65533,7018,60010,60101,6699,2005,2009,59777,591,1933,9013,8477,9696,9030,2015,7925,6510,18803,280,5601,2901,2301,5201,302,610,5552,8809,6869,9212,17095,20001,8781,25024,5280,7909,17003,1088,7117,20052,10038,30551,9980,9180,59009,28280,7028,61999,7915,8384,9918,9919,55858,7215,77,9845,20140,7856,1982,1123,17777,8839,208,2886,877,6101,5100,804,983,5600,8402,5887,8322,5632,770,13333,7330,3216,31188,47583,8710,22580,1042,34440,20,7703,65055,8997,6543,6388,8283,7201,4040,61081,12001,3588,7123,2490,4389,1313,19080,9050,6920,299,20046,8892,9302,7899,30058,7094,6801,321,1356,12333,11362,11372,6602,7709,45149,3668,517,9912,8130,7050,7713,40080,8104,13988,18264,8799,7072,55070,23458,8176,9517,9541,9542,9512,8905,11660,44445,44401,17173,436,560,733,968,602,3133,3398,16580,8488,8901,8512,10443,9113,9119,6606,22080,5560,5757,1600,8250,10024,10200,333,73,7547,8054,6372,223,3737,9019,8067,45692,15400,15698,9038,37006,2086,1002,9188,8201,8202,30030,2663,9105,10017,4503,1104,8893,40001,27779,3010,7083,5010,5501,309,1389,10070,10069,10056,3094,10057,10078,10050,10060,10098,4180,10777,270,6365,9801,1046,7140,1004,9198,8465,8548,108,30015,8153,1020,50100,8391,34899,7090,6100,8777,8298,8281,7023,3377,8499,7501,4321,3437,9977,14338,843,7901,6020,6011,1988,4023,20202,20200,7995,18181,9836,586,2340,8110,9192,2525,6887,4005,8992,11212,2168,60080,6664,10005,956,1016,4453,8974,10101,58124,30025,7789,7280,8068,11180,1984,5566,916,8828,17071,15080,8820,104,21900,5151,860,6286,5118,18765,7055,9989,807,7751,8684,1999,9333,55352,8681,19994,3033,8017,7093,7896,4242,58083,56688,6167,9922,3618,7082,1603,16929,198,8075,7044,8232,12315,4570,4569,31082,8861,3680,4455,8403,4497,4380,7273,8896,21188,22480,1445,20165,20142,9068,1083,59093,41474,9224,9718,23380,5225,18889,4237,30,14549,8052,911,19000,7799,7300,9168,29798,4480,22228,7903,810,68,31000,9103,20992,8049,2261,8105,10152,5780,10111,3003,1,3,4,6,24,32,33,42,43,49,109,125,146,161,163,212,222,254,256,259,264,301,306,311,340,366,406,407,416,417,425,458,464,481,497,500,512,524,541,545,555,563,593,616,617,625,636,648,667,668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,898,900,901,902,903,912,981,987,992,1007,1009,1011,1021,1022,1023,1031,1032,1033,1034,1035,1036,1037,1038,1040,1043,1044,1045,1047,1050,1051,1052,1055,1057,1058,1059,1060,1061,1062,1063,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1084,1086,1087,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1102,1105,1106,1111,1112,1113,1114,1117,1119,1121,1124,1126,1130,1131,1132,1137,1138,1141,1145,1147,1148,1149,1151,1152,1154,1163,1164,1165,1166,1169,1174,1175,1183,1185,1186,1187,1192,1198,1199,1201,1216,1217,1218,1233,1236,1244,1247,1248,1259,1271,1272,1277,1287,1296,1309,1310,1311,1322,1328,1334,1352,1417,1434,1455,1461,1494,1501,1503,1521,1524,1533,1556,1580,1583,1594,1641,1658,1687,1688,1717,1718,1719,1721,1761,1782,1783,1805,1812,1839,1840,1862,1864,1875,1914,1935,1947,1971,1972,1974,1998,2002,2003,2004,2021,2022,2030,2033,2034,2035,2038,2040,2041,2042,2043,2045,2047,2048,2065,2068,2099,2105,2106,2111,2119,2126,2135,2144,2160,2161,2170,2179,2190,2191,2196,2200,2251,2260,2288,2323,2366,2381,2383,2393,2394,2399,2401,2492,2500,2522,2557,2601,2602,2604,2605,2607,2608,2638,2701,2702,2710,2718,2725,2800,2809,2811,2869,2875,2909,2910,2920,2968,2998,3005,3006,3007,3011,3017,3031,3052,3071,3077,3119,3162,3168,3211,3221,3260,3261,3268,3269,3283,3300,3301,3304,3307,3322,3323,3324,3325,3351,3367,3369,3370,3371,3372,3376,3390,3400,3404,3410,3476,3493,3514,3517,3527,3546,3551,3659,3684,3689,3697,3700,3731,3766,3784,3792,3800,3801,3808,3809,3814,3820,3824,3826,3827,3828,3846,3848,3849,3851,3852,3853,3859,3863,3869,3871,3878,3889,3905,3914,3918,3920,3945,3971,3995,3998,4002,4003,4004,4006,4045,4111,4125,4126,4129,4224,4279,4343,4444,4445,4446,4449,4550,4662,4900,4998,5004,5030,5033,5054,5061,5087,5102,5120,5214,5221,5222,5226,5269,5298,5405,5414,5431,5440,5500,5510,5550,5633,5679,5718,5730,5801,5802,5810,5815,5822,5825,5850,5859,5862,5877,5901,5903,5904,5906,5907,5910,5911,5915,5922,5925,5950,5952,5959,5960,5961,5962,5963,5987,5988,5989,5998,5999,6005,6007,6009,6025,6059,6106,6112,6123,6129,6156,6346,6389,6502,6547,6566,6567,6580,6667,6668,6669,6689,6692,6779,6788,6792,6839,6881,6901,7019,7025,7103,7106,7402,7435,7496,7512,7625,7627,7676,7741,7800,7911,7920,7937,7938,8194,8254,8290,8291,8292,8651,8652,8654,8701,8873,8994,9040,9071,9102,9207,9220,9290,9415,9418,9485,9502,9503,9535,9575,9593,9594,9618,9877,9878,9917,9929,9943,9944,9968,10012,10180,10215,10243,10566,10616,10617,10621,10626,10628,10629,10778,11110,11111,11967,12000,12174,12265,13456,13722,13782,13783,14238,14441,14442,15002,15003,15660,15742,16000,16001,16012,16016,16018,16113,16992,16993,17877,17988,18040,18101,18988,19283,19315,19350,19780,19801,19842,20005,20031,20221,20222,20828,21571,22939,23502,24444,24800,25734,25735,26214,27352,27353,27355,27356,27715,28201,30718,30951,31038,31337,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,33354,33899,34571,34572,34573,35500,38292,40193,40911,41511,42510,44176,44442,44443,44501,45100,49158,49159,49160,49161,49163,49165,49167,49175,49176,49400,49999,50001,50002,50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055,55056,55555,55600,56737,56738,57294,57797,60020,60443,61532,61900,62078,63331,64623,64680,65129,65389"\n\nsynPorts = cli.String("syn-ports", cli.setDefault(top5000))\n\nsynPortsList = str.ParseStringToPorts(top5000)\n\nif synPortsList != "" && len(synPortsList) == 0{\n    synPorts = top5000\n}\n\ncli.check()\n\nif len(tcpPortsList) >= 65535 {\n    tcpPorts = "1,3,4,6,7,8,9,13,17,19,20,21,22,23,24,25,26,27,30,32,33,37,42,43,49,53,55,57,59,60,65,66,68,70,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,106,108,109,110,111,113,114,119,122,123,125,127,132,133,135,137,138,139,143,144,146,157,161,163,171,179,180,188,198,199,200,206,208,210,211,212,220,222,223,225,235,250,251,252,254,255,256,257,259,264,268,270,280,299,301,302,306,308,309,311,321,333,340,366,381,388,389,403,406,407,411,416,417,419,421,423,425,427,436,441,442,443,444,445,447,458,464,465,475,481,497,500,502,511,512,513,514,515,517,522,523,524,540,541,543,544,545,548,554,555,556,557,560,563,586,587,590,591,593,600,602,606,610,616,617,621,623,625,631,636,639,641,646,648,655,657,659,660,666,667,668,669,674,683,684,687,688,690,691,700,701,705,709,710,711,713,714,715,720,722,725,726,728,729,730,731,732,733,740,748,749,754,757,758,765,770,777,778,780,782,783,786,787,790,792,795,800,801,802,803,804,805,806,807,808,809,810,811,812,822,823,825,829,839,840,843,846,856,859,860,862,864,866,873,874,877,878,880,888,889,898,900,901,902,903,904,905,911,912,913,916,918,921,922,924,925,928,930,931,943,953,955,956,968,969,971,980,981,983,987,990,992,993,995,996,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1116,1117,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1130,1131,1132,1134,1135,1136,1137,1138,1141,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154,1156,1157,1158,1159,1162,1163,1164,1165,1166,1167,1168,1169,1173,1174,1175,1176,1179,1180,1182,1183,1184,1185,1186,1187,1188,1190,1191,1192,1194,1195,1196,1198,1199,1200,1201,1204,1207,1208,1209,1210,1211,1212,1213,1215,1216,1217,1218,1220,1221,1222,1223,1228,1229,1233,1234,1236,1239,1240,1241,1243,1244,1247,1248,1249,1250,1251,1259,1261,1262,1264,1268,1270,1271,1272,1276,1277,1279,1282,1287,1290,1291,1296,1297,1299,1300,1301,1302,1303,1305,1306,1307,1308,1309,1310,1311,1313,1314,1315,1316,1317,1318,1319,1321,1322,1324,1327,1328,1330,1331,1334,1336,1337,1339,1340,1347,1350,1351,1352,1353,1356,1357,1389,1413,1414,1417,1433,1434,1443,1445,1455,1461,1494,1500,1501,1503,1516,1521,1522,1524,1525,1526,1527,1533,1547,1550,1556,1558,1559,1560,1565,1566,1569,1580,1583,1584,1592,1594,1598,1600,1603,1605,1607,1615,1620,1622,1630,1632,1635,1638,1641,1645,1658,1666,1677,1680,1683,1687,1688,1691,1694,1699,1700,1701,1703,1707,1708,1709,1711,1712,1713,1715,1717,1718,1719,1720,1721,1722,1723,1730,1735,1736,1745,1750,1752,1753,1755,1761,1782,1783,1790,1791,1792,1799,1800,1801,1805,1806,1807,1808,1811,1812,1818,1823,1825,1835,1839,1840,1858,1861,1862,1863,1864,1871,1875,1883,1888,1900,1901,1911,1912,1914,1918,1924,1927,1933,1935,1947,1949,1954,1958,1971,1972,1973,1974,1975,1976,1979,1980,1981,1982,1984,1988,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2020,2021,2022,2025,2030,2031,2033,2034,2035,2038,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2051,2060,2062,2065,2067,2068,2069,2070,2080,2081,2082,2083,2086,2087,2093,2095,2096,2099,2100,2101,2103,2104,2105,2106,2107,2110,2111,2112,2115,2119,2121,2124,2125,2126,2134,2135,2142,2144,2148,2150,2160,2161,2168,2170,2179,2181,2187,2190,2191,2196,2197,2200,2201,2203,2222,2224,2232,2241,2250,2251,2253,2260,2261,2262,2265,2269,2270,2271,2280,2288,2291,2292,2300,2301,2302,2304,2312,2313,2323,2325,2326,2330,2335,2340,2348,2366,2371,2372,2375,2381,2382,2383,2391,2393,2394,2399,2401,2418,2425,2433,2435,2436,2438,2439,2449,2456,2463,2472,2480,2490,2492,2500,2501,2505,2517,2521,2522,2525,2531,2532,2550,2551,2557,2558,2567,2580,2583,2584,2585,2598,2600,2601,2602,2604,2605,2606,2607,2608,2622,2623,2628,2631,2638,2644,2663,2691,2700,2701,2702,2706,2710,2711,2712,2717,2718,2723,2725,2728,2734,2800,2804,2806,2808,2809,2811,2812,2847,2850,2869,2875,2882,2886,2888,2889,2898,2901,2902,2903,2908,2909,2910,2920,2930,2957,2958,2967,2968,2973,2984,2987,2988,2991,2997,2998,3000,3001,3002,3003,3005,3006,3007,3008,3010,3011,3012,3013,3014,3017,3023,3025,3030,3031,3033,3050,3052,3057,3062,3063,3071,3077,3080,3089,3094,3102,3103,3118,3119,3121,3128,3133,3146,3162,3167,3168,3190,3200,3210,3211,3216,3220,3221,3240,3260,3261,3263,3268,3269,3280,3281,3283,3291,3299,3300,3301,3304,3306,3307,3310,3311,3312,3319,3322,3323,3324,3325,3333,3334,3351,3362,3363,3365,3367,3368,3369,3370,3371,3372,3374,3376,3377,3380,3388,3389,3390,3396,3398,3399,3400,3404,3410,3414,3415,3419,3425,3430,3437,3439,3443,3456,3465,3476,3479,3483,3485,3486,3493,3497,3503,3505,3506,3511,3513,3514,3515,3517,3519,3520,3526,3527,3530,3532,3535,3546,3551,3577,3580,3586,3588,3599,3600,3602,3603,3606,3618,3621,3622,3632,3636,3637,3652,3653,3656,3658,3659,3663,3668,3669,3670,3672,3680,3681,3683,3684,3689,3690,3697,3700,3703,3712,3721,3728,3731,3737,3742,3749,3765,3766,3784,3787,3788,3790,3792,3793,3795,3796,3798,3799,3800,3801,3803,3806,3808,3809,3810,3811,3812,3813,3814,3817,3820,3823,3824,3825,3826,3827,3828,3830,3831,3837,3839,3842,3846,3847,3848,3849,3850,3851,3852,3853,3856,3859,3860,3863,3868,3869,3870,3871,3872,3876,3878,3879,3880,3882,3888,3889,3890,3897,3899,3901,3902,3904,3905,3906,3907,3908,3909,3911,3913,3914,3915,3916,3918,3919,3920,3922,3923,3928,3929,3930,3931,3935,3936,3937,3938,3940,3941,3943,3944,3945,3946,3948,3949,3952,3956,3957,3961,3962,3963,3964,3967,3968,3969,3971,3972,3975,3979,3980,3981,3982,3983,3986,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4009,4010,4016,4020,4022,4023,4024,4025,4029,4035,4036,4039,4040,4045,4056,4058,4065,4080,4087,4090,4096,4100,4101,4111,4112,4113,4118,4119,4120,4121,4125,4126,4129,4135,4141,4143,4147,4158,4161,4164,4174,4180,4190,4192,4200,4206,4220,4224,4234,4237,4242,4252,4262,4279,4294,4297,4298,4300,4302,4321,4325,4328,4333,4342,4343,4355,4356,4357,4358,4369,4374,4375,4376,4380,4384,4388,4389,4401,4407,4414,4415,4418,4430,4433,4440,4442,4443,4444,4445,4446,4447,4449,4453,4454,4455,4464,4471,4476,4480,4497,4503,4516,4517,4530,4534,4545,4550,4555,4558,4559,4567,4569,4570,4599,4600,4601,4602,4606,4609,4644,4649,4658,4662,4665,4687,4689,4700,4712,4713,4745,4760,4767,4770,4771,4778,4793,4800,4819,4848,4850,4859,4860,4875,4876,4877,4881,4899,4900,4903,4912,4931,4949,4998,4999,5000,5001,5002,5003,5004,5005,5009,5010,5011,5012,5013,5014,5015,5016,5017,5020,5021,5023,5030,5033,5040,5050,5051,5052,5053,5054,5055,5060,5061,5063,5066,5070,5074,5080,5081,5087,5088,5090,5095,5096,5098,5100,5101,5102,5111,5114,5118,5120,5121,5122,5125,5133,5137,5147,5151,5152,5155,5156,5190,5200,5201,5202,5203,5212,5214,5219,5221,5222,5223,5225,5226,5233,5234,5235,5242,5250,5252,5255,5256,5259,5261,5269,5279,5280,5291,5298,5339,5347,5353,5357,5370,5377,5405,5414,5423,5431,5432,5433,5440,5441,5442,5444,5457,5458,5473,5475,5500,5501,5502,5510,5520,5544,5550,5552,5553,5555,5560,5561,5566,5600,5601,5631,5632,5633,5644,5655,5656,5666,5671,5672,5678,5679,5680,5718,5730,5757,5780,5800,5801,5802,5803,5807,5810,5811,5812,5815,5818,5822,5823,5825,5850,5859,5862,5868,5869,5877,5881,5887,5888,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5909,5910,5911,5914,5915,5918,5922,5925,5938,5940,5950,5952,5959,5960,5961,5962,5963,5966,5968,5981,5987,5988,5989,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6017,6020,6025,6050,6051,6059,6060,6068,6080,6088,6090,6100,6101,6103,6106,6112,6118,6123,6129,6156,6167,6170,6180,6198,6203,6222,6226,6247,6259,6286,6346,6365,6372,6379,6388,6389,6443,6481,6500,6502,6504,6510,6520,6543,6546,6547,6550,6565,6566,6567,6580,6587,6600,6602,6603,6606,6611,6646,6648,6662,6664,6666,6667,6668,6669,6670,6677,6680,6688,6689,6692,6699,6711,6732,6778,6779,6788,6789,6792,6800,6801,6839,6842,6868,6869,6879,6881,6886,6887,6888,6889,6890,6896,6901,6920,6969,6988,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7017,7018,7019,7020,7021,7022,7023,7024,7025,7028,7031,7041,7044,7048,7050,7051,7055,7060,7070,7071,7072,7074,7078,7080,7081,7082,7083,7084,7086,7088,7090,7093,7094,7100,7101,7102,7103,7106,7108,7111,7117,7123,7129,7140,7171,7180,7200,7201,7202,7215,7241,7272,7273,7278,7280,7281,7288,7300,7321,7330,7380,7402,7435,7438,7443,7474,7496,7500,7501,7512,7547,7567,7625,7627,7676,7680,7687,7688,7700,7702,7703,7709,7711,7713,7725,7741,7742,7744,7749,7751,7770,7776,7777,7778,7788,7789,7791,7799,7800,7801,7856,7878,7888,7890,7896,7899,7900,7901,7903,7909,7911,7913,7915,7920,7921,7925,7929,7937,7938,7942,7943,7979,7995,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8060,8061,8062,8064,8065,8066,8067,8068,8069,8070,8071,8073,8075,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8108,8110,8111,8112,8118,8119,8122,8123,8130,8133,8136,8144,8153,8161,8168,8172,8176,8180,8181,8182,8183,8184,8186,8188,8189,8190,8191,8192,8193,8194,8196,8197,8200,8201,8202,8213,8220,8222,8232,8244,8250,8254,8258,8260,8280,8281,8282,8283,8288,8290,8291,8292,8293,8294,8298,8300,8308,8322,8333,8341,8343,8360,8380,8381,8382,8383,8384,8385,8390,8391,8399,8400,8401,8402,8403,8443,8445,8448,8465,8477,8480,8481,8484,8488,8499,8500,8512,8540,8548,8567,8580,8582,8585,8600,8601,8610,8648,8649,8651,8652,8654,8660,8666,8675,8676,8680,8681,8684,8686,8688,8700,8701,8710,8720,8735,8765,8766,8777,8780,8781,8787,8788,8799,8800,8801,8802,8806,8808,8809,8810,8813,8820,8822,8828,8834,8838,8839,8844,8848,8858,8860,8861,8864,8866,8868,8873,8877,8879,8880,8881,8885,8886,8887,8888,8889,8890,8891,8892,8893,8895,8896,8898,8899,8900,8901,8902,8905,8910,8912,8913,8955,8956,8972,8974,8980,8983,8987,8988,8989,8990,8991,8992,8994,8996,8997,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9019,9020,9022,9025,9030,9031,9036,9038,9039,9040,9043,9050,9053,9060,9061,9068,9070,9071,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9105,9110,9111,9112,9113,9119,9131,9152,9168,9180,9182,9188,9190,9191,9192,9197,9198,9200,9201,9207,9212,9220,9224,9231,9290,9300,9301,9302,9333,9409,9415,9418,9437,9443,9444,9448,9485,9494,9500,9501,9502,9503,9504,9507,9512,9517,9527,9535,9541,9542,9575,9593,9594,9595,9600,9618,9621,9643,9666,9673,9696,9704,9718,9800,9801,9815,9836,9845,9876,9877,9878,9888,9889,9898,9900,9901,9909,9910,9912,9914,9917,9918,9919,9922,9929,9941,9943,9944,9968,9977,9980,9981,9986,9988,9989,9990,9991,9992,9995,9997,9998,9999,10000,10001,10002,10003,10004,10005,10007,10008,10009,10010,10011,10012,10016,10017,10021,10022,10023,10024,10025,10034,10038,10040,10050,10051,10056,10057,10058,10060,10066,10068,10069,10070,10078,10080,10082,10083,10086,10087,10088,10089,10098,10099,10101,10111,10118,10152,10154,10160,10180,10200,10215,10243,10250,10255,10333,10443,10566,10616,10617,10621,10626,10628,10629,10777,10778,10873,11000,11001,11080,11110,11111,11158,11180,11211,11212,11324,11347,11362,11366,11372,11381,11660,11967,12000,12001,12006,12018,12021,12059,12174,12215,12262,12265,12315,12333,12345,12346,12380,12443,12452,12881,13333,13382,13456,13722,13724,13782,13783,13988,14000,14007,14238,14338,14441,14442,14549,15000,15001,15002,15003,15004,15018,15080,15400,15402,15580,15660,15672,15693,15698,15742,15801,15888,16000,16001,16012,16016,16018,16080,16113,16580,16705,16788,16800,16851,16929,16992,16993,17000,17003,17071,17095,17173,17595,17777,17877,17988,18000,18001,18002,18004,18008,18018,18040,18060,18080,18081,18082,18085,18088,18090,18098,18101,18103,18181,18264,18765,18801,18803,18880,18881,18888,18889,18988,19000,19001,19010,19045,19080,19101,19244,19283,19315,19350,19780,19801,19842,19900,19994,20000,20001,20002,20005,20021,20022,20031,20046,20052,20140,20142,20151,20153,20165,20200,20202,20221,20222,20720,20806,20808,20828,20992,21000,21080,21188,21245,21501,21502,21571,21792,21900,22080,22222,22228,22343,22480,22580,22939,23052,23352,23380,23454,23458,23502,23796,24444,24800,25006,25024,25734,25735,26000,26214,26470,27000,27017,27352,27353,27355,27356,27357,27715,27779,28017,28018,28080,28099,28201,28211,28214,28280,28780,29672,29798,29831,30000,30001,30005,30015,30025,30030,30058,30082,30088,30551,30704,30718,30951,31000,31038,31082,31188,31337,31727,31945,32766,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,32791,32792,32803,32816,32822,32835,33354,33453,33554,33899,34440,34571,34572,34573,34899,35500,35513,37006,37839,38000,38037,38080,38086,38185,38188,38292,38443,38501,38517,38888,39136,39376,39659,40000,40001,40069,40080,40193,40310,40811,40911,41064,41474,41511,41516,41523,42424,42510,43651,44176,44334,44401,44442,44443,44445,44501,44709,45100,45149,45177,45692,46200,46996,47078,47088,47544,47583,48080,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49164,49165,49167,49168,49171,49175,49176,49186,49195,49236,49400,49401,49705,49960,49999,50000,50001,50002,50003,50006,50030,50045,50050,50060,50070,50075,50080,50090,50100,50240,50300,50389,50500,50636,50800,51103,51106,51191,51413,51493,52660,52673,52710,52735,52822,52847,52848,52849,52850,52851,52853,52869,53211,53313,53314,53535,54045,54328,55020,55055,55056,55070,55351,55352,55555,55576,55600,55858,56688,56737,56738,57294,57665,57797,57880,58000,58001,58002,58031,58060,58080,58083,58124,58630,58632,58838,58898,59009,59093,59110,59200,59201,59202,59777,59999,60000,60010,60020,60022,60030,60080,60101,60123,60146,60443,60465,60642,61081,61532,61613,61616,61900,61999,62078,63331,64623,64680,65000,65001,65055,65129,65310,65389,65486,65493,65533"\n    synPorts = str.Join(str.FilterPorts("1-65535",tcpPorts), ",")\n} else {\n    synPorts = str.Join(str.FilterPorts(synPorts,tcpPorts), ",")\n}\n\ntcpOps = []\ntcpOps = append(tcpOps, servicescan.active(true))\n\ntcpOps = append(tcpOps, servicescan.concurrent(50))\ntcpOps = append(tcpOps, servicescan.maxProbes(4))\n\ntcpOps = append(tcpOps, servicescan.probeTimeout(5.0))\n\ntcpOps = append(tcpOps, servicescan.all())\n\n// 设置排除端口和主机\nif excludePorts != "" {\n    yakit.Info("设置排除端口：%v", excludePorts)\n    tcpOps = append(tcpOps, servicescan.excludePorts(excludePorts))\n}\nif excludeHosts != "" {\n    yakit.Info("设置排除主机：%v", excludeHosts)\n    tcpOps = append(tcpOps, servicescan.excludeHosts(excludeHosts))\n}\n\nsynPortsList = str.ParseStringToPorts(synPorts)\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\nyakit.Info("SYN Port 端口个数 ：%v",len(synPortsList))\nyakit.Info("TCP Port 端口个数 ：%v",len(tcpPortsList))\nyakit.Info("扫描参数设置完成，准备扫描~")\n\n\nvar synscanEnable = false\ntry {\n    yakit.Info("检测 SYN 扫描是否可用中")\n    for res in synscan.Scan("127.0.0.1", "80", synscan.wait(1))~ {  }\n    \n    synscanEnable = true\n    // yakit.StatusCard("SYN 扫描", "可用")\n} catch err {\n    yakit.Info("SYN 扫描不可用，原因是：%v", err)\n}\n\n\n\nbruteOpt = []\n\nbruteOpt = append(bruteOpt, brute.minDelay(1), brute.maxDelay(5))\n\nbruteOpt = append(bruteOpt, brute.finishingThreshold(1))\nbruteOpt = append(bruteOpt, brute.concurrentTarget(20))\nbruteOpt = append(bruteOpt, brute.concurrent(1))\n\nbruteWg = sync.NewSizedWaitGroup(10)\n\nbruteScan = func(result) {\n    bruteWg.Add()\n    go func() {\n      \tdefer bruteWg.Done()\n        bruteType = ""\n        if result.GetServiceName() == "exasoftport1" {\n            return\n        }\n        \n        for _, bt := range brute.GetAvailableBruteTypes() {\n            if result.GetServiceName().Lower().Contains(bt) || bt.Contains(result.GetServiceName().Lower()) {\n                bruteType = bt\n                break\n            }\n            \n        }\n        \n\n        if bruteType == "" {\n            return\n        }\n        \n\n        defaultusers = []\n        defaultpass = []\n\n        if bruteType == "ftp" {\n            defaultusers = ["ftp", "www", "anonymous", "admin"]\n            defaultpass = ["admin", "admin123", "123456"]\n        } else if bruteType == "memcached" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "123456"]\n        } else if bruteType == "mongodb" {\n            defaultusers = ["root", "admin", "mongodb"]\n            defaultpass = ["root", "admin123", "root@123", "123456"]\n        } else if bruteType == "mssql" {\n            defaultusers = ["root", "admin", "mssql"]\n            defaultpass = ["root", "admin123", "root@123", "admin", "123456"]\n        } else if bruteType == "mysql" {\n            defaultusers = ["mysql", "root", "admin"]\n            defaultpass = ["root", "123456", "admin123", "admin", "root@123"]\n        } else if bruteType == "postgres" {\n            defaultusers = ["postgres", "root", "admin"]\n            defaultpass = ["root", "admin", "123456"]\n        } else if bruteType == "rdp" {\n            defaultusers = ["admin", "administrator", "root", "guest"]\n            defaultpass = ["administrator", "guest", "admin", "123456"]\n        } else if bruteType == "redis" {\n            defaultusers = ["redis"]\n            defaultpass = ["redis", "123456"]\n        } else if bruteType == "smb" {\n            defaultusers = ["administrator", "admin", "test", "guest", "system", "root", "sa"]\n            defaultpass = ["admin123!@#", "admin", "admin123", "admin@123", "admin#123", "123456", "root@123"]\n        } else if bruteType == "snmp" {\n            defaultusers = ["snmp"]\n            defaultpass = ["public", "private", "0", "0392a0", "1234", "2read", "4changes"]\n        } else if bruteType == "ssh" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "telnet" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "tomcat" {\n            defaultusers = ["manager", "tomcat"]\n            defaultpass = ["tomcat", "manager"]\n        } else if bruteType == "vnc" {\n            defaultusers = ["vnc"]\n            defaultpass = ["123456", "admin", "root"]\n        //} else if bruteType == "oracle" {\n          //  defaultusers = ["sys", "system", "oracle"]\n            //defaultpass = ["sys", "system", "oracle", "123456", ""]\n        } else if bruteType == "rtsp" {\n            defaultusers = ["admin"]\n            defaultpass = ["12345", "123456", ""]\n        } else {\n          \treturn\n        }\n        \n\n        uL = make([]string)\n        pL = make([]string)\n\n        uL = append(uL, defaultusers...)\n\n        pL = append(pL, defaultpass...)\n\n        bruteTasks := len(uL) * len(pL)// 计算爆破任务数量        \n\n        addr := str.HostPort(result.Target, result.Port)\n        yakit.Info("Start Load Bruter for %s: %s", bruteType, addr)\n\n        instance, err := brute.New(string(bruteType), brute.userList(uL...), brute.passList(pL...), brute.debug(true), \n                                   brute.okToStop(true), bruteOpt...)\n        if err != nil {\n            yakit.Error(\n                "构建弱口令与未授权扫描失败：%v", \n                err, \n            )\n            return\n        }\n        \n\n        res, err := instance.Start(addr)\n        if err != nil {\n            yakit.Error("输入目标失败：%v", err)\n            return\n        }\n        \n\n        riskTarget = addr\n        for rt := range res {\n            yakit.Info("rt string %v ", rt.String())\n            if rt == nil {\n                continue\n            }\n            \n\n            if !rt.Ok {\n                continue\n            }\n            \n            if rt.Username == "" && rt.Password == "" {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("未授权访问"), \n                    risk.title(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.titleVerbose(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.description("由于配置不当或管理疏忽，某些服务、接口或应用存在未授权访问的风险。攻击者可以直接访问这些资源而不需要任何身份验证，这可能会导致敏感数据的泄露、系统的滥用或其他恶意行为。"), \n                    risk.solution(`1. 审核所有公开可访问的服务、接口和应用，确保它们都有适当的访问控制。\n2. 使用身份验证机制，如用户名/密码、API密钥或OAuth。\n3. 定期监控和审查访问日志，以检测任何可疑或未授权的活动。`), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            } else {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("弱口令"), \n                    risk.description("网站管理、运营人员由于安全意识不足，为了方便、避免忘记密码等，使用了非常容易记住的密码，或者是直接采用了系统的默认密码等。攻击者利用此漏洞可直接进入应用系统或者管理系统，从而进行系统、网页、数据的篡改与删除，非法获取系统、用户的数据，甚至可能导致服务器沦陷。"), \n                    risk.solution("用户层面 : 不要使用常见的弱口令作为密码,不要多个系统或者社交账号使用同一套密码,定期修改密码,建议使用包含随机值的或者随机生成的字符串作为系统密码"), \n                    risk.title(sprintf(\n                        "Weak Password[%v]：%v user(%v) pass(%v)", \n                        rt.Type, \n                        rt.Target, \n                        rt.Username, \n                        rt.Password, \n                    )), \n                    risk.titleVerbose(sprintf("弱口令[%v]：%v user(%v) pass(%v)", rt.Type, rt.Target, rt.Username, \n                                              rt.Password)), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            }\n            \n        }\n    }()\n}\n\nhandleServiceScanResult = func(result) {\n\n    manager.HandleServiceScanResult(result)\n    if enableBruteFlag && len(result.GetServiceName()) != 0 {\n        serviceName = result.GetServiceName()\n        yakit.Info("Start Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n        bruteScan(result)\n        yakit.Info("End Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n    }\n}\n\naliveHostCountList = []\n\n\nOpenPortCount = 0\nopenPortCountLock = sync.NewLock()\naddOpenPortCount = func() {\n    openPortCountLock.Lock()\n    defer openPortCountLock.Unlock()\n    OpenPortCount++\n}\n\nruntimeID = os.Getenv("YAK_RUNTIME_ID")\n\nfunc handleTCP(targets) {\n    try {\n        for result in servicescan.Scan(targets, tcpPorts, tcpOps...)~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            \n            yakit.Info("GOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err {\n        yakit.Error("处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\nfunc handleSYN(targets){\n\n    try {\n        for result in servicescan.ScanFromSynResult(\n            synscan.Scan(targets, synPorts, \n                    synscan.excludePorts(tcpPorts),\n                    synscan.concurrent(synConcurrent),\n                )~, \n                tcpOps..., \n            )~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            yakit.Info("SYNGOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err { \n        yakit.Error("SYN 处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\n\n\n\n\ntargets = str.ParseStringToHosts(targetRaw)\n\ninfo = {}\n\nalive = ""\n\nfor res := range ping.Scan(targetRaw, pingOpt...) {\n    if res.Ok {\n        alive += res.IP + ","\n    }\n}\n\nlog.Info("ping res %s",alive)\n\naliveTargets = str.ParseStringToHosts(alive)\n\n\ninfo["runtime_id"] = runtimeID\ninfo["host_total"] = len(targets)\ninfo["port_total"] = len(synPortsList) + len(tcpPortsList)\ninfo["plugins"] = len(pluginNames)\n\ninfoJson = json.dumps(info)\n\ndb.SetKey("JznQXuFDSepeNWHbiLGEwONiaBxhvj_SERVER_SCAN_MANAGER", infoJson)\n\ntargetBatch = ""\ncount := 0\nwgTCP := sync.NewSizedWaitGroup(50)\n\nfor _, target = range aliveTargets{\n    currentTarget = target\n\n    if count > 0 {\n        targetBatch += "," + currentTarget\n    } else {\n        targetBatch = currentTarget\n    }\n    count++\n\n    if count == 50 {\n        wgTCP.Add()\n        go func {\n            defer wgTCP.Done()\n            handleTCP(targetBatch)\n        }\n        if synscanEnable {\n            handleSYN(targetBatch)\n        }\n        targetBatch = ""\n        count = 0\n    }\n}\nlog.Info("targetBatch %s", targetBatch)\n\nif count > 0 {\n    wgTCP.Add()\n    go func {\n        defer wgTCP.Done()\n        handleTCP(targetBatch)\n    }\n    if synscanEnable {\n        handleSYN(targetBatch)\n    }\n}\n\nif synscanEnable {\n    yakit.StatusCard("SYN", "DONE")\n}\n\nwgTCP.Wait()\n\nhostCountSec = len(aliveHostCountList)\n\n\nif hostCountSec != 0 {\n    // 根据存活 ip + (加载成功的插件数 * 2s)/concurrent  + 开放端口数\n    // 定时器，超过一定时间，就扫描结束\n    waitTimeSec = hostCountSec + (loadPluginFinished * 2)/20 + OpenPortCount\n    if waitTimeSec < 10 {\n        waitTimeSec = 60\n    }\n  \tyakit.Info("waitTimeSec %v", waitTimeSec)\n    time.AfterFunc(waitTimeSec * 1000 * 1000 * 1000, func() {\n        yakit.SetProgress(1)\n        yakit.Info("AfterFunc 本次扫描任务已完成。")\n        os.Exit(0)\n    })\n}\nbruteWg.Wait()\nmanager.Wait()',
        script_type: '端口与漏洞扫描',
        tags: ['distributed-script'],
        type: 'CVE合规检测',
    },
    {
        description: '只进行SYN扫描',
        disallow_scheduled: true,
        prompt_args: [
            {
                explain: '',
                key: 'target',
                value: '',
            },
            {
                explain: 'bool 类型，是否启用弱口令检测',
                key: 'enable-brute',
                value: '',
            },
            {
                explain:
                    '端口，当输入 1-65535 时，会分配 syn 和 tcp 扫描全端口',
                key: 'ports',
                value: '',
            },
        ],
        script: '// 重构SYN-20240718 go0p\n\nyakit.AutoInitYakit()\nloglevel(`info`)\n\n/*\n创建插件:\n   1. 插件的执行状态需要注意：加载成功与否？\n*/\n\n\ntargetRaw = cli.String("target",cli.setRequired(true))\n\npluginsStr = cli.String("plugins",cli.setRequired(true))\n\n// host alive scan\nskippedHostAliveScan = cli.String("skipped-host-alive-scan",cli.setDefault("false"))\nhostAliveConcurrent = cli.Int("host-alive-concurrent", cli.setDefault(20), cli.setRequired(false))\nhostAliveTimeout = cli.Float("host-alive-timeout", cli.setDefault(5.0), cli.setRequired(false))\nhostAliveTCPPorts = cli.String("host-alive-ports", cli.setDefault("80,22,443"), cli.setRequired(false))\n\nskippedHostAliveScanFlag = false\n\nif skippedHostAliveScan == "true" {\n    skippedHostAliveScanFlag = true\n}\n\n\npluginStatusMap = {};\npluginNames = str.Split(pluginsStr, ",")\nyakit.Info("开始创建漏洞扫描管理器")\nmanager, err := hook.NewMixPluginCaller()\nif err != nil {\n    yakit.Error("创建失败：%v", err)\n}\n\nmanager.SetDividedContext(true)\nmanager.SetConcurrent(20)\n\nloadPluginFinished = 0\nx.Foreach(pluginNames, func(i) {\n    // 插件加载状态\n    statusName = "加载中"\n    err = manager.LoadPlugin(i)\n    if err != nil {\n        yakit.Info("加载插件【%v】失败：%v", i, err)\n        statusName = "加载失败"\n    } else {\n        loadPluginFinished++\n\n        yakit.Info(i + " [加载成功]")\n\t   yakit.Info(sprintf("涉及扫描插件：%v个", len(pluginNames)))\n        statusName = "加载成功"\n    }\n    pluginStatusMap[i] = [i, statusName]\n})\n\n\n\n\npingOpt = []\n\nenableBrute = cli.String("enable-brute",cli.setDefault("false"))\n\n\nenableBruteFlag = false\n\nif enableBrute == "true" {\n    enableBruteFlag = true\n}\n\nif skippedHostAliveScan {\n    pingOpt = append(pingOpt, ping.skip(skippedHostAliveScanFlag))\n}\n\nif hostAliveTimeout > 0 {\n    pingOpt = append(pingOpt, ping.timeout(hostAliveTimeout))\n}\n\n\nif hostAliveConcurrent > 0 {\n    pingOpt = append(pingOpt, ping.concurrent(hostAliveConcurrent))\n}\n\n\nif len(hostAliveTCPPorts) > 0 {\n    pingOpt = append(pingOpt, ping.tcpPingPorts(hostAliveTCPPorts))\n}\n\nsynConcurrent = cli.Int("syn-concurrent", cli.setDefault(5000))\n\nexcludeHosts = cli.String("exclude-hosts")\nexcludePorts = cli.String("exclude-ports")\n\ntop100 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018"\n\ntcpPorts = cli.String("ports", cli.setDefault(top100))\n\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\n\nif len(tcpPortsList) == 0{\n    tcpPorts = top100\n}\n\n// top 5000 ports\ndefSynPorts = "1-4,6-17,19-35,37-38,40,42-45,47-60,63,65-104,106,108-120,122-125,127-130,132-133,135-139,141-146,148-151,156-158,161-163,165,168,173-174,176-177,179-182,184-185,189-194,196,199-202,204-206,209-214,216-217,219-226,228-231,233-238,243,247-262,264-265,267-268,270-271,273,276-277,280,284,288-289,293-295,300-301,303,305-306,308,311,315-316,322,325-326,329,333-334,336-337,340,343,346,350-353,355,358,360-362,364,366,369-370,372-373,379-380,383,388-389,391-392,395,397,399-404,406-408,410-420,422-423,425,427-428,432-435,437-454,456-458,460,462,464-466,470,472-475,479-481,485-487,491-493,496-497,500-502,505,507,509-516,518-519,522-528,530,533-536,538,540-545,548,552-557,560-561,563-564,568-572,577-578,580,582-583,587,590-591,593,596,598-649,651-670,672-678,680-692,694-771,773-916,918-939,941-1114,1116-1119,1121-1128,1130-1132,1134-1139,1141-1145,1147-1154,1156-1159,1162-1169,1173-1176,1178-1180,1182-1192,1194-1196,1198-1201,1204,1207-1218,1220-1223,1228-1229,1233-1234,1236,1239-1241,1243-1244,1247-1251,1259,1261-1262,1264,1268,1270-1272,1276-1277,1279,1282,1287,1290-1291,1296-1297,1299-1303,1305-1312,1314-1319,1321-1322,1324,1327-1328,1330-1331,1334,1336-1340,1346-1374,1376,1379-1391,1393-1405,1407-1414,1416-1420,1422-1427,1429-1430,1432-1446,1448-1451,1453-1459,1461-1462,1464-1467,1469-1470,1472-1476,1479-1480,1482-1484,1486,1488,1491-1503,1505-1511,1513,1515-1519,1521-1529,1531-1533,1535,1537-1545,1547-1552,1556,1558-1560,1565-1566,1569,1580,1583-1584,1592,1594,1598,1600,1605,1607,1615,1620,1622,1627,1631-1632,1635,1638,1641,1645,1650-1652,1658,1661-1664,1666-1668,1670-1672,1677,1680,1683,1687-1688,1691,1694,1699-1701,1703,1707-1709,1711-1713,1715,1717-1723,1730,1735-1736,1745,1750,1752-1753,1755,1759,1761-1763,1782-1783,1785,1791-1792,1796,1799-1801,1805-1808,1811-1812,1814,1823,1825,1827,1832,1835,1839-1840,1846,1852,1858,1860-1864,1870-1871,1875,1883,1885,1889,1900-1901,1906,1910-1912,1914,1918,1924-1925,1927,1935,1947,1954,1956,1958,1964-1965,1967,1971-1977,1979,1981,1984,1986-2016,2018-2028,2030-2031,2033-2035,2038,2040-2049,2053-2054,2060,2062,2064-2065,2067-2070,2074,2080-2084,2086-2087,2095-2096,2099-2108,2111-2112,2115,2119-2121,2124,2126,2132,2134-2135,2142,2144,2148,2150,2154,2156-2158,2160-2161,2165,2170,2179,2187,2190-2191,2196-2197,2200-2201,2203,2216,2222,2224,2231-2232,2241,2248,2250-2251,2253,2255,2260-2262,2265,2269-2271,2280,2288,2290-2292,2296,2300-2302,2304,2306-2307,2312-2313,2323,2325-2326,2330,2335,2340-2341,2357,2366,2371-2372,2375-2376,2381-2383,2386-2387,2391-2394,2399,2401-2403,2405,2409-2410,2418,2425-2426,2430-2433,2435-2436,2438-2440,2449,2456,2463,2470,2472,2474,2492-2493,2500-2501,2505,2522,2525,2529-2532,2537,2539,2542,2550-2551,2554,2557-2558,2564,2567-2569,2573,2576,2580,2583-2584,2595-2596,2598-2602,2604-2610,2622-2623,2627-2628,2631,2638,2644,2655,2657-2659,2670,2675,2679,2691,2696,2700-2704,2706,2710-2712,2717-2718,2721,2723,2725,2728-2729,2734,2737,2739,2766,2771,2784,2800,2802,2804-2806,2809,2811-2812,2821,2847,2850,2862-2863,2869,2875-2876,2880,2882,2888-2889,2898,2901-2903,2907-2910,2915,2920,2930,2948-2949,2957-2958,2967-2968,2973,2977-2978,2984,2987-2989,2991,2993-2994,2997-2998,3000-3003,3005-3007,3011-3014,3017-3018,3023,3025,3030-3031,3040,3045,3049-3050,3052,3057,3061-3064,3071,3073-3074,3077,3080,3086,3089,3098,3102-3103,3111,3118-3119,3121,3128,3141,3146,3158,3160,3162,3167-3168,3175,3185,3190,3200,3207,3210-3212,3217,3219-3221,3230-3231,3233,3240-3241,3243,3245,3249,3251,3260-3261,3263-3264,3268-3269,3280-3281,3283,3291-3292,3299-3301,3304,3306-3311,3313-3314,3317-3319,3322-3325,3333-3334,3346,3351,3359,3362-3363,3365,3367-3372,3374-3376,3380,3388-3390,3396-3400,3404,3410,3413-3415,3419,3421,3423-3425,3427,3430,3438-3439,3443,3456-3457,3459,3468,3474,3476,3478-3479,3482-3483,3485-3486,3491-3493,3495,3497,3503,3505-3506,3509-3511,3513-3515,3517,3519-3521,3526-3527,3530-3532,3534,3541,3544,3546-3547,3549,3551-3552,3555,3563,3577,3579-3580,3584,3586,3590,3599-3603,3606,3608,3615,3621-3622,3632-3633,3636-3637,3646-3647,3651-3654,3656,3658-3659,3663-3664,3669-3670,3672,3674,3676,3680-3681,3683-3684,3686,3689-3690,3696-3697,3700,3702-3703,3708,3712-3713,3716-3717,3720,3722-3724,3726,3728,3731,3734,3737-3738,3741-3742,3749,3752,3754,3763,3765-3766,3784,3786-3788,3790-3793,3795-3796,3798-3801,3803,3805-3814,3816-3817,3820,3823-3828,3830-3831,3834-3835,3837,3839-3840,3842,3845-3854,3856-3861,3863,3865-3872,3876-3880,3882-3885,3888-3890,3894-3895,3897,3899-3902,3904-3909,3911,3913-3916,3918-3920,3922-3923,3925,3928-3931,3935-3937,3940-3941,3943-3946,3948-3949,3952,3956-3957,3959,3961-3964,3967-3969,3971-3972,3975,3979-3986,3989-4010,4015-4020,4022,4024-4025,4029,4031-4032,4034-4036,4039-4040,4045,4049-4050,4052,4056,4058,4065,4070,4072,4080,4087,4090,4094-4096,4100-4101,4111-4113,4118-4121,4123,4125-4126,4129,4132-4133,4135,4141,4143-4147,4156-4158,4161,4164-4165,4170,4174,4176-4177,4184-4185,4188,4190,4192,4199-4300,4302,4307,4321-4323,4325,4328,4333,4342-4343,4355-4358,4368-4369,4374-4376,4384,4388-4389,4401,4407,4414-4415,4417-4418,4422-4423,4426,4430,4433,4442-4447,4449,4454,4464,4471,4476,4480,4500,4516-4517,4530,4534,4537-4538,4545,4550,4555,4557-4559,4567,4570,4599-4602,4606,4609,4644,4649,4658,4660,4662,4665,4672,4683,4687,4689,4700,4711-4713,4725,4738,4745,4760,4767,4770-4771,4778,4786,4789,4793,4800,4819,4827,4845,4847-4848,4850,4859-4860,4867,4875-4877,4879,4881-4882,4888-4889,4899-4900,4903,4912,4931,4949-4950,4953,4987,4991,4998-5017,5020-5021,5023,5026-5027,5030,5033,5040,5046,5048,5050-5055,5060-5061,5063,5066,5070,5074,5080-5081,5087-5088,5090,5095-5096,5098,5100-5102,5111,5114-5115,5120-5122,5125,5133,5137,5145-5147,5151-5153,5161-5162,5164,5166,5190-5191,5193,5195-5197,5200-5203,5212,5214,5219,5221-5223,5225-5226,5232-5235,5242,5250,5252,5259,5261,5269,5279-5281,5291,5298,5300-5303,5306,5308,5320-5321,5339,5344,5347,5349,5353,5357-5358,5363,5370,5377,5397,5400,5405-5406,5414,5416-5417,5423,5431-5433,5440-5442,5444,5450,5457-5458,5462-5463,5470-5475,5490,5500-5502,5510,5520,5530,5544,5550,5552-5555,5557,5560,5566,5580-5583,5611-5612,5620-5622,5629,5631-5633,5637-5639,5646,5665-5667,5670,5672,5675,5678-5680,5705,5711,5713-5714,5717-5718,5721-5723,5730,5732,5734,5737,5743-5744,5747-5748,5769-5770,5780,5793,5800-5804,5806-5808,5810-5812,5814-5815,5817-5818,5820-5827,5831,5834,5836,5838-5841,5845,5848-5850,5852-5854,5858-5860,5862,5868-5869,5871,5874-5875,5877-5878,5881,5887-5888,5899-5912,5914-5915,5917-5918,5920-5927,5931,5934,5936,5938-5940,5945,5948-5950,5952-5954,5958-5963,5966,5968-5969,5971,5974-5975,5977-5978,5981,5985-5990,5997-6063,6065,6067-6068,6077,6083,6085,6090-6091,6100-6101,6103,6105-6106,6110-6116,6118,6120-6121,6123,6126,6129-6130,6141-6147,6156,6161,6203,6222,6247,6250-6252,6259,6273-6274,6306,6309-6310,6323-6324,6346-6347,6349-6350,6379,6389,6400-6401,6412,6418-6419,6442,6481,6483,6500,6502-6504,6510,6514,6520,6535,6543-6544,6547-6548,6550-6551,6565-6567,6579-6580,6588,6600,6602,6606,6619,6626,6628,6644,6646-6647,6650,6662,6665-6670,6672-6673,6678,6689,6692,6699-6701,6709-6711,6725,6732,6734,6779-6780,6786-6789,6792,6839,6877,6881,6888,6896-6897,6901,6920,6922,6936,6942,6956,6969,6972-6973,7000-7012,7015-7016,7019,7024-7025,7033,7043,7050-7051,7067-7068,7070-7072,7080,7088,7092,7099-7104,7106,7119,7121,7123,7173,7184,7200-7201,7218,7231,7236,7241,7272-7273,7278,7281,7300-7359,7400,7402,7411,7435,7438,7443,7451,7456,7464,7471,7496,7500-7501,7512,7548,7553,7555,7560,7566,7588,7597,7600,7625,7627-7628,7631,7634,7637,7654,7676-7677,7685,7688,7725,7727,7734,7741,7744,7749,7770-7772,7777-7778,7780,7788-7789,7800,7802,7813,7830,7852-7854,7872,7878,7887,7895,7900-7903,7911,7913,7920-7921,7929,7932-7933,7937-7938,7975,7981-7982,7998-8003,8005-8011,8014-8016,8018-8019,8021-8023,8025,8029,8031,8034,8037,8041-8042,8045,8050,8052,8060,8064,8066,8076,8080-8090,8092-8093,8095,8097-8100,8110,8116,8118,8123,8133,8140,8144,8180-8182,8189,8192-8194,8199-8202,8222,8232,8243,8245,8248,8254-8255,8268,8273,8280,8282,8290-8295,8300,8308,8320-8321,8333,8339,8383,8385,8400-8405,8409,8443,8445,8451-8455,8470-8474,8477,8479,8481,8484,8500,8515,8530-8531,8539-8540,8555,8562,8600-8601,8621,8640,8644,8648-8649,8651-8652,8654-8655,8658,8673,8675-8676,8680,8686,8699,8701,8736,8752,8756,8765-8766,8770,8772,8778,8790,8798,8800-8801,8808,8843,8865,8873,8877-8880,8882-8883,8887-8889,8892,8898-8900,8912,8925,8937,8953-8954,8980,8987,8989-8991,8994,8996,8999-9005,9009-9011,9013,9020-9022,9037,9040,9044,9050-9051,9061,9065,9071,9080-9081,9084,9086,9090-9092,9098-9107,9110-9111,9125,9128,9130-9131,9133,9152,9160-9161,9170,9183,9191,9197-9198,9200-9207,9210-9211,9220,9281-9282,9284,9287,9290,9293,9300,9306,9312,9333,9343,9351,9364,9400,9409,9415,9418,9443-9444,9454,9464,9478,9485,9493,9500-9503,9513,9522,9527,9535-9536,9555,9575,9583,9592-9595,9598,9600,9612-9613,9616,9618-9621,9628-9629,9643,9648,9654,9661,9665-9668,9673-9674,9679-9680,9683,9694,9700,9745,9762,9777,9800,9802,9812,9814-9815,9823,9825-9826,9830,9844,9875-9878,9898,9900-9901,9908-9912,9914-9915,9917,9919,9925,9929,9941,9943-9944,9950,9968,9971,9975,9978-9979,9988,9990-9992,9995,9998-10012,10018-10020,10022-10025,10034-10035,10042,10045,10050-10051,10058,10064,10082-10083,10093,10100-10101,10104,10107,10115,10160-10162,10180,10200,10215,10238,10243,10245-10246,10255,10261,10280,10338,10347,10357,10387,10414,10443,10494,10500,10509,10529,10535,10550-10556,10565-10567,10601-10602,10616-10617,10621,10626,10628-10629,10699,10754,10778,10842,10852,10873,10878,10900,11000-11001,11003,11007,11019,11026,11031-11033,11089,11100,11110-11111,11161-11165,11171,11173,11180,11200,11208,11224,11250,11288,11296,11371,11401,11552,11600,11697,11735,11813,11862-11863,11876-11877,11940,11967,11971,12000-12002,12005-12006,12009,12012-12013,12019,12021,12031,12034,12059,12077,12080,12090,12096-12097,12121,12132,12137,12146,12156,12171,12174,12192,12215,12225,12240,12243,12251,12262,12265,12271,12275,12296,12321-12322,12340,12345-12346,12380,12414,12452,12699,12702,12753,12766,12865,12891-12892,12955,12962,13017,13093,13130,13132,13140,13142,13149,13167,13188,13192-13194,13229,13250,13261,13264-13265,13306,13318,13340,13359,13456,13502,13580,13695,13701,13705,13708-13710,13712-13718,13720-13724,13730,13766,13782-13784,13786,13846,13894,13899,14000-14001,14141,14147,14149-14150,14154,14218,14237-14238,14254,14418,14441-14444,14500,14534,14545,14693,14733,14827,14891,14916,15000-15005,15050,15118,15145,15151,15190-15191,15275,15317,15344-15345,15402,15448,15550,15631,15645-15646,15660,15670,15677,15722,15730,15742,15758,15915,16000-16001,16012,16016,16018,16048,16080,16113,16161-16162,16270,16273,16283,16286,16297,16349,16372,16444,16464,16619,16666,16705,16723-16725,16789,16797,16800,16845,16851,16900-16901,16959,16992-16993,17007,17016-17017,17070,17089,17129,17184-17185,17224-17225,17235,17251,17255,17300,17409,17413,17500,17595,17700-17702,17715,17755-17756,17777,17801-17802,17860,17867,17877,17969,17985,17988,17997,18000,18012,18015,18018,18040,18080,18101,18136,18148,18181-18184,18187,18231,18264,18333,18336-18337,18380,18439,18505,18517,18569,18668-18669,18874,18887,18910,18962,18988,19010,19101,19130,19150,19194,19200-19201,19283,19315,19333,19350,19353,19403,19464,19501,19612,19634,19715,19780,19801,19842,19852,19900,19995-19996,20000-20002,20005,20011,20017,20021,20031-20032,20039,20046,20052,20076,20080,20085,20089,20102,20106,20111,20118,20125,20127,20147,20167,20179-20180,20221-20228,20280,20473,20734,20828,20883,20934,20940,20990,21011,21078,21201,21473,21571,21590,21631,21634,21728,21792,21800,21891,21915,22022,22063,22100,22125,22128,22177,22200,22222-22223,22273,22289-22290,22321,22341,22347,22350-22351,22555,22563,22711,22719,22727,22763,22769,22800,22882,22939,22951,22959,22969,23017,23040,23052,23219,23228,23270,23296,23342,23382,23430,23451,23502,23723,23796,23887,23953,24218,24249,24322-24323,24392,24416,24444,24465,24552,24554,24616,24678,24680,24800,24999-25001,25174,25260,25262,25288,25327,25445,25473,25486,25565,25703,25717,25734-25735,25793,25847,25900,26000-26001,26007,26133,26208,26214,26340,26417,26470,26669,26972,27000-27003,27005,27007,27009-27010,27015-27019,27055,27074-27075,27087,27204,27316,27350-27353,27355-27357,27372,27374,27521,27537,27665,27715,27770,27999,28017,28114,28142,28200-28201,28211,28374,28567,28717,28850-28851,28924,28967,29045,29152,29243,29507,29672,29810,29831,30000-30001,30005,30087,30195,30299,30519,30599,30644,30659,30704-30705,30718,30896,30951,31029,31033,31038,31058,31072,31337,31339,31386,31416,31438,31457,31522,31657,31727-31728,32006,32022,32031,32088,32102,32200,32219,32249,32260-32261,32764-32765,32767-32792,32797-32799,32803,32807,32814-32816,32820,32822,32835,32837,32842,32858,32868-32869,32871,32888,32897-32898,32904-32905,32908,32910-32911,32932,32944,32960-32961,32976,33000,33011,33017,33070,33087,33124,33175,33192,33200,33203,33277,33327,33334-33335,33337,33354,33367,33395,33434,33444,33453,33522-33523,33550,33554,33604-33605,33656,33841,33879,33882,33889,33895,33899,34021,34036,34096,34189,34249,34317,34341,34381,34401,34507,34510,34571-34573,34683,34728,34765,34783,34833,34875,35033,35050,35116,35131,35217,35272,35349,35392-35393,35401,35500,35506,35513,35553,35593,35731,35879,35900-35901,35906,35929,35986,36046,36104-36105,36256,36275,36368,36411,36436,36462,36508,36530,36552,36659,36677,36694,36710,36748,36823-36824,36914,36950,36962,36983,37121,37151,37174,37185,37218,37393,37522,37607,37614,37647,37654,37674,37777,37789,37839,37855,38029,38037,38185,38188,38194,38205,38224,38270,38292,38313,38331,38358,38422,38446,38481,38546,38561,38570,38761,38764,38780,38800,38805,38936,39067,39117,39136,39265,39293,39376,39380,39433,39482,39489,39630,39659,39681,39732,39763,39774,39795,39869,39883,39895,39917,40000-40003,40005,40011,40193,40306,40393,40400,40457,40489,40513,40614,40628,40712,40732,40754,40811-40812,40834,40911,40951,41064,41121,41123,41142,41230,41250,41281,41318,41342,41345,41348,41398,41442,41511,41523,41551,41632,41773,41794-41795,41808,42001,42035,42127,42158,42251,42276,42322,42449,42452,42510,42559-42560,42575,42590,42632,42675,42679,42685,42735,42906,42990,43000,43002,43018,43027,43103,43139,43143,43188,43212,43231,43242,43425,43654,43690,43734,43823,43868,44004,44101,44119,44123,44176,44200,44334,44380,44410,44431,44442-44443,44479,44501,44505,44541,44616,44628,44704,44709,44711,44965,44981,45038,45050,45100,45136,45164,45220,45226,45413,45438,45463,45602,45624,45697,45777,45864,45960,45966,46034,46069,46115,46171,46182,46200,46310,46372,46418,46436,46593,46813,46992,46996,47001,47012,47029,47119,47197,47267,47348,47372,47448,47544,47557,47567,47581,47595,47624,47634,47700,47777,47806,47850,47858,47860,47966,47969,48009,48050,48067,48080,48083,48127,48153,48167,48356,48434,48619,48631,48648,48682,48783,48813,48925,48966-48967,48973,49002,49048,49132,49152-49161,49163-49173,49175-49176,49179,49186,49189-49191,49195-49197,49201-49204,49211,49213,49216,49228,49232,49235-49236,49241,49275,49302,49352,49372,49398,49400-49401,49452,49498,49500,49519-49522,49597,49603,49678,49751,49762,49765,49803,49927,49999-50003,50006,50016,50019,50040,50050,50101,50189,50198,50202,50205,50224,50246,50258,50277,50300,50356,50389,50500,50513,50529,50545,50576-50577,50585,50636,50692,50733,50787,50800,50809,50815,50831,50833-50836,50849,50854,50887,50903,50945,50997,51011,51020,51037,51067,51103,51118,51139,51191,51233-51235,51240,51300,51343,51351,51366,51413,51423,51460,51484-51485,51488,51493,51515,51582,51658,51771-51772,51800,51809,51906,51909,51961,51965,52000-52003,52025,52046,52071,52173,52225-52226,52230,52237,52262,52391,52477,52506,52573,52660,52665,52673,52675,52710,52735,52822,52847-52851,52853,52869,52893,52948,53085,53178,53189,53211-53212,53240,53313-53314,53319,53361,53370,53460,53469,53491,53535,53633,53639,53656,53690,53742,53782,53827,53852,53910,53958,54045,54075,54101,54127,54235,54263,54276,54320-54321,54323,54328,54514,54551,54605,54658,54688,54722,54741,54873,54907,54987,54991,55000,55020,55055-55056,55183,55187,55227,55312,55350,55382,55400,55426,55479,55527,55555-55556,55568-55569,55576,55579,55600,55635,55652,55684,55721,55758,55773,55781,55901,55907,55910,55948,56016,56055,56259,56293,56507,56535,56591,56668,56681,56723,56725,56737-56738,56810,56822,56827,56973,56975,57020,57103,57123,57294,57325,57335,57347,57350,57352,57387,57398,57479,57576,57665,57678,57681,57702,57730,57733,57797,57891,57896,57923,57928,57988,57999,58001-58002,58072,58080,58107,58109,58164,58252,58305,58310,58374,58430,58446,58456,58468,58498,58562,58570,58610,58622,58630,58632,58634,58699,58721,58838,58908,58970,58991,59087,59107,59110,59122,59149,59160,59191,59200-59202,59239,59340,59499,59504,59509-59510,59525,59565,59684,59778,59810,59829,59841,59987,60000,60002-60003,60020,60055,60086,60111,60123,60146,60177,60227,60243,60279,60377,60401,60403,60443,60485,60492,60504,60544,60579,60612,60621,60628,60642,60713,60728,60743,60753,60782-60783,60789,60794,60989,61159,61169-61170,61402,61473,61516,61532,61613,61616-61617,61669,61722,61734,61827,61851,61900,61942,62006,62042,62078,62080,62188,62312,62519,62570,62674,62866,63105,63156,63331,63423,63675,63803,64080,64127,64320,64438,64507,64551,64623,64680,64726-64727,64890,65000,65048,65129,65301,65310-65311,65389,65488,65514"\n\n\nsynPorts = cli.String("syn-ports", cli.setDefault(defSynPorts))\n\nsynPortsList = str.ParseStringToPorts(defSynPorts)\n\nif synPortsList != "" && len(synPortsList) == 0{\n    synPorts = defSynPorts\n}\n\ncli.check()\n\nif len(tcpPortsList) >= 65535 {\n    tcpPorts = "1,3,4,6,7,8,9,13,17,19,20,21,22,23,24,25,26,27,30,32,33,37,42,43,49,53,55,57,59,60,65,66,68,70,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,106,108,109,110,111,113,114,119,122,123,125,127,132,133,135,137,138,139,143,144,146,157,161,163,171,179,180,188,198,199,200,206,208,210,211,212,220,222,223,225,235,250,251,252,254,255,256,257,259,264,268,270,280,299,301,302,306,308,309,311,321,333,340,366,381,388,389,403,406,407,411,416,417,419,421,423,425,427,436,441,442,443,444,445,447,458,464,465,475,481,497,500,502,511,512,513,514,515,517,522,523,524,540,541,543,544,545,548,554,555,556,557,560,563,586,587,590,591,593,600,602,606,610,616,617,621,623,625,631,636,639,641,646,648,655,657,659,660,666,667,668,669,674,683,684,687,688,690,691,700,701,705,709,710,711,713,714,715,720,722,725,726,728,729,730,731,732,733,740,748,749,754,757,758,765,770,777,778,780,782,783,786,787,790,792,795,800,801,802,803,804,805,806,807,808,809,810,811,812,822,823,825,829,839,840,843,846,856,859,860,862,864,866,873,874,877,878,880,888,889,898,900,901,902,903,904,905,911,912,913,916,918,921,922,924,925,928,930,931,943,953,955,956,968,969,971,980,981,983,987,990,992,993,995,996,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1116,1117,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1130,1131,1132,1134,1135,1136,1137,1138,1141,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154,1156,1157,1158,1159,1162,1163,1164,1165,1166,1167,1168,1169,1173,1174,1175,1176,1179,1180,1182,1183,1184,1185,1186,1187,1188,1190,1191,1192,1194,1195,1196,1198,1199,1200,1201,1204,1207,1208,1209,1210,1211,1212,1213,1215,1216,1217,1218,1220,1221,1222,1223,1228,1229,1233,1234,1236,1239,1240,1241,1243,1244,1247,1248,1249,1250,1251,1259,1261,1262,1264,1268,1270,1271,1272,1276,1277,1279,1282,1287,1290,1291,1296,1297,1299,1300,1301,1302,1303,1305,1306,1307,1308,1309,1310,1311,1313,1314,1315,1316,1317,1318,1319,1321,1322,1324,1327,1328,1330,1331,1334,1336,1337,1339,1340,1347,1350,1351,1352,1353,1356,1357,1389,1413,1414,1417,1433,1434,1443,1445,1455,1461,1494,1500,1501,1503,1516,1521,1522,1524,1525,1526,1527,1533,1547,1550,1556,1558,1559,1560,1565,1566,1569,1580,1583,1584,1592,1594,1598,1600,1603,1605,1607,1615,1620,1622,1630,1632,1635,1638,1641,1645,1658,1666,1677,1680,1683,1687,1688,1691,1694,1699,1700,1701,1703,1707,1708,1709,1711,1712,1713,1715,1717,1718,1719,1720,1721,1722,1723,1730,1735,1736,1745,1750,1752,1753,1755,1761,1782,1783,1790,1791,1792,1799,1800,1801,1805,1806,1807,1808,1811,1812,1818,1823,1825,1835,1839,1840,1858,1861,1862,1863,1864,1871,1875,1883,1888,1900,1901,1911,1912,1914,1918,1924,1927,1933,1935,1947,1949,1954,1958,1971,1972,1973,1974,1975,1976,1979,1980,1981,1982,1984,1988,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2020,2021,2022,2025,2030,2031,2033,2034,2035,2038,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2051,2060,2062,2065,2067,2068,2069,2070,2080,2081,2082,2083,2086,2087,2093,2095,2096,2099,2100,2101,2103,2104,2105,2106,2107,2110,2111,2112,2115,2119,2121,2124,2125,2126,2134,2135,2142,2144,2148,2150,2160,2161,2168,2170,2179,2181,2187,2190,2191,2196,2197,2200,2201,2203,2222,2224,2232,2241,2250,2251,2253,2260,2261,2262,2265,2269,2270,2271,2280,2288,2291,2292,2300,2301,2302,2304,2312,2313,2323,2325,2326,2330,2335,2340,2348,2366,2371,2372,2375,2381,2382,2383,2391,2393,2394,2399,2401,2418,2425,2433,2435,2436,2438,2439,2449,2456,2463,2472,2480,2490,2492,2500,2501,2505,2517,2521,2522,2525,2531,2532,2550,2551,2557,2558,2567,2580,2583,2584,2585,2598,2600,2601,2602,2604,2605,2606,2607,2608,2622,2623,2628,2631,2638,2644,2663,2691,2700,2701,2702,2706,2710,2711,2712,2717,2718,2723,2725,2728,2734,2800,2804,2806,2808,2809,2811,2812,2847,2850,2869,2875,2882,2886,2888,2889,2898,2901,2902,2903,2908,2909,2910,2920,2930,2957,2958,2967,2968,2973,2984,2987,2988,2991,2997,2998,3000,3001,3002,3003,3005,3006,3007,3008,3010,3011,3012,3013,3014,3017,3023,3025,3030,3031,3033,3050,3052,3057,3062,3063,3071,3077,3080,3089,3094,3102,3103,3118,3119,3121,3128,3133,3146,3162,3167,3168,3190,3200,3210,3211,3216,3220,3221,3240,3260,3261,3263,3268,3269,3280,3281,3283,3291,3299,3300,3301,3304,3306,3307,3310,3311,3312,3319,3322,3323,3324,3325,3333,3334,3351,3362,3363,3365,3367,3368,3369,3370,3371,3372,3374,3376,3377,3380,3388,3389,3390,3396,3398,3399,3400,3404,3410,3414,3415,3419,3425,3430,3437,3439,3443,3456,3465,3476,3479,3483,3485,3486,3493,3497,3503,3505,3506,3511,3513,3514,3515,3517,3519,3520,3526,3527,3530,3532,3535,3546,3551,3577,3580,3586,3588,3599,3600,3602,3603,3606,3618,3621,3622,3632,3636,3637,3652,3653,3656,3658,3659,3663,3668,3669,3670,3672,3680,3681,3683,3684,3689,3690,3697,3700,3703,3712,3721,3728,3731,3737,3742,3749,3765,3766,3784,3787,3788,3790,3792,3793,3795,3796,3798,3799,3800,3801,3803,3806,3808,3809,3810,3811,3812,3813,3814,3817,3820,3823,3824,3825,3826,3827,3828,3830,3831,3837,3839,3842,3846,3847,3848,3849,3850,3851,3852,3853,3856,3859,3860,3863,3868,3869,3870,3871,3872,3876,3878,3879,3880,3882,3888,3889,3890,3897,3899,3901,3902,3904,3905,3906,3907,3908,3909,3911,3913,3914,3915,3916,3918,3919,3920,3922,3923,3928,3929,3930,3931,3935,3936,3937,3938,3940,3941,3943,3944,3945,3946,3948,3949,3952,3956,3957,3961,3962,3963,3964,3967,3968,3969,3971,3972,3975,3979,3980,3981,3982,3983,3986,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4009,4010,4016,4020,4022,4023,4024,4025,4029,4035,4036,4039,4040,4045,4056,4058,4065,4080,4087,4090,4096,4100,4101,4111,4112,4113,4118,4119,4120,4121,4125,4126,4129,4135,4141,4143,4147,4158,4161,4164,4174,4180,4190,4192,4200,4206,4220,4224,4234,4237,4242,4252,4262,4279,4294,4297,4298,4300,4302,4321,4325,4328,4333,4342,4343,4355,4356,4357,4358,4369,4374,4375,4376,4380,4384,4388,4389,4401,4407,4414,4415,4418,4430,4433,4440,4442,4443,4444,4445,4446,4447,4449,4453,4454,4455,4464,4471,4476,4480,4497,4503,4516,4517,4530,4534,4545,4550,4555,4558,4559,4567,4569,4570,4599,4600,4601,4602,4606,4609,4644,4649,4658,4662,4665,4687,4689,4700,4712,4713,4745,4760,4767,4770,4771,4778,4793,4800,4819,4848,4850,4859,4860,4875,4876,4877,4881,4899,4900,4903,4912,4931,4949,4998,4999,5000,5001,5002,5003,5004,5005,5009,5010,5011,5012,5013,5014,5015,5016,5017,5020,5021,5023,5030,5033,5040,5050,5051,5052,5053,5054,5055,5060,5061,5063,5066,5070,5074,5080,5081,5087,5088,5090,5095,5096,5098,5100,5101,5102,5111,5114,5118,5120,5121,5122,5125,5133,5137,5147,5151,5152,5155,5156,5190,5200,5201,5202,5203,5212,5214,5219,5221,5222,5223,5225,5226,5233,5234,5235,5242,5250,5252,5255,5256,5259,5261,5269,5279,5280,5291,5298,5339,5347,5353,5357,5370,5377,5405,5414,5423,5431,5432,5433,5440,5441,5442,5444,5457,5458,5473,5475,5500,5501,5502,5510,5520,5544,5550,5552,5553,5555,5560,5561,5566,5600,5601,5631,5632,5633,5644,5655,5656,5666,5671,5672,5678,5679,5680,5718,5730,5757,5780,5800,5801,5802,5803,5807,5810,5811,5812,5815,5818,5822,5823,5825,5850,5859,5862,5868,5869,5877,5881,5887,5888,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5909,5910,5911,5914,5915,5918,5922,5925,5938,5940,5950,5952,5959,5960,5961,5962,5963,5966,5968,5981,5987,5988,5989,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6017,6020,6025,6050,6051,6059,6060,6068,6080,6088,6090,6100,6101,6103,6106,6112,6118,6123,6129,6156,6167,6170,6180,6198,6203,6222,6226,6247,6259,6286,6346,6365,6372,6379,6388,6389,6443,6481,6500,6502,6504,6510,6520,6543,6546,6547,6550,6565,6566,6567,6580,6587,6600,6602,6603,6606,6611,6646,6648,6662,6664,6666,6667,6668,6669,6670,6677,6680,6688,6689,6692,6699,6711,6732,6778,6779,6788,6789,6792,6800,6801,6839,6842,6868,6869,6879,6881,6886,6887,6888,6889,6890,6896,6901,6920,6969,6988,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7017,7018,7019,7020,7021,7022,7023,7024,7025,7028,7031,7041,7044,7048,7050,7051,7055,7060,7070,7071,7072,7074,7078,7080,7081,7082,7083,7084,7086,7088,7090,7093,7094,7100,7101,7102,7103,7106,7108,7111,7117,7123,7129,7140,7171,7180,7200,7201,7202,7215,7241,7272,7273,7278,7280,7281,7288,7300,7321,7330,7380,7402,7435,7438,7443,7474,7496,7500,7501,7512,7547,7567,7625,7627,7676,7680,7687,7688,7700,7702,7703,7709,7711,7713,7725,7741,7742,7744,7749,7751,7770,7776,7777,7778,7788,7789,7791,7799,7800,7801,7856,7878,7888,7890,7896,7899,7900,7901,7903,7909,7911,7913,7915,7920,7921,7925,7929,7937,7938,7942,7943,7979,7995,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8060,8061,8062,8064,8065,8066,8067,8068,8069,8070,8071,8073,8075,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8108,8110,8111,8112,8118,8119,8122,8123,8130,8133,8136,8144,8153,8161,8168,8172,8176,8180,8181,8182,8183,8184,8186,8188,8189,8190,8191,8192,8193,8194,8196,8197,8200,8201,8202,8213,8220,8222,8232,8244,8250,8254,8258,8260,8280,8281,8282,8283,8288,8290,8291,8292,8293,8294,8298,8300,8308,8322,8333,8341,8343,8360,8380,8381,8382,8383,8384,8385,8390,8391,8399,8400,8401,8402,8403,8443,8445,8448,8465,8477,8480,8481,8484,8488,8499,8500,8512,8540,8548,8567,8580,8582,8585,8600,8601,8610,8648,8649,8651,8652,8654,8660,8666,8675,8676,8680,8681,8684,8686,8688,8700,8701,8710,8720,8735,8765,8766,8777,8780,8781,8787,8788,8799,8800,8801,8802,8806,8808,8809,8810,8813,8820,8822,8828,8834,8838,8839,8844,8848,8858,8860,8861,8864,8866,8868,8873,8877,8879,8880,8881,8885,8886,8887,8888,8889,8890,8891,8892,8893,8895,8896,8898,8899,8900,8901,8902,8905,8910,8912,8913,8955,8956,8972,8974,8980,8983,8987,8988,8989,8990,8991,8992,8994,8996,8997,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9019,9020,9022,9025,9030,9031,9036,9038,9039,9040,9043,9050,9053,9060,9061,9068,9070,9071,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9105,9110,9111,9112,9113,9119,9131,9152,9168,9180,9182,9188,9190,9191,9192,9197,9198,9200,9201,9207,9212,9220,9224,9231,9290,9300,9301,9302,9333,9409,9415,9418,9437,9443,9444,9448,9485,9494,9500,9501,9502,9503,9504,9507,9512,9517,9527,9535,9541,9542,9575,9593,9594,9595,9600,9618,9621,9643,9666,9673,9696,9704,9718,9800,9801,9815,9836,9845,9876,9877,9878,9888,9889,9898,9900,9901,9909,9910,9912,9914,9917,9918,9919,9922,9929,9941,9943,9944,9968,9977,9980,9981,9986,9988,9989,9990,9991,9992,9995,9997,9998,9999,10000,10001,10002,10003,10004,10005,10007,10008,10009,10010,10011,10012,10016,10017,10021,10022,10023,10024,10025,10034,10038,10040,10050,10051,10056,10057,10058,10060,10066,10068,10069,10070,10078,10080,10082,10083,10086,10087,10088,10089,10098,10099,10101,10111,10118,10152,10154,10160,10180,10200,10215,10243,10250,10255,10333,10443,10566,10616,10617,10621,10626,10628,10629,10777,10778,10873,11000,11001,11080,11110,11111,11158,11180,11211,11212,11324,11347,11362,11366,11372,11381,11660,11967,12000,12001,12006,12018,12021,12059,12174,12215,12262,12265,12315,12333,12345,12346,12380,12443,12452,12881,13333,13382,13456,13722,13724,13782,13783,13988,14000,14007,14238,14338,14441,14442,14549,15000,15001,15002,15003,15004,15018,15080,15400,15402,15580,15660,15672,15693,15698,15742,15801,15888,16000,16001,16012,16016,16018,16080,16113,16580,16705,16788,16800,16851,16929,16992,16993,17000,17003,17071,17095,17173,17595,17777,17877,17988,18000,18001,18002,18004,18008,18018,18040,18060,18080,18081,18082,18085,18088,18090,18098,18101,18103,18181,18264,18765,18801,18803,18880,18881,18888,18889,18988,19000,19001,19010,19045,19080,19101,19244,19283,19315,19350,19780,19801,19842,19900,19994,20000,20001,20002,20005,20021,20022,20031,20046,20052,20140,20142,20151,20153,20165,20200,20202,20221,20222,20720,20806,20808,20828,20992,21000,21080,21188,21245,21501,21502,21571,21792,21900,22080,22222,22228,22343,22480,22580,22939,23052,23352,23380,23454,23458,23502,23796,24444,24800,25006,25024,25734,25735,26000,26214,26470,27000,27017,27352,27353,27355,27356,27357,27715,27779,28017,28018,28080,28099,28201,28211,28214,28280,28780,29672,29798,29831,30000,30001,30005,30015,30025,30030,30058,30082,30088,30551,30704,30718,30951,31000,31038,31082,31188,31337,31727,31945,32766,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,32791,32792,32803,32816,32822,32835,33354,33453,33554,33899,34440,34571,34572,34573,34899,35500,35513,37006,37839,38000,38037,38080,38086,38185,38188,38292,38443,38501,38517,38888,39136,39376,39659,40000,40001,40069,40080,40193,40310,40811,40911,41064,41474,41511,41516,41523,42424,42510,43651,44176,44334,44401,44442,44443,44445,44501,44709,45100,45149,45177,45692,46200,46996,47078,47088,47544,47583,48080,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49164,49165,49167,49168,49171,49175,49176,49186,49195,49236,49400,49401,49705,49960,49999,50000,50001,50002,50003,50006,50030,50045,50050,50060,50070,50075,50080,50090,50100,50240,50300,50389,50500,50636,50800,51103,51106,51191,51413,51493,52660,52673,52710,52735,52822,52847,52848,52849,52850,52851,52853,52869,53211,53313,53314,53535,54045,54328,55020,55055,55056,55070,55351,55352,55555,55576,55600,55858,56688,56737,56738,57294,57665,57797,57880,58000,58001,58002,58031,58060,58080,58083,58124,58630,58632,58838,58898,59009,59093,59110,59200,59201,59202,59777,59999,60000,60010,60020,60022,60030,60080,60101,60123,60146,60443,60465,60642,61081,61532,61613,61616,61900,61999,62078,63331,64623,64680,65000,65001,65055,65129,65310,65389,65486,65493,65533"\n    synPorts = str.Join(str.FilterPorts("1-65535",tcpPorts), ",")\n} else {\n    synPorts = str.Join(str.FilterPorts(synPorts,tcpPorts), ",")\n}\n\ntcpOps = []\ntcpOps = append(tcpOps, servicescan.active(true))\n\ntcpOps = append(tcpOps, servicescan.concurrent(50))\ntcpOps = append(tcpOps, servicescan.maxProbes(4))\n\ntcpOps = append(tcpOps, servicescan.probeTimeout(5.0))\n\ntcpOps = append(tcpOps, servicescan.all())\n\n// 设置排除端口和主机\nif excludePorts != "" {\n    yakit.Info("设置排除端口：%v", excludePorts)\n    tcpOps = append(tcpOps, servicescan.excludePorts(excludePorts))\n}\nif excludeHosts != "" {\n    yakit.Info("设置排除主机：%v", excludeHosts)\n    tcpOps = append(tcpOps, servicescan.excludeHosts(excludeHosts))\n}\n\nsynPortsList = str.ParseStringToPorts(synPorts)\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\nyakit.Info("SYN Port 端口个数 ：%v",len(synPortsList))\nyakit.Info("TCP Port 端口个数 ：%v",len(tcpPortsList))\nyakit.Info("扫描参数设置完成，准备扫描~")\n\n\nvar synscanEnable = false\ntry {\n    yakit.Info("检测 SYN 扫描是否可用中")\n    for res in synscan.Scan("127.0.0.1", "80", synscan.wait(1))~ {  }\n    \n    synscanEnable = true\n    // yakit.StatusCard("SYN 扫描", "可用")\n} catch err {\n    yakit.Info("SYN 扫描不可用，原因是：%v", err)\n}\n\n\n\nbruteOpt = []\n\nbruteOpt = append(bruteOpt, brute.minDelay(1), brute.maxDelay(5))\n\nbruteOpt = append(bruteOpt, brute.finishingThreshold(1))\nbruteOpt = append(bruteOpt, brute.concurrentTarget(20))\nbruteOpt = append(bruteOpt, brute.concurrent(1))\n\nbruteWg = sync.NewSizedWaitGroup(10)\n\nbruteScan = func(result) {\n    bruteWg.Add()\n    go func() {\n      \tdefer bruteWg.Done()\n        bruteType = ""\n        if result.GetServiceName() == "exasoftport1" {\n            return\n        }\n        \n        for _, bt := range brute.GetAvailableBruteTypes() {\n            if result.GetServiceName().Lower().Contains(bt) || bt.Contains(result.GetServiceName().Lower()) {\n                bruteType = bt\n                break\n            }\n            \n        }\n        \n\n        if bruteType == "" {\n            return\n        }\n        \n\n        defaultusers = []\n        defaultpass = []\n\n        if bruteType == "ftp" {\n            defaultusers = ["ftp", "www", "anonymous", "admin"]\n            defaultpass = ["admin", "admin123", "123456"]\n        } else if bruteType == "memcached" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "123456"]\n        } else if bruteType == "mongodb" {\n            defaultusers = ["root", "admin", "mongodb"]\n            defaultpass = ["root", "admin123", "root@123", "123456"]\n        } else if bruteType == "mssql" {\n            defaultusers = ["root", "admin", "mssql"]\n            defaultpass = ["root", "admin123", "root@123", "admin", "123456"]\n        } else if bruteType == "mysql" {\n            defaultusers = ["mysql", "root", "admin"]\n            defaultpass = ["root", "123456", "admin123", "admin", "root@123"]\n        } else if bruteType == "postgres" {\n            defaultusers = ["postgres", "root", "admin"]\n            defaultpass = ["root", "admin", "123456"]\n        } else if bruteType == "rdp" {\n            defaultusers = ["admin", "administrator", "root", "guest"]\n            defaultpass = ["administrator", "guest", "admin", "123456"]\n        } else if bruteType == "redis" {\n            defaultusers = ["redis"]\n            defaultpass = ["redis", "123456"]\n        } else if bruteType == "smb" {\n            defaultusers = ["administrator", "admin", "test", "guest", "system", "root", "sa"]\n            defaultpass = ["admin123!@#", "admin", "admin123", "admin@123", "admin#123", "123456", "root@123"]\n        } else if bruteType == "snmp" {\n            defaultusers = ["snmp"]\n            defaultpass = ["public", "private", "0", "0392a0", "1234", "2read", "4changes"]\n        } else if bruteType == "ssh" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "telnet" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "tomcat" {\n            defaultusers = ["manager", "tomcat"]\n            defaultpass = ["tomcat", "manager"]\n        } else if bruteType == "vnc" {\n            defaultusers = ["vnc"]\n            defaultpass = ["123456", "admin", "root"]\n        //} else if bruteType == "oracle" {\n          //  defaultusers = ["sys", "system", "oracle"]\n            //defaultpass = ["sys", "system", "oracle", "123456", ""]\n        } else if bruteType == "rtsp" {\n            defaultusers = ["admin"]\n            defaultpass = ["12345", "123456", ""]\n        } else {\n          \treturn\n        }\n        \n\n        uL = make([]string)\n        pL = make([]string)\n\n        uL = append(uL, defaultusers...)\n\n        pL = append(pL, defaultpass...)\n\n        bruteTasks := len(uL) * len(pL)// 计算爆破任务数量        \n\n        addr := str.HostPort(result.Target, result.Port)\n        yakit.Info("Start Load Bruter for %s: %s", bruteType, addr)\n\n        instance, err := brute.New(string(bruteType), brute.userList(uL...), brute.passList(pL...), brute.debug(true), \n                                   brute.okToStop(true), bruteOpt...)\n        if err != nil {\n            yakit.Error(\n                "构建弱口令与未授权扫描失败：%v", \n                err, \n            )\n            return\n        }\n        \n\n        res, err := instance.Start(addr)\n        if err != nil {\n            yakit.Error("输入目标失败：%v", err)\n            return\n        }\n        \n\n        riskTarget = addr\n        for rt := range res {\n            yakit.Info("rt string %v ", rt.String())\n            if rt == nil {\n                continue\n            }\n            \n\n            if !rt.Ok {\n                continue\n            }\n            \n            if rt.Username == "" && rt.Password == "" {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("未授权访问"), \n                    risk.title(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.titleVerbose(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.description("由于配置不当或管理疏忽，某些服务、接口或应用存在未授权访问的风险。攻击者可以直接访问这些资源而不需要任何身份验证，这可能会导致敏感数据的泄露、系统的滥用或其他恶意行为。"), \n                    risk.solution(`1. 审核所有公开可访问的服务、接口和应用，确保它们都有适当的访问控制。\n2. 使用身份验证机制，如用户名/密码、API密钥或OAuth。\n3. 定期监控和审查访问日志，以检测任何可疑或未授权的活动。`), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            } else {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("弱口令"), \n                    risk.description("网站管理、运营人员由于安全意识不足，为了方便、避免忘记密码等，使用了非常容易记住的密码，或者是直接采用了系统的默认密码等。攻击者利用此漏洞可直接进入应用系统或者管理系统，从而进行系统、网页、数据的篡改与删除，非法获取系统、用户的数据，甚至可能导致服务器沦陷。"), \n                    risk.solution("用户层面 : 不要使用常见的弱口令作为密码,不要多个系统或者社交账号使用同一套密码,定期修改密码,建议使用包含随机值的或者随机生成的字符串作为系统密码"), \n                    risk.title(sprintf(\n                        "Weak Password[%v]：%v user(%v) pass(%v)", \n                        rt.Type, \n                        rt.Target, \n                        rt.Username, \n                        rt.Password, \n                    )), \n                    risk.titleVerbose(sprintf("弱口令[%v]：%v user(%v) pass(%v)", rt.Type, rt.Target, rt.Username, \n                                              rt.Password)), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            }\n            \n        }\n    }()\n}\n\nhandleServiceScanResult = func(result) {\n\n    manager.HandleServiceScanResult(result)\n    // if enableBruteFlag && len(result.GetServiceName()) != 0 {\n    //     serviceName = result.GetServiceName()\n    //     yakit.Info("Start Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n    //     bruteScan(result)\n    //     yakit.Info("End Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n    // }\n}\n\naliveHostCountList = []\n\n\nOpenPortCount = 0\nopenPortCountLock = sync.NewLock()\naddOpenPortCount = func() {\n    openPortCountLock.Lock()\n    defer openPortCountLock.Unlock()\n    OpenPortCount++\n}\n\nruntimeID = os.Getenv("YAK_RUNTIME_ID")\n\nfunc handleTCP(targets) {\n    try {\n        for result in servicescan.Scan(targets, tcpPorts, tcpOps...)~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            \n            yakit.Info("GOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err {\n        yakit.Error("处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\nfunc handleSYN(targets){\n\n    try {\n        for result in synscan.Scan(targets, synPorts, \n                    synscan.excludePorts(tcpPorts),\n                    synscan.concurrent(synConcurrent),\n                )~ {\n            // if !result.IsOpen() {\n            //     continue\n            // }\n            if result.Host not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Host)\n            }\n            yakit.Info("SYNGOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            // handleServiceScanResult(result)\n        }\n        \n    } catch err { \n        yakit.Error("SYN 处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\n\n\n\n\ntargets = str.ParseStringToHosts(targetRaw)\n\ninfo = {}\n\nalive = ""\n\nfor res := range ping.Scan(targetRaw, pingOpt...) {\n    if res.Ok {\n        alive += res.IP + ","\n    }\n}\n\nlog.Info("ping res %s",alive)\n\naliveTargets = str.ParseStringToHosts(alive)\n\n\ninfo["runtime_id"] = runtimeID\ninfo["host_total"] = len(targets)\ninfo["port_total"] = len(synPortsList) + len(tcpPortsList)\ninfo["plugins"] = len(pluginNames)\n\ninfoJson = json.dumps(info)\n\ndb.SetKey("JznQXuFDSepeNWHbiLGEwONiaBxhvj_SERVER_SCAN_MANAGER", infoJson)\n\ntargetBatch = ""\ncount := 0\nwgTCP := sync.NewSizedWaitGroup(50)\n\nfor _, target = range aliveTargets{\n    currentTarget = target\n\n    if count > 0 {\n        targetBatch += "," + currentTarget\n    } else {\n        targetBatch = currentTarget\n    }\n    count++\n\n    if count == 50 {\n        //wgTCP.Add()\n        //go func {\n          //  defer wgTCP.Done()\n           // handleTCP(targetBatch)\n        //}\n        if synscanEnable {\n            handleSYN(targetBatch)\n        }\n        targetBatch = ""\n        count = 0\n    }\n}\nlog.Info("targetBatch %s", targetBatch)\n\nif count > 0 {\n    //wgTCP.Add()\n    //go func {\n        //defer wgTCP.Done()\n      //  handleTCP(targetBatch)\n    //}\n    if synscanEnable {\n        handleSYN(targetBatch)\n    }\n}\n\nif synscanEnable {\n    yakit.StatusCard("SYN", "DONE")\n}\n\n//wgTCP.Wait()\n\nhostCountSec = len(aliveHostCountList)\n\n\nif hostCountSec != 0 {\n    // 根据存活 ip + (加载成功的插件数 * 2s)/concurrent  + 开放端口数\n    // 定时器，超过一定时间，就扫描结束\n    waitTimeSec = hostCountSec + (loadPluginFinished * 2)/20 + OpenPortCount\n    if waitTimeSec < 10 {\n        waitTimeSec = 60\n    }\n  \tyakit.Info("waitTimeSec %v", waitTimeSec)\n    time.AfterFunc(waitTimeSec * 1000 * 1000 * 1000, func() {\n        yakit.SetProgress(1)\n        yakit.Info("AfterFunc 本次扫描任务已完成。")\n        os.Exit(0)\n    })\n}\nbruteWg.Wait()\nmanager.Wait()',
        script_type: '端口与漏洞扫描',
        tags: ['distributed-script'],
        type: 'SYN扫描检测',
    },
    {
        description: '专项漏洞扫描',
        disallow_scheduled: true,
        prompt_args: [
            {
                explain: '',
                key: 'target',
                value: '',
            },
            {
                explain: 'bool 类型，是否启用弱口令检测',
                key: 'enable-brute',
                value: '',
            },
            {
                explain:
                    '端口，当输入 1-65535 时，会分配 syn 和 tcp 扫描全端口',
                key: 'ports',
                value: '',
            },
        ],
        script: '// 重构SYN-20240718 go0p\n\nyakit.AutoInitYakit()\nloglevel(`info`)\n\n/*\n创建插件:\n   1. 插件的执行状态需要注意：加载成功与否？\n*/\n\n\ntargetRaw = cli.String("target",cli.setRequired(true))\n\npluginsStr = cli.String("plugins",cli.setRequired(true))\n\n// host alive scan\nskippedHostAliveScan = cli.String("skipped-host-alive-scan",cli.setDefault("false"))\nhostAliveConcurrent = cli.Int("host-alive-concurrent", cli.setDefault(20), cli.setRequired(false))\nhostAliveTimeout = cli.Float("host-alive-timeout", cli.setDefault(5.0), cli.setRequired(false))\nhostAliveTCPPorts = cli.String("host-alive-ports", cli.setDefault("80,22,443"), cli.setRequired(false))\n\nskippedHostAliveScanFlag = false\n\nif skippedHostAliveScan == "true" {\n    skippedHostAliveScanFlag = true\n}\n\n\npluginStatusMap = {};\npluginNames = str.Split(pluginsStr, ",")\nyakit.Info("开始创建漏洞扫描管理器")\nmanager, err := hook.NewMixPluginCaller()\nif err != nil {\n    yakit.Error("创建失败：%v", err)\n}\n\nmanager.SetDividedContext(true)\nmanager.SetConcurrent(20)\n\nloadPluginFinished = 0\nx.Foreach(pluginNames, func(i) {\n    // 插件加载状态\n    statusName = "加载中"\n    err = manager.LoadPlugin(i)\n    if err != nil {\n        yakit.Info("加载插件【%v】失败：%v", i, err)\n        statusName = "加载失败"\n    } else {\n        loadPluginFinished++\n\n        yakit.Info(i + " [加载成功]")\n\t   yakit.Info(sprintf("涉及扫描插件：%v个", len(pluginNames)))\n        statusName = "加载成功"\n    }\n    pluginStatusMap[i] = [i, statusName]\n})\n\n\npingOpt = []\n\n\nenableBrute = cli.String("enable-brute",cli.setDefault("false"))\n\n\nenableBruteFlag = false\n\nif enableBrute == "true" {\n    enableBruteFlag = true\n}\n\nif skippedHostAliveScan {\n    pingOpt = append(pingOpt, ping.skip(skippedHostAliveScanFlag))\n}\n\nif hostAliveTimeout > 0 {\n    pingOpt = append(pingOpt, ping.timeout(hostAliveTimeout))\n}\n\n\nif hostAliveConcurrent > 0 {\n    pingOpt = append(pingOpt, ping.concurrent(hostAliveConcurrent))\n}\n\n\nif len(hostAliveTCPPorts) > 0 {\n    pingOpt = append(pingOpt, ping.tcpPingPorts(hostAliveTCPPorts))\n}\n\nsynConcurrent = cli.Int("syn-concurrent", cli.setDefault(2000))\n\nexcludeHosts = cli.String("exclude-hosts")\nexcludePorts = cli.String("exclude-ports")\n\ntop100 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018"\n\ntcpPorts = cli.String("ports", cli.setDefault(top100))\n\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\n\nif len(tcpPortsList) == 0{\n    tcpPorts = top100\n}\n\n// top 5000 ports\ntop5000 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018,93,6666,7010,100,9003,6789,7060,8022,4848,3050,8787,8013,8040,10021,2011,6006,4000,8055,4430,6060,7788,8066,9898,8801,10040,7006,803,6688,10080,8050,7011,7009,40310,802,10003,8014,2080,7288,9992,8005,8889,5644,8886,9500,58031,50000,9020,8015,50060,8887,8021,8700,9900,9191,3312,8186,8735,8380,1234,38080,2110,8007,21245,3333,2046,9061,8686,9011,8061,9876,8282,60465,2222,9009,1100,18081,70,8383,5155,8188,2517,50070,8062,11324,9231,999,28214,8987,809,2010,7700,3535,7921,11080,6778,805,8073,114,2012,701,8810,8400,9007,8808,8065,8822,15000,9901,11158,1107,28099,12345,2006,9527,51106,688,25006,8045,9006,8023,8029,9997,7048,8580,8585,8035,10088,20022,4001,9005,2013,20808,3580,7742,8119,32766,50075,7272,3380,3220,7801,5256,5255,10086,1300,5200,6198,1158,6889,3503,6088,9991,806,8183,8688,1001,58080,1182,9025,8112,7776,7321,235,8077,8500,11347,7081,8877,8480,9182,58000,8026,11001,10089,5888,8196,8078,9995,2014,5656,8019,5003,8481,6002,9889,9015,8866,8182,8057,8399,8308,511,12881,4016,1039,28080,5678,7500,8051,18801,15018,15888,38443,8123,9004,8144,94,9070,1800,9112,8990,3456,2051,9131,97,7100,7711,7180,11000,8037,6988,122,8885,14007,8184,7012,8079,9888,9301,59999,49705,1979,8900,5080,5013,1550,8844,4850,206,5156,8813,3030,1790,8802,9012,5544,3721,8980,10009,8043,8390,7943,8381,8056,7111,1500,5881,9437,5655,8102,65486,4443,3690,10025,8024,8333,8666,103,8,9666,8999,9111,8071,522,11381,20806,8041,1085,8864,7900,1700,8036,8032,8033,8111,60022,955,3080,8788,27017,7443,8192,6969,9909,5002,9990,188,8910,9022,50030,866,8582,4300,9101,6879,8891,4567,4440,10051,10068,50080,8341,30001,6890,8168,8955,16788,8190,18060,6379,7041,42424,15693,2521,19010,18103,6010,8898,9910,9190,8260,8445,1680,8890,8649,30082,3013,30000,2480,7202,9704,5233,8991,11366,7888,8780,7129,6600,47088,7791,18888,50045,15672,2585,60,9494,31945,2060,8610,8860,58060,6118,2348,38000,18880,13382,6611,8064,7101,5081,7380,7942,10016,8027,2093,403,9014,8133,6886,95,8058,9201,6443,5966,27000,7017,6680,8401,9036,8988,8806,6180,421,423,57880,7778,18881,812,15004,9110,8213,9300,1213,8193,8956,1108,778,65000,7020,1122,9031,17000,8039,8600,50090,1863,8191,65,6587,8136,9507,132,200,2070,308,5811,3465,8680,7999,7084,3938,5902,9595,442,4433,7171,7567,811,1128,6003,2125,6090,10007,7022,1949,6565,65001,1301,19244,10087,8025,5098,21080,1200,15801,1005,22343,7086,8601,6259,7102,10333,211,10082,18085,180,40000,7021,7702,66,38086,666,6603,1212,65493,96,9053,7031,23454,30088,6226,8660,6170,8972,48080,10118,40069,28780,20153,20021,20151,58898,10066,1818,9914,55351,8343,6546,3880,8902,22222,19045,5561,7979,5203,50240,49960,2007,1722,8913,8912,9504,8103,8567,1666,8720,8197,3012,8220,9039,5898,925,38517,8382,6842,8895,2808,447,3600,3606,45177,19101,171,133,8189,7108,10154,47078,6800,8122,381,15580,23352,3443,1180,268,2382,43651,10099,65533,7018,60010,60101,6699,2005,2009,59777,591,1933,9013,8477,9696,9030,2015,7925,6510,18803,280,5601,2901,2301,5201,302,610,5552,8809,6869,9212,17095,20001,8781,25024,5280,7909,17003,1088,7117,20052,10038,30551,9980,9180,59009,28280,7028,61999,7915,8384,9918,9919,55858,7215,77,9845,20140,7856,1982,1123,17777,8839,208,2886,877,6101,5100,804,983,5600,8402,5887,8322,5632,770,13333,7330,3216,31188,47583,8710,22580,1042,34440,20,7703,65055,8997,6543,6388,8283,7201,4040,61081,12001,3588,7123,2490,4389,1313,19080,9050,6920,299,20046,8892,9302,7899,30058,7094,6801,321,1356,12333,11362,11372,6602,7709,45149,3668,517,9912,8130,7050,7713,40080,8104,13988,18264,8799,7072,55070,23458,8176,9517,9541,9542,9512,8905,11660,44445,44401,17173,436,560,733,968,602,3133,3398,16580,8488,8901,8512,10443,9113,9119,6606,22080,5560,5757,1600,8250,10024,10200,333,73,7547,8054,6372,223,3737,9019,8067,45692,15400,15698,9038,37006,2086,1002,9188,8201,8202,30030,2663,9105,10017,4503,1104,8893,40001,27779,3010,7083,5010,5501,309,1389,10070,10069,10056,3094,10057,10078,10050,10060,10098,4180,10777,270,6365,9801,1046,7140,1004,9198,8465,8548,108,30015,8153,1020,50100,8391,34899,7090,6100,8777,8298,8281,7023,3377,8499,7501,4321,3437,9977,14338,843,7901,6020,6011,1988,4023,20202,20200,7995,18181,9836,586,2340,8110,9192,2525,6887,4005,8992,11212,2168,60080,6664,10005,956,1016,4453,8974,10101,58124,30025,7789,7280,8068,11180,1984,5566,916,8828,17071,15080,8820,104,21900,5151,860,6286,5118,18765,7055,9989,807,7751,8684,1999,9333,55352,8681,19994,3033,8017,7093,7896,4242,58083,56688,6167,9922,3618,7082,1603,16929,198,8075,7044,8232,12315,4570,4569,31082,8861,3680,4455,8403,4497,4380,7273,8896,21188,22480,1445,20165,20142,9068,1083,59093,41474,9224,9718,23380,5225,18889,4237,30,14549,8052,911,19000,7799,7300,9168,29798,4480,22228,7903,810,68,31000,9103,20992,8049,2261,8105,10152,5780,10111,3003,1,3,4,6,24,32,33,42,43,49,109,125,146,161,163,212,222,254,256,259,264,301,306,311,340,366,406,407,416,417,425,458,464,481,497,500,512,524,541,545,555,563,593,616,617,625,636,648,667,668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,898,900,901,902,903,912,981,987,992,1007,1009,1011,1021,1022,1023,1031,1032,1033,1034,1035,1036,1037,1038,1040,1043,1044,1045,1047,1050,1051,1052,1055,1057,1058,1059,1060,1061,1062,1063,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1084,1086,1087,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1102,1105,1106,1111,1112,1113,1114,1117,1119,1121,1124,1126,1130,1131,1132,1137,1138,1141,1145,1147,1148,1149,1151,1152,1154,1163,1164,1165,1166,1169,1174,1175,1183,1185,1186,1187,1192,1198,1199,1201,1216,1217,1218,1233,1236,1244,1247,1248,1259,1271,1272,1277,1287,1296,1309,1310,1311,1322,1328,1334,1352,1417,1434,1455,1461,1494,1501,1503,1521,1524,1533,1556,1580,1583,1594,1641,1658,1687,1688,1717,1718,1719,1721,1761,1782,1783,1805,1812,1839,1840,1862,1864,1875,1914,1935,1947,1971,1972,1974,1998,2002,2003,2004,2021,2022,2030,2033,2034,2035,2038,2040,2041,2042,2043,2045,2047,2048,2065,2068,2099,2105,2106,2111,2119,2126,2135,2144,2160,2161,2170,2179,2190,2191,2196,2200,2251,2260,2288,2323,2366,2381,2383,2393,2394,2399,2401,2492,2500,2522,2557,2601,2602,2604,2605,2607,2608,2638,2701,2702,2710,2718,2725,2800,2809,2811,2869,2875,2909,2910,2920,2968,2998,3005,3006,3007,3011,3017,3031,3052,3071,3077,3119,3162,3168,3211,3221,3260,3261,3268,3269,3283,3300,3301,3304,3307,3322,3323,3324,3325,3351,3367,3369,3370,3371,3372,3376,3390,3400,3404,3410,3476,3493,3514,3517,3527,3546,3551,3659,3684,3689,3697,3700,3731,3766,3784,3792,3800,3801,3808,3809,3814,3820,3824,3826,3827,3828,3846,3848,3849,3851,3852,3853,3859,3863,3869,3871,3878,3889,3905,3914,3918,3920,3945,3971,3995,3998,4002,4003,4004,4006,4045,4111,4125,4126,4129,4224,4279,4343,4444,4445,4446,4449,4550,4662,4900,4998,5004,5030,5033,5054,5061,5087,5102,5120,5214,5221,5222,5226,5269,5298,5405,5414,5431,5440,5500,5510,5550,5633,5679,5718,5730,5801,5802,5810,5815,5822,5825,5850,5859,5862,5877,5901,5903,5904,5906,5907,5910,5911,5915,5922,5925,5950,5952,5959,5960,5961,5962,5963,5987,5988,5989,5998,5999,6005,6007,6009,6025,6059,6106,6112,6123,6129,6156,6346,6389,6502,6547,6566,6567,6580,6667,6668,6669,6689,6692,6779,6788,6792,6839,6881,6901,7019,7025,7103,7106,7402,7435,7496,7512,7625,7627,7676,7741,7800,7911,7920,7937,7938,8194,8254,8290,8291,8292,8651,8652,8654,8701,8873,8994,9040,9071,9102,9207,9220,9290,9415,9418,9485,9502,9503,9535,9575,9593,9594,9618,9877,9878,9917,9929,9943,9944,9968,10012,10180,10215,10243,10566,10616,10617,10621,10626,10628,10629,10778,11110,11111,11967,12000,12174,12265,13456,13722,13782,13783,14238,14441,14442,15002,15003,15660,15742,16000,16001,16012,16016,16018,16113,16992,16993,17877,17988,18040,18101,18988,19283,19315,19350,19780,19801,19842,20005,20031,20221,20222,20828,21571,22939,23502,24444,24800,25734,25735,26214,27352,27353,27355,27356,27715,28201,30718,30951,31038,31337,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,33354,33899,34571,34572,34573,35500,38292,40193,40911,41511,42510,44176,44442,44443,44501,45100,49158,49159,49160,49161,49163,49165,49167,49175,49176,49400,49999,50001,50002,50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055,55056,55555,55600,56737,56738,57294,57797,60020,60443,61532,61900,62078,63331,64623,64680,65129,65389"\n\nsynPorts = cli.String("syn-ports", cli.setDefault(top5000))\n\nsynPortsList = str.ParseStringToPorts(top5000)\n\nif synPortsList != "" && len(synPortsList) == 0{\n    synPorts = top5000\n}\n\ncli.check()\n\nif len(tcpPortsList) >= 65535 {\n    tcpPorts = "1,3,4,6,7,8,9,13,17,19,20,21,22,23,24,25,26,27,30,32,33,37,42,43,49,53,55,57,59,60,65,66,68,70,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,106,108,109,110,111,113,114,119,122,123,125,127,132,133,135,137,138,139,143,144,146,157,161,163,171,179,180,188,198,199,200,206,208,210,211,212,220,222,223,225,235,250,251,252,254,255,256,257,259,264,268,270,280,299,301,302,306,308,309,311,321,333,340,366,381,388,389,403,406,407,411,416,417,419,421,423,425,427,436,441,442,443,444,445,447,458,464,465,475,481,497,500,502,511,512,513,514,515,517,522,523,524,540,541,543,544,545,548,554,555,556,557,560,563,586,587,590,591,593,600,602,606,610,616,617,621,623,625,631,636,639,641,646,648,655,657,659,660,666,667,668,669,674,683,684,687,688,690,691,700,701,705,709,710,711,713,714,715,720,722,725,726,728,729,730,731,732,733,740,748,749,754,757,758,765,770,777,778,780,782,783,786,787,790,792,795,800,801,802,803,804,805,806,807,808,809,810,811,812,822,823,825,829,839,840,843,846,856,859,860,862,864,866,873,874,877,878,880,888,889,898,900,901,902,903,904,905,911,912,913,916,918,921,922,924,925,928,930,931,943,953,955,956,968,969,971,980,981,983,987,990,992,993,995,996,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1116,1117,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1130,1131,1132,1134,1135,1136,1137,1138,1141,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154,1156,1157,1158,1159,1162,1163,1164,1165,1166,1167,1168,1169,1173,1174,1175,1176,1179,1180,1182,1183,1184,1185,1186,1187,1188,1190,1191,1192,1194,1195,1196,1198,1199,1200,1201,1204,1207,1208,1209,1210,1211,1212,1213,1215,1216,1217,1218,1220,1221,1222,1223,1228,1229,1233,1234,1236,1239,1240,1241,1243,1244,1247,1248,1249,1250,1251,1259,1261,1262,1264,1268,1270,1271,1272,1276,1277,1279,1282,1287,1290,1291,1296,1297,1299,1300,1301,1302,1303,1305,1306,1307,1308,1309,1310,1311,1313,1314,1315,1316,1317,1318,1319,1321,1322,1324,1327,1328,1330,1331,1334,1336,1337,1339,1340,1347,1350,1351,1352,1353,1356,1357,1389,1413,1414,1417,1433,1434,1443,1445,1455,1461,1494,1500,1501,1503,1516,1521,1522,1524,1525,1526,1527,1533,1547,1550,1556,1558,1559,1560,1565,1566,1569,1580,1583,1584,1592,1594,1598,1600,1603,1605,1607,1615,1620,1622,1630,1632,1635,1638,1641,1645,1658,1666,1677,1680,1683,1687,1688,1691,1694,1699,1700,1701,1703,1707,1708,1709,1711,1712,1713,1715,1717,1718,1719,1720,1721,1722,1723,1730,1735,1736,1745,1750,1752,1753,1755,1761,1782,1783,1790,1791,1792,1799,1800,1801,1805,1806,1807,1808,1811,1812,1818,1823,1825,1835,1839,1840,1858,1861,1862,1863,1864,1871,1875,1883,1888,1900,1901,1911,1912,1914,1918,1924,1927,1933,1935,1947,1949,1954,1958,1971,1972,1973,1974,1975,1976,1979,1980,1981,1982,1984,1988,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2020,2021,2022,2025,2030,2031,2033,2034,2035,2038,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2051,2060,2062,2065,2067,2068,2069,2070,2080,2081,2082,2083,2086,2087,2093,2095,2096,2099,2100,2101,2103,2104,2105,2106,2107,2110,2111,2112,2115,2119,2121,2124,2125,2126,2134,2135,2142,2144,2148,2150,2160,2161,2168,2170,2179,2181,2187,2190,2191,2196,2197,2200,2201,2203,2222,2224,2232,2241,2250,2251,2253,2260,2261,2262,2265,2269,2270,2271,2280,2288,2291,2292,2300,2301,2302,2304,2312,2313,2323,2325,2326,2330,2335,2340,2348,2366,2371,2372,2375,2381,2382,2383,2391,2393,2394,2399,2401,2418,2425,2433,2435,2436,2438,2439,2449,2456,2463,2472,2480,2490,2492,2500,2501,2505,2517,2521,2522,2525,2531,2532,2550,2551,2557,2558,2567,2580,2583,2584,2585,2598,2600,2601,2602,2604,2605,2606,2607,2608,2622,2623,2628,2631,2638,2644,2663,2691,2700,2701,2702,2706,2710,2711,2712,2717,2718,2723,2725,2728,2734,2800,2804,2806,2808,2809,2811,2812,2847,2850,2869,2875,2882,2886,2888,2889,2898,2901,2902,2903,2908,2909,2910,2920,2930,2957,2958,2967,2968,2973,2984,2987,2988,2991,2997,2998,3000,3001,3002,3003,3005,3006,3007,3008,3010,3011,3012,3013,3014,3017,3023,3025,3030,3031,3033,3050,3052,3057,3062,3063,3071,3077,3080,3089,3094,3102,3103,3118,3119,3121,3128,3133,3146,3162,3167,3168,3190,3200,3210,3211,3216,3220,3221,3240,3260,3261,3263,3268,3269,3280,3281,3283,3291,3299,3300,3301,3304,3306,3307,3310,3311,3312,3319,3322,3323,3324,3325,3333,3334,3351,3362,3363,3365,3367,3368,3369,3370,3371,3372,3374,3376,3377,3380,3388,3389,3390,3396,3398,3399,3400,3404,3410,3414,3415,3419,3425,3430,3437,3439,3443,3456,3465,3476,3479,3483,3485,3486,3493,3497,3503,3505,3506,3511,3513,3514,3515,3517,3519,3520,3526,3527,3530,3532,3535,3546,3551,3577,3580,3586,3588,3599,3600,3602,3603,3606,3618,3621,3622,3632,3636,3637,3652,3653,3656,3658,3659,3663,3668,3669,3670,3672,3680,3681,3683,3684,3689,3690,3697,3700,3703,3712,3721,3728,3731,3737,3742,3749,3765,3766,3784,3787,3788,3790,3792,3793,3795,3796,3798,3799,3800,3801,3803,3806,3808,3809,3810,3811,3812,3813,3814,3817,3820,3823,3824,3825,3826,3827,3828,3830,3831,3837,3839,3842,3846,3847,3848,3849,3850,3851,3852,3853,3856,3859,3860,3863,3868,3869,3870,3871,3872,3876,3878,3879,3880,3882,3888,3889,3890,3897,3899,3901,3902,3904,3905,3906,3907,3908,3909,3911,3913,3914,3915,3916,3918,3919,3920,3922,3923,3928,3929,3930,3931,3935,3936,3937,3938,3940,3941,3943,3944,3945,3946,3948,3949,3952,3956,3957,3961,3962,3963,3964,3967,3968,3969,3971,3972,3975,3979,3980,3981,3982,3983,3986,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4009,4010,4016,4020,4022,4023,4024,4025,4029,4035,4036,4039,4040,4045,4056,4058,4065,4080,4087,4090,4096,4100,4101,4111,4112,4113,4118,4119,4120,4121,4125,4126,4129,4135,4141,4143,4147,4158,4161,4164,4174,4180,4190,4192,4200,4206,4220,4224,4234,4237,4242,4252,4262,4279,4294,4297,4298,4300,4302,4321,4325,4328,4333,4342,4343,4355,4356,4357,4358,4369,4374,4375,4376,4380,4384,4388,4389,4401,4407,4414,4415,4418,4430,4433,4440,4442,4443,4444,4445,4446,4447,4449,4453,4454,4455,4464,4471,4476,4480,4497,4503,4516,4517,4530,4534,4545,4550,4555,4558,4559,4567,4569,4570,4599,4600,4601,4602,4606,4609,4644,4649,4658,4662,4665,4687,4689,4700,4712,4713,4745,4760,4767,4770,4771,4778,4793,4800,4819,4848,4850,4859,4860,4875,4876,4877,4881,4899,4900,4903,4912,4931,4949,4998,4999,5000,5001,5002,5003,5004,5005,5009,5010,5011,5012,5013,5014,5015,5016,5017,5020,5021,5023,5030,5033,5040,5050,5051,5052,5053,5054,5055,5060,5061,5063,5066,5070,5074,5080,5081,5087,5088,5090,5095,5096,5098,5100,5101,5102,5111,5114,5118,5120,5121,5122,5125,5133,5137,5147,5151,5152,5155,5156,5190,5200,5201,5202,5203,5212,5214,5219,5221,5222,5223,5225,5226,5233,5234,5235,5242,5250,5252,5255,5256,5259,5261,5269,5279,5280,5291,5298,5339,5347,5353,5357,5370,5377,5405,5414,5423,5431,5432,5433,5440,5441,5442,5444,5457,5458,5473,5475,5500,5501,5502,5510,5520,5544,5550,5552,5553,5555,5560,5561,5566,5600,5601,5631,5632,5633,5644,5655,5656,5666,5671,5672,5678,5679,5680,5718,5730,5757,5780,5800,5801,5802,5803,5807,5810,5811,5812,5815,5818,5822,5823,5825,5850,5859,5862,5868,5869,5877,5881,5887,5888,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5909,5910,5911,5914,5915,5918,5922,5925,5938,5940,5950,5952,5959,5960,5961,5962,5963,5966,5968,5981,5987,5988,5989,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6017,6020,6025,6050,6051,6059,6060,6068,6080,6088,6090,6100,6101,6103,6106,6112,6118,6123,6129,6156,6167,6170,6180,6198,6203,6222,6226,6247,6259,6286,6346,6365,6372,6379,6388,6389,6443,6481,6500,6502,6504,6510,6520,6543,6546,6547,6550,6565,6566,6567,6580,6587,6600,6602,6603,6606,6611,6646,6648,6662,6664,6666,6667,6668,6669,6670,6677,6680,6688,6689,6692,6699,6711,6732,6778,6779,6788,6789,6792,6800,6801,6839,6842,6868,6869,6879,6881,6886,6887,6888,6889,6890,6896,6901,6920,6969,6988,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7017,7018,7019,7020,7021,7022,7023,7024,7025,7028,7031,7041,7044,7048,7050,7051,7055,7060,7070,7071,7072,7074,7078,7080,7081,7082,7083,7084,7086,7088,7090,7093,7094,7100,7101,7102,7103,7106,7108,7111,7117,7123,7129,7140,7171,7180,7200,7201,7202,7215,7241,7272,7273,7278,7280,7281,7288,7300,7321,7330,7380,7402,7435,7438,7443,7474,7496,7500,7501,7512,7547,7567,7625,7627,7676,7680,7687,7688,7700,7702,7703,7709,7711,7713,7725,7741,7742,7744,7749,7751,7770,7776,7777,7778,7788,7789,7791,7799,7800,7801,7856,7878,7888,7890,7896,7899,7900,7901,7903,7909,7911,7913,7915,7920,7921,7925,7929,7937,7938,7942,7943,7979,7995,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8060,8061,8062,8064,8065,8066,8067,8068,8069,8070,8071,8073,8075,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8108,8110,8111,8112,8118,8119,8122,8123,8130,8133,8136,8144,8153,8161,8168,8172,8176,8180,8181,8182,8183,8184,8186,8188,8189,8190,8191,8192,8193,8194,8196,8197,8200,8201,8202,8213,8220,8222,8232,8244,8250,8254,8258,8260,8280,8281,8282,8283,8288,8290,8291,8292,8293,8294,8298,8300,8308,8322,8333,8341,8343,8360,8380,8381,8382,8383,8384,8385,8390,8391,8399,8400,8401,8402,8403,8443,8445,8448,8465,8477,8480,8481,8484,8488,8499,8500,8512,8540,8548,8567,8580,8582,8585,8600,8601,8610,8648,8649,8651,8652,8654,8660,8666,8675,8676,8680,8681,8684,8686,8688,8700,8701,8710,8720,8735,8765,8766,8777,8780,8781,8787,8788,8799,8800,8801,8802,8806,8808,8809,8810,8813,8820,8822,8828,8834,8838,8839,8844,8848,8858,8860,8861,8864,8866,8868,8873,8877,8879,8880,8881,8885,8886,8887,8888,8889,8890,8891,8892,8893,8895,8896,8898,8899,8900,8901,8902,8905,8910,8912,8913,8955,8956,8972,8974,8980,8983,8987,8988,8989,8990,8991,8992,8994,8996,8997,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9019,9020,9022,9025,9030,9031,9036,9038,9039,9040,9043,9050,9053,9060,9061,9068,9070,9071,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9105,9110,9111,9112,9113,9119,9131,9152,9168,9180,9182,9188,9190,9191,9192,9197,9198,9200,9201,9207,9212,9220,9224,9231,9290,9300,9301,9302,9333,9409,9415,9418,9437,9443,9444,9448,9485,9494,9500,9501,9502,9503,9504,9507,9512,9517,9527,9535,9541,9542,9575,9593,9594,9595,9600,9618,9621,9643,9666,9673,9696,9704,9718,9800,9801,9815,9836,9845,9876,9877,9878,9888,9889,9898,9900,9901,9909,9910,9912,9914,9917,9918,9919,9922,9929,9941,9943,9944,9968,9977,9980,9981,9986,9988,9989,9990,9991,9992,9995,9997,9998,9999,10000,10001,10002,10003,10004,10005,10007,10008,10009,10010,10011,10012,10016,10017,10021,10022,10023,10024,10025,10034,10038,10040,10050,10051,10056,10057,10058,10060,10066,10068,10069,10070,10078,10080,10082,10083,10086,10087,10088,10089,10098,10099,10101,10111,10118,10152,10154,10160,10180,10200,10215,10243,10250,10255,10333,10443,10566,10616,10617,10621,10626,10628,10629,10777,10778,10873,11000,11001,11080,11110,11111,11158,11180,11211,11212,11324,11347,11362,11366,11372,11381,11660,11967,12000,12001,12006,12018,12021,12059,12174,12215,12262,12265,12315,12333,12345,12346,12380,12443,12452,12881,13333,13382,13456,13722,13724,13782,13783,13988,14000,14007,14238,14338,14441,14442,14549,15000,15001,15002,15003,15004,15018,15080,15400,15402,15580,15660,15672,15693,15698,15742,15801,15888,16000,16001,16012,16016,16018,16080,16113,16580,16705,16788,16800,16851,16929,16992,16993,17000,17003,17071,17095,17173,17595,17777,17877,17988,18000,18001,18002,18004,18008,18018,18040,18060,18080,18081,18082,18085,18088,18090,18098,18101,18103,18181,18264,18765,18801,18803,18880,18881,18888,18889,18988,19000,19001,19010,19045,19080,19101,19244,19283,19315,19350,19780,19801,19842,19900,19994,20000,20001,20002,20005,20021,20022,20031,20046,20052,20140,20142,20151,20153,20165,20200,20202,20221,20222,20720,20806,20808,20828,20992,21000,21080,21188,21245,21501,21502,21571,21792,21900,22080,22222,22228,22343,22480,22580,22939,23052,23352,23380,23454,23458,23502,23796,24444,24800,25006,25024,25734,25735,26000,26214,26470,27000,27017,27352,27353,27355,27356,27357,27715,27779,28017,28018,28080,28099,28201,28211,28214,28280,28780,29672,29798,29831,30000,30001,30005,30015,30025,30030,30058,30082,30088,30551,30704,30718,30951,31000,31038,31082,31188,31337,31727,31945,32766,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,32791,32792,32803,32816,32822,32835,33354,33453,33554,33899,34440,34571,34572,34573,34899,35500,35513,37006,37839,38000,38037,38080,38086,38185,38188,38292,38443,38501,38517,38888,39136,39376,39659,40000,40001,40069,40080,40193,40310,40811,40911,41064,41474,41511,41516,41523,42424,42510,43651,44176,44334,44401,44442,44443,44445,44501,44709,45100,45149,45177,45692,46200,46996,47078,47088,47544,47583,48080,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49164,49165,49167,49168,49171,49175,49176,49186,49195,49236,49400,49401,49705,49960,49999,50000,50001,50002,50003,50006,50030,50045,50050,50060,50070,50075,50080,50090,50100,50240,50300,50389,50500,50636,50800,51103,51106,51191,51413,51493,52660,52673,52710,52735,52822,52847,52848,52849,52850,52851,52853,52869,53211,53313,53314,53535,54045,54328,55020,55055,55056,55070,55351,55352,55555,55576,55600,55858,56688,56737,56738,57294,57665,57797,57880,58000,58001,58002,58031,58060,58080,58083,58124,58630,58632,58838,58898,59009,59093,59110,59200,59201,59202,59777,59999,60000,60010,60020,60022,60030,60080,60101,60123,60146,60443,60465,60642,61081,61532,61613,61616,61900,61999,62078,63331,64623,64680,65000,65001,65055,65129,65310,65389,65486,65493,65533"\n    synPorts = str.Join(str.FilterPorts("1-65535",tcpPorts), ",")\n} else {\n    synPorts = str.Join(str.FilterPorts(synPorts,tcpPorts), ",")\n}\n\ntcpOps = []\ntcpOps = append(tcpOps, servicescan.active(true))\n\ntcpOps = append(tcpOps, servicescan.concurrent(50))\ntcpOps = append(tcpOps, servicescan.maxProbes(4))\n\ntcpOps = append(tcpOps, servicescan.probeTimeout(5.0))\n\ntcpOps = append(tcpOps, servicescan.all())\n\n// 设置排除端口和主机\nif excludePorts != "" {\n    yakit.Info("设置排除端口：%v", excludePorts)\n    tcpOps = append(tcpOps, servicescan.excludePorts(excludePorts))\n}\nif excludeHosts != "" {\n    yakit.Info("设置排除主机：%v", excludeHosts)\n    tcpOps = append(tcpOps, servicescan.excludeHosts(excludeHosts))\n}\n\nsynPortsList = str.ParseStringToPorts(synPorts)\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\nyakit.Info("SYN Port 端口个数 ：%v",len(synPortsList))\nyakit.Info("TCP Port 端口个数 ：%v",len(tcpPortsList))\nyakit.Info("扫描参数设置完成，准备扫描~")\n\n\nvar synscanEnable = false\ntry {\n    yakit.Info("检测 SYN 扫描是否可用中")\n    for res in synscan.Scan("127.0.0.1", "80", synscan.wait(1))~ {  }\n    \n    synscanEnable = true\n    // yakit.StatusCard("SYN 扫描", "可用")\n} catch err {\n    yakit.Info("SYN 扫描不可用，原因是：%v", err)\n}\n\n\n\nbruteOpt = []\n\nbruteOpt = append(bruteOpt, brute.minDelay(1), brute.maxDelay(5))\n\nbruteOpt = append(bruteOpt, brute.finishingThreshold(1))\nbruteOpt = append(bruteOpt, brute.concurrentTarget(20))\nbruteOpt = append(bruteOpt, brute.concurrent(1))\n\nbruteWg = sync.NewSizedWaitGroup(10)\n\nbruteScan = func(result) {\n    bruteWg.Add()\n    go func() {\n      \tdefer bruteWg.Done()\n        bruteType = ""\n        if result.GetServiceName() == "exasoftport1" {\n            return\n        }\n        \n        for _, bt := range brute.GetAvailableBruteTypes() {\n            if result.GetServiceName().Lower().Contains(bt) || bt.Contains(result.GetServiceName().Lower()) {\n                bruteType = bt\n                break\n            }\n            \n        }\n        \n\n        if bruteType == "" {\n            return\n        }\n        \n\n        defaultusers = []\n        defaultpass = []\n\n        if bruteType == "ftp" {\n            defaultusers = ["ftp", "www", "anonymous", "admin"]\n            defaultpass = ["admin", "admin123", "123456"]\n        } else if bruteType == "memcached" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "123456"]\n        } else if bruteType == "mongodb" {\n            defaultusers = ["root", "admin", "mongodb"]\n            defaultpass = ["root", "admin123", "root@123", "123456"]\n        } else if bruteType == "mssql" {\n            defaultusers = ["root", "admin", "mssql"]\n            defaultpass = ["root", "admin123", "root@123", "admin", "123456"]\n        } else if bruteType == "mysql" {\n            defaultusers = ["mysql", "root", "admin"]\n            defaultpass = ["root", "123456", "admin123", "admin", "root@123"]\n        } else if bruteType == "postgres" {\n            defaultusers = ["postgres", "root", "admin"]\n            defaultpass = ["root", "admin", "123456"]\n        } else if bruteType == "rdp" {\n            defaultusers = ["admin", "administrator", "root", "guest"]\n            defaultpass = ["administrator", "guest", "admin", "123456"]\n        } else if bruteType == "redis" {\n            defaultusers = ["redis"]\n            defaultpass = ["redis", "123456"]\n        } else if bruteType == "smb" {\n            defaultusers = ["administrator", "admin", "test", "guest", "system", "root", "sa"]\n            defaultpass = ["admin123!@#", "admin", "admin123", "admin@123", "admin#123", "123456", "root@123"]\n        } else if bruteType == "snmp" {\n            defaultusers = ["snmp"]\n            defaultpass = ["public", "private", "0", "0392a0", "1234", "2read", "4changes"]\n        } else if bruteType == "ssh" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "telnet" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "tomcat" {\n            defaultusers = ["manager", "tomcat"]\n            defaultpass = ["tomcat", "manager"]\n        } else if bruteType == "vnc" {\n            defaultusers = ["vnc"]\n            defaultpass = ["123456", "admin", "root"]\n        //} else if bruteType == "oracle" {\n          //  defaultusers = ["sys", "system", "oracle"]\n            //defaultpass = ["sys", "system", "oracle", "123456", ""]\n        } else if bruteType == "rtsp" {\n            defaultusers = ["admin"]\n            defaultpass = ["12345", "123456", ""]\n        } else {\n          \treturn\n        }\n        \n\n        uL = make([]string)\n        pL = make([]string)\n\n        uL = append(uL, defaultusers...)\n\n        pL = append(pL, defaultpass...)\n\n        bruteTasks := len(uL) * len(pL)// 计算爆破任务数量        \n\n        addr := str.HostPort(result.Target, result.Port)\n        yakit.Info("Start Load Bruter for %s: %s", bruteType, addr)\n\n        instance, err := brute.New(string(bruteType), brute.userList(uL...), brute.passList(pL...), brute.debug(true), \n                                   brute.okToStop(true), bruteOpt...)\n        if err != nil {\n            yakit.Error(\n                "构建弱口令与未授权扫描失败：%v", \n                err, \n            )\n            return\n        }\n        \n\n        res, err := instance.Start(addr)\n        if err != nil {\n            yakit.Error("输入目标失败：%v", err)\n            return\n        }\n        \n\n        riskTarget = addr\n        for rt := range res {\n            yakit.Info("rt string %v ", rt.String())\n            if rt == nil {\n                continue\n            }\n            \n\n            if !rt.Ok {\n                continue\n            }\n            \n            if rt.Username == "" && rt.Password == "" {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("未授权访问"), \n                    risk.title(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.titleVerbose(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.description("由于配置不当或管理疏忽，某些服务、接口或应用存在未授权访问的风险。攻击者可以直接访问这些资源而不需要任何身份验证，这可能会导致敏感数据的泄露、系统的滥用或其他恶意行为。"), \n                    risk.solution(`1. 审核所有公开可访问的服务、接口和应用，确保它们都有适当的访问控制。\n2. 使用身份验证机制，如用户名/密码、API密钥或OAuth。\n3. 定期监控和审查访问日志，以检测任何可疑或未授权的活动。`), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            } else {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("弱口令"), \n                    risk.description("网站管理、运营人员由于安全意识不足，为了方便、避免忘记密码等，使用了非常容易记住的密码，或者是直接采用了系统的默认密码等。攻击者利用此漏洞可直接进入应用系统或者管理系统，从而进行系统、网页、数据的篡改与删除，非法获取系统、用户的数据，甚至可能导致服务器沦陷。"), \n                    risk.solution("用户层面 : 不要使用常见的弱口令作为密码,不要多个系统或者社交账号使用同一套密码,定期修改密码,建议使用包含随机值的或者随机生成的字符串作为系统密码"), \n                    risk.title(sprintf(\n                        "Weak Password[%v]：%v user(%v) pass(%v)", \n                        rt.Type, \n                        rt.Target, \n                        rt.Username, \n                        rt.Password, \n                    )), \n                    risk.titleVerbose(sprintf("弱口令[%v]：%v user(%v) pass(%v)", rt.Type, rt.Target, rt.Username, \n                                              rt.Password)), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            }\n            \n        }\n    }()\n}\n\nhandleServiceScanResult = func(result) {\n\n    manager.HandleServiceScanResult(result)\n    if enableBruteFlag && len(result.GetServiceName()) != 0 {\n        serviceName = result.GetServiceName()\n        yakit.Info("Start Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n        bruteScan(result)\n        yakit.Info("End Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n    }\n}\n\naliveHostCountList = []\n\n\nOpenPortCount = 0\nopenPortCountLock = sync.NewLock()\naddOpenPortCount = func() {\n    openPortCountLock.Lock()\n    defer openPortCountLock.Unlock()\n    OpenPortCount++\n}\n\nruntimeID = os.Getenv("YAK_RUNTIME_ID")\n\nfunc handleTCP(targets) {\n    try {\n        for result in servicescan.Scan(targets, tcpPorts, tcpOps...)~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            \n            yakit.Info("GOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err {\n        yakit.Error("处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\nfunc handleSYN(targets){\n\n    try {\n        for result in servicescan.ScanFromSynResult(\n            synscan.Scan(targets, synPorts, \n                    synscan.excludePorts(tcpPorts),\n                    synscan.concurrent(synConcurrent),\n                )~, \n                tcpOps..., \n            )~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            yakit.Info("SYNGOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err { \n        yakit.Error("SYN 处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\n\n\n\n\ntargets = str.ParseStringToHosts(targetRaw)\n\ninfo = {}\n\nalive = ""\n\nfor res := range ping.Scan(targetRaw, pingOpt...) {\n    if res.Ok {\n        alive += res.IP + ","\n    }\n}\n\nlog.Info("ping res %s",alive)\n\naliveTargets = str.ParseStringToHosts(alive)\n\n\ninfo["runtime_id"] = runtimeID\ninfo["host_total"] = len(targets)\ninfo["port_total"] = len(synPortsList) + len(tcpPortsList)\ninfo["plugins"] = len(pluginNames)\n\ninfoJson = json.dumps(info)\n\ndb.SetKey("JznQXuFDSepeNWHbiLGEwONiaBxhvj_SERVER_SCAN_MANAGER", infoJson)\n\ntargetBatch = ""\ncount := 0\nwgTCP := sync.NewSizedWaitGroup(50)\n\nfor _, target = range aliveTargets{\n    currentTarget = target\n\n    if count > 0 {\n        targetBatch += "," + currentTarget\n    } else {\n        targetBatch = currentTarget\n    }\n    count++\n\n    if count == 50 {\n        wgTCP.Add()\n        go func {\n            defer wgTCP.Done()\n            handleTCP(targetBatch)\n        }\n        if synscanEnable {\n            handleSYN(targetBatch)\n        }\n        targetBatch = ""\n        count = 0\n    }\n}\nlog.Info("targetBatch %s", targetBatch)\n\nif count > 0 {\n    wgTCP.Add()\n    go func {\n        defer wgTCP.Done()\n        handleTCP(targetBatch)\n    }\n    if synscanEnable {\n        handleSYN(targetBatch)\n    }\n}\n\nif synscanEnable {\n    yakit.StatusCard("SYN", "DONE")\n}\n\nwgTCP.Wait()\n\nhostCountSec = len(aliveHostCountList)\n\n\nif hostCountSec != 0 {\n    // 根据存活 ip + (加载成功的插件数 * 2s)/concurrent  + 开放端口数\n    // 定时器，超过一定时间，就扫描结束\n    waitTimeSec = hostCountSec + (loadPluginFinished * 2)/20 + OpenPortCount\n    if waitTimeSec < 10 {\n        waitTimeSec = 60\n    }\n  \tyakit.Info("waitTimeSec %v", waitTimeSec)\n    time.AfterFunc(waitTimeSec * 1000 * 1000 * 1000, func() {\n        yakit.SetProgress(1)\n        yakit.Info("AfterFunc 本次扫描任务已完成。")\n        os.Exit(0)\n    })\n}\nbruteWg.Wait()\nmanager.Wait()',
        script_type: '端口与漏洞扫描',
        tags: ['distributed-script'],
        type: '专项漏洞扫描',
    },
    {
        description: '普通漏洞扫描',
        disallow_scheduled: true,
        prompt_args: [
            {
                explain: '',
                key: 'target',
                value: '',
            },
            {
                explain: 'bool 类型，是否启用弱口令检测',
                key: 'enable-brute',
                value: '',
            },
            {
                explain:
                    '端口，当输入 1-65535 时，会分配 syn 和 tcp 扫描全端口',
                key: 'ports',
                value: '',
            },
        ],
        script: '// 重构SYN-20240718 go0p\n\nyakit.AutoInitYakit()\nloglevel(`info`)\n\n/*\n创建插件:\n   1. 插件的执行状态需要注意：加载成功与否？\n*/\n\n\ntargetRaw = cli.String("target",cli.setRequired(true))\n\npluginsStr = cli.String("plugins",cli.setRequired(true))\n\n// host alive scan\nskippedHostAliveScan = cli.String("skipped-host-alive-scan",cli.setDefault("false"))\nhostAliveConcurrent = cli.Int("host-alive-concurrent", cli.setDefault(20), cli.setRequired(false))\nhostAliveTimeout = cli.Float("host-alive-timeout", cli.setDefault(5.0), cli.setRequired(false))\nhostAliveTCPPorts = cli.String("host-alive-ports", cli.setDefault("80,22,443"), cli.setRequired(false))\n\nskippedHostAliveScanFlag = false\n\nif skippedHostAliveScan == "true" {\n    skippedHostAliveScanFlag = true\n}\n\n\npluginStatusMap = {};\npluginNames = str.Split(pluginsStr, ",")\nyakit.Info("开始创建漏洞扫描管理器")\nmanager, err := hook.NewMixPluginCaller()\nif err != nil {\n    yakit.Error("创建失败：%v", err)\n}\n\nmanager.SetDividedContext(true)\nmanager.SetConcurrent(20)\n\nloadPluginFinished = 0\nx.Foreach(pluginNames, func(i) {\n    // 插件加载状态\n    statusName = "加载中"\n    err = manager.LoadPlugin(i)\n    if err != nil {\n        yakit.Info("加载插件【%v】失败：%v", i, err)\n        statusName = "加载失败"\n    } else {\n        loadPluginFinished++\n\n        yakit.Info(i + " [加载成功]")\n\t   yakit.Info(sprintf("涉及扫描插件：%v个", len(pluginNames)))\n        statusName = "加载成功"\n    }\n    pluginStatusMap[i] = [i, statusName]\n})\n\n\npingOpt = []\n\n\nenableBrute = cli.String("enable-brute",cli.setDefault("false"))\n\n\nenableBruteFlag = false\n\nif enableBrute == "true" {\n    enableBruteFlag = true\n}\n\nif skippedHostAliveScan {\n    pingOpt = append(pingOpt, ping.skip(skippedHostAliveScanFlag))\n}\n\nif hostAliveTimeout > 0 {\n    pingOpt = append(pingOpt, ping.timeout(hostAliveTimeout))\n}\n\n\nif hostAliveConcurrent > 0 {\n    pingOpt = append(pingOpt, ping.concurrent(hostAliveConcurrent))\n}\n\n\nif len(hostAliveTCPPorts) > 0 {\n    pingOpt = append(pingOpt, ping.tcpPingPorts(hostAliveTCPPorts))\n}\n\nsynConcurrent = cli.Int("syn-concurrent", cli.setDefault(2000))\n\nexcludeHosts = cli.String("exclude-hosts")\nexcludePorts = cli.String("exclude-ports")\n\ntop100 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018"\n\ntcpPorts = cli.String("ports", cli.setDefault(top100))\n\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\n\nif len(tcpPortsList) == 0{\n    tcpPorts = top100\n}\n\n// top 5000 ports\ntop5000 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018,93,6666,7010,100,9003,6789,7060,8022,4848,3050,8787,8013,8040,10021,2011,6006,4000,8055,4430,6060,7788,8066,9898,8801,10040,7006,803,6688,10080,8050,7011,7009,40310,802,10003,8014,2080,7288,9992,8005,8889,5644,8886,9500,58031,50000,9020,8015,50060,8887,8021,8700,9900,9191,3312,8186,8735,8380,1234,38080,2110,8007,21245,3333,2046,9061,8686,9011,8061,9876,8282,60465,2222,9009,1100,18081,70,8383,5155,8188,2517,50070,8062,11324,9231,999,28214,8987,809,2010,7700,3535,7921,11080,6778,805,8073,114,2012,701,8810,8400,9007,8808,8065,8822,15000,9901,11158,1107,28099,12345,2006,9527,51106,688,25006,8045,9006,8023,8029,9997,7048,8580,8585,8035,10088,20022,4001,9005,2013,20808,3580,7742,8119,32766,50075,7272,3380,3220,7801,5256,5255,10086,1300,5200,6198,1158,6889,3503,6088,9991,806,8183,8688,1001,58080,1182,9025,8112,7776,7321,235,8077,8500,11347,7081,8877,8480,9182,58000,8026,11001,10089,5888,8196,8078,9995,2014,5656,8019,5003,8481,6002,9889,9015,8866,8182,8057,8399,8308,511,12881,4016,1039,28080,5678,7500,8051,18801,15018,15888,38443,8123,9004,8144,94,9070,1800,9112,8990,3456,2051,9131,97,7100,7711,7180,11000,8037,6988,122,8885,14007,8184,7012,8079,9888,9301,59999,49705,1979,8900,5080,5013,1550,8844,4850,206,5156,8813,3030,1790,8802,9012,5544,3721,8980,10009,8043,8390,7943,8381,8056,7111,1500,5881,9437,5655,8102,65486,4443,3690,10025,8024,8333,8666,103,8,9666,8999,9111,8071,522,11381,20806,8041,1085,8864,7900,1700,8036,8032,8033,8111,60022,955,3080,8788,27017,7443,8192,6969,9909,5002,9990,188,8910,9022,50030,866,8582,4300,9101,6879,8891,4567,4440,10051,10068,50080,8341,30001,6890,8168,8955,16788,8190,18060,6379,7041,42424,15693,2521,19010,18103,6010,8898,9910,9190,8260,8445,1680,8890,8649,30082,3013,30000,2480,7202,9704,5233,8991,11366,7888,8780,7129,6600,47088,7791,18888,50045,15672,2585,60,9494,31945,2060,8610,8860,58060,6118,2348,38000,18880,13382,6611,8064,7101,5081,7380,7942,10016,8027,2093,403,9014,8133,6886,95,8058,9201,6443,5966,27000,7017,6680,8401,9036,8988,8806,6180,421,423,57880,7778,18881,812,15004,9110,8213,9300,1213,8193,8956,1108,778,65000,7020,1122,9031,17000,8039,8600,50090,1863,8191,65,6587,8136,9507,132,200,2070,308,5811,3465,8680,7999,7084,3938,5902,9595,442,4433,7171,7567,811,1128,6003,2125,6090,10007,7022,1949,6565,65001,1301,19244,10087,8025,5098,21080,1200,15801,1005,22343,7086,8601,6259,7102,10333,211,10082,18085,180,40000,7021,7702,66,38086,666,6603,1212,65493,96,9053,7031,23454,30088,6226,8660,6170,8972,48080,10118,40069,28780,20153,20021,20151,58898,10066,1818,9914,55351,8343,6546,3880,8902,22222,19045,5561,7979,5203,50240,49960,2007,1722,8913,8912,9504,8103,8567,1666,8720,8197,3012,8220,9039,5898,925,38517,8382,6842,8895,2808,447,3600,3606,45177,19101,171,133,8189,7108,10154,47078,6800,8122,381,15580,23352,3443,1180,268,2382,43651,10099,65533,7018,60010,60101,6699,2005,2009,59777,591,1933,9013,8477,9696,9030,2015,7925,6510,18803,280,5601,2901,2301,5201,302,610,5552,8809,6869,9212,17095,20001,8781,25024,5280,7909,17003,1088,7117,20052,10038,30551,9980,9180,59009,28280,7028,61999,7915,8384,9918,9919,55858,7215,77,9845,20140,7856,1982,1123,17777,8839,208,2886,877,6101,5100,804,983,5600,8402,5887,8322,5632,770,13333,7330,3216,31188,47583,8710,22580,1042,34440,20,7703,65055,8997,6543,6388,8283,7201,4040,61081,12001,3588,7123,2490,4389,1313,19080,9050,6920,299,20046,8892,9302,7899,30058,7094,6801,321,1356,12333,11362,11372,6602,7709,45149,3668,517,9912,8130,7050,7713,40080,8104,13988,18264,8799,7072,55070,23458,8176,9517,9541,9542,9512,8905,11660,44445,44401,17173,436,560,733,968,602,3133,3398,16580,8488,8901,8512,10443,9113,9119,6606,22080,5560,5757,1600,8250,10024,10200,333,73,7547,8054,6372,223,3737,9019,8067,45692,15400,15698,9038,37006,2086,1002,9188,8201,8202,30030,2663,9105,10017,4503,1104,8893,40001,27779,3010,7083,5010,5501,309,1389,10070,10069,10056,3094,10057,10078,10050,10060,10098,4180,10777,270,6365,9801,1046,7140,1004,9198,8465,8548,108,30015,8153,1020,50100,8391,34899,7090,6100,8777,8298,8281,7023,3377,8499,7501,4321,3437,9977,14338,843,7901,6020,6011,1988,4023,20202,20200,7995,18181,9836,586,2340,8110,9192,2525,6887,4005,8992,11212,2168,60080,6664,10005,956,1016,4453,8974,10101,58124,30025,7789,7280,8068,11180,1984,5566,916,8828,17071,15080,8820,104,21900,5151,860,6286,5118,18765,7055,9989,807,7751,8684,1999,9333,55352,8681,19994,3033,8017,7093,7896,4242,58083,56688,6167,9922,3618,7082,1603,16929,198,8075,7044,8232,12315,4570,4569,31082,8861,3680,4455,8403,4497,4380,7273,8896,21188,22480,1445,20165,20142,9068,1083,59093,41474,9224,9718,23380,5225,18889,4237,30,14549,8052,911,19000,7799,7300,9168,29798,4480,22228,7903,810,68,31000,9103,20992,8049,2261,8105,10152,5780,10111,3003,1,3,4,6,24,32,33,42,43,49,109,125,146,161,163,212,222,254,256,259,264,301,306,311,340,366,406,407,416,417,425,458,464,481,497,500,512,524,541,545,555,563,593,616,617,625,636,648,667,668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,898,900,901,902,903,912,981,987,992,1007,1009,1011,1021,1022,1023,1031,1032,1033,1034,1035,1036,1037,1038,1040,1043,1044,1045,1047,1050,1051,1052,1055,1057,1058,1059,1060,1061,1062,1063,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1084,1086,1087,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1102,1105,1106,1111,1112,1113,1114,1117,1119,1121,1124,1126,1130,1131,1132,1137,1138,1141,1145,1147,1148,1149,1151,1152,1154,1163,1164,1165,1166,1169,1174,1175,1183,1185,1186,1187,1192,1198,1199,1201,1216,1217,1218,1233,1236,1244,1247,1248,1259,1271,1272,1277,1287,1296,1309,1310,1311,1322,1328,1334,1352,1417,1434,1455,1461,1494,1501,1503,1521,1524,1533,1556,1580,1583,1594,1641,1658,1687,1688,1717,1718,1719,1721,1761,1782,1783,1805,1812,1839,1840,1862,1864,1875,1914,1935,1947,1971,1972,1974,1998,2002,2003,2004,2021,2022,2030,2033,2034,2035,2038,2040,2041,2042,2043,2045,2047,2048,2065,2068,2099,2105,2106,2111,2119,2126,2135,2144,2160,2161,2170,2179,2190,2191,2196,2200,2251,2260,2288,2323,2366,2381,2383,2393,2394,2399,2401,2492,2500,2522,2557,2601,2602,2604,2605,2607,2608,2638,2701,2702,2710,2718,2725,2800,2809,2811,2869,2875,2909,2910,2920,2968,2998,3005,3006,3007,3011,3017,3031,3052,3071,3077,3119,3162,3168,3211,3221,3260,3261,3268,3269,3283,3300,3301,3304,3307,3322,3323,3324,3325,3351,3367,3369,3370,3371,3372,3376,3390,3400,3404,3410,3476,3493,3514,3517,3527,3546,3551,3659,3684,3689,3697,3700,3731,3766,3784,3792,3800,3801,3808,3809,3814,3820,3824,3826,3827,3828,3846,3848,3849,3851,3852,3853,3859,3863,3869,3871,3878,3889,3905,3914,3918,3920,3945,3971,3995,3998,4002,4003,4004,4006,4045,4111,4125,4126,4129,4224,4279,4343,4444,4445,4446,4449,4550,4662,4900,4998,5004,5030,5033,5054,5061,5087,5102,5120,5214,5221,5222,5226,5269,5298,5405,5414,5431,5440,5500,5510,5550,5633,5679,5718,5730,5801,5802,5810,5815,5822,5825,5850,5859,5862,5877,5901,5903,5904,5906,5907,5910,5911,5915,5922,5925,5950,5952,5959,5960,5961,5962,5963,5987,5988,5989,5998,5999,6005,6007,6009,6025,6059,6106,6112,6123,6129,6156,6346,6389,6502,6547,6566,6567,6580,6667,6668,6669,6689,6692,6779,6788,6792,6839,6881,6901,7019,7025,7103,7106,7402,7435,7496,7512,7625,7627,7676,7741,7800,7911,7920,7937,7938,8194,8254,8290,8291,8292,8651,8652,8654,8701,8873,8994,9040,9071,9102,9207,9220,9290,9415,9418,9485,9502,9503,9535,9575,9593,9594,9618,9877,9878,9917,9929,9943,9944,9968,10012,10180,10215,10243,10566,10616,10617,10621,10626,10628,10629,10778,11110,11111,11967,12000,12174,12265,13456,13722,13782,13783,14238,14441,14442,15002,15003,15660,15742,16000,16001,16012,16016,16018,16113,16992,16993,17877,17988,18040,18101,18988,19283,19315,19350,19780,19801,19842,20005,20031,20221,20222,20828,21571,22939,23502,24444,24800,25734,25735,26214,27352,27353,27355,27356,27715,28201,30718,30951,31038,31337,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,33354,33899,34571,34572,34573,35500,38292,40193,40911,41511,42510,44176,44442,44443,44501,45100,49158,49159,49160,49161,49163,49165,49167,49175,49176,49400,49999,50001,50002,50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055,55056,55555,55600,56737,56738,57294,57797,60020,60443,61532,61900,62078,63331,64623,64680,65129,65389"\n\nsynPorts = cli.String("syn-ports", cli.setDefault(top5000))\n\nsynPortsList = str.ParseStringToPorts(top5000)\n\nif synPortsList != "" && len(synPortsList) == 0{\n    synPorts = top5000\n}\n\ncli.check()\n\nif len(tcpPortsList) >= 65535 {\n    tcpPorts = "1,3,4,6,7,8,9,13,17,19,20,21,22,23,24,25,26,27,30,32,33,37,42,43,49,53,55,57,59,60,65,66,68,70,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,106,108,109,110,111,113,114,119,122,123,125,127,132,133,135,137,138,139,143,144,146,157,161,163,171,179,180,188,198,199,200,206,208,210,211,212,220,222,223,225,235,250,251,252,254,255,256,257,259,264,268,270,280,299,301,302,306,308,309,311,321,333,340,366,381,388,389,403,406,407,411,416,417,419,421,423,425,427,436,441,442,443,444,445,447,458,464,465,475,481,497,500,502,511,512,513,514,515,517,522,523,524,540,541,543,544,545,548,554,555,556,557,560,563,586,587,590,591,593,600,602,606,610,616,617,621,623,625,631,636,639,641,646,648,655,657,659,660,666,667,668,669,674,683,684,687,688,690,691,700,701,705,709,710,711,713,714,715,720,722,725,726,728,729,730,731,732,733,740,748,749,754,757,758,765,770,777,778,780,782,783,786,787,790,792,795,800,801,802,803,804,805,806,807,808,809,810,811,812,822,823,825,829,839,840,843,846,856,859,860,862,864,866,873,874,877,878,880,888,889,898,900,901,902,903,904,905,911,912,913,916,918,921,922,924,925,928,930,931,943,953,955,956,968,969,971,980,981,983,987,990,992,993,995,996,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1116,1117,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1130,1131,1132,1134,1135,1136,1137,1138,1141,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154,1156,1157,1158,1159,1162,1163,1164,1165,1166,1167,1168,1169,1173,1174,1175,1176,1179,1180,1182,1183,1184,1185,1186,1187,1188,1190,1191,1192,1194,1195,1196,1198,1199,1200,1201,1204,1207,1208,1209,1210,1211,1212,1213,1215,1216,1217,1218,1220,1221,1222,1223,1228,1229,1233,1234,1236,1239,1240,1241,1243,1244,1247,1248,1249,1250,1251,1259,1261,1262,1264,1268,1270,1271,1272,1276,1277,1279,1282,1287,1290,1291,1296,1297,1299,1300,1301,1302,1303,1305,1306,1307,1308,1309,1310,1311,1313,1314,1315,1316,1317,1318,1319,1321,1322,1324,1327,1328,1330,1331,1334,1336,1337,1339,1340,1347,1350,1351,1352,1353,1356,1357,1389,1413,1414,1417,1433,1434,1443,1445,1455,1461,1494,1500,1501,1503,1516,1521,1522,1524,1525,1526,1527,1533,1547,1550,1556,1558,1559,1560,1565,1566,1569,1580,1583,1584,1592,1594,1598,1600,1603,1605,1607,1615,1620,1622,1630,1632,1635,1638,1641,1645,1658,1666,1677,1680,1683,1687,1688,1691,1694,1699,1700,1701,1703,1707,1708,1709,1711,1712,1713,1715,1717,1718,1719,1720,1721,1722,1723,1730,1735,1736,1745,1750,1752,1753,1755,1761,1782,1783,1790,1791,1792,1799,1800,1801,1805,1806,1807,1808,1811,1812,1818,1823,1825,1835,1839,1840,1858,1861,1862,1863,1864,1871,1875,1883,1888,1900,1901,1911,1912,1914,1918,1924,1927,1933,1935,1947,1949,1954,1958,1971,1972,1973,1974,1975,1976,1979,1980,1981,1982,1984,1988,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2020,2021,2022,2025,2030,2031,2033,2034,2035,2038,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2051,2060,2062,2065,2067,2068,2069,2070,2080,2081,2082,2083,2086,2087,2093,2095,2096,2099,2100,2101,2103,2104,2105,2106,2107,2110,2111,2112,2115,2119,2121,2124,2125,2126,2134,2135,2142,2144,2148,2150,2160,2161,2168,2170,2179,2181,2187,2190,2191,2196,2197,2200,2201,2203,2222,2224,2232,2241,2250,2251,2253,2260,2261,2262,2265,2269,2270,2271,2280,2288,2291,2292,2300,2301,2302,2304,2312,2313,2323,2325,2326,2330,2335,2340,2348,2366,2371,2372,2375,2381,2382,2383,2391,2393,2394,2399,2401,2418,2425,2433,2435,2436,2438,2439,2449,2456,2463,2472,2480,2490,2492,2500,2501,2505,2517,2521,2522,2525,2531,2532,2550,2551,2557,2558,2567,2580,2583,2584,2585,2598,2600,2601,2602,2604,2605,2606,2607,2608,2622,2623,2628,2631,2638,2644,2663,2691,2700,2701,2702,2706,2710,2711,2712,2717,2718,2723,2725,2728,2734,2800,2804,2806,2808,2809,2811,2812,2847,2850,2869,2875,2882,2886,2888,2889,2898,2901,2902,2903,2908,2909,2910,2920,2930,2957,2958,2967,2968,2973,2984,2987,2988,2991,2997,2998,3000,3001,3002,3003,3005,3006,3007,3008,3010,3011,3012,3013,3014,3017,3023,3025,3030,3031,3033,3050,3052,3057,3062,3063,3071,3077,3080,3089,3094,3102,3103,3118,3119,3121,3128,3133,3146,3162,3167,3168,3190,3200,3210,3211,3216,3220,3221,3240,3260,3261,3263,3268,3269,3280,3281,3283,3291,3299,3300,3301,3304,3306,3307,3310,3311,3312,3319,3322,3323,3324,3325,3333,3334,3351,3362,3363,3365,3367,3368,3369,3370,3371,3372,3374,3376,3377,3380,3388,3389,3390,3396,3398,3399,3400,3404,3410,3414,3415,3419,3425,3430,3437,3439,3443,3456,3465,3476,3479,3483,3485,3486,3493,3497,3503,3505,3506,3511,3513,3514,3515,3517,3519,3520,3526,3527,3530,3532,3535,3546,3551,3577,3580,3586,3588,3599,3600,3602,3603,3606,3618,3621,3622,3632,3636,3637,3652,3653,3656,3658,3659,3663,3668,3669,3670,3672,3680,3681,3683,3684,3689,3690,3697,3700,3703,3712,3721,3728,3731,3737,3742,3749,3765,3766,3784,3787,3788,3790,3792,3793,3795,3796,3798,3799,3800,3801,3803,3806,3808,3809,3810,3811,3812,3813,3814,3817,3820,3823,3824,3825,3826,3827,3828,3830,3831,3837,3839,3842,3846,3847,3848,3849,3850,3851,3852,3853,3856,3859,3860,3863,3868,3869,3870,3871,3872,3876,3878,3879,3880,3882,3888,3889,3890,3897,3899,3901,3902,3904,3905,3906,3907,3908,3909,3911,3913,3914,3915,3916,3918,3919,3920,3922,3923,3928,3929,3930,3931,3935,3936,3937,3938,3940,3941,3943,3944,3945,3946,3948,3949,3952,3956,3957,3961,3962,3963,3964,3967,3968,3969,3971,3972,3975,3979,3980,3981,3982,3983,3986,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4009,4010,4016,4020,4022,4023,4024,4025,4029,4035,4036,4039,4040,4045,4056,4058,4065,4080,4087,4090,4096,4100,4101,4111,4112,4113,4118,4119,4120,4121,4125,4126,4129,4135,4141,4143,4147,4158,4161,4164,4174,4180,4190,4192,4200,4206,4220,4224,4234,4237,4242,4252,4262,4279,4294,4297,4298,4300,4302,4321,4325,4328,4333,4342,4343,4355,4356,4357,4358,4369,4374,4375,4376,4380,4384,4388,4389,4401,4407,4414,4415,4418,4430,4433,4440,4442,4443,4444,4445,4446,4447,4449,4453,4454,4455,4464,4471,4476,4480,4497,4503,4516,4517,4530,4534,4545,4550,4555,4558,4559,4567,4569,4570,4599,4600,4601,4602,4606,4609,4644,4649,4658,4662,4665,4687,4689,4700,4712,4713,4745,4760,4767,4770,4771,4778,4793,4800,4819,4848,4850,4859,4860,4875,4876,4877,4881,4899,4900,4903,4912,4931,4949,4998,4999,5000,5001,5002,5003,5004,5005,5009,5010,5011,5012,5013,5014,5015,5016,5017,5020,5021,5023,5030,5033,5040,5050,5051,5052,5053,5054,5055,5060,5061,5063,5066,5070,5074,5080,5081,5087,5088,5090,5095,5096,5098,5100,5101,5102,5111,5114,5118,5120,5121,5122,5125,5133,5137,5147,5151,5152,5155,5156,5190,5200,5201,5202,5203,5212,5214,5219,5221,5222,5223,5225,5226,5233,5234,5235,5242,5250,5252,5255,5256,5259,5261,5269,5279,5280,5291,5298,5339,5347,5353,5357,5370,5377,5405,5414,5423,5431,5432,5433,5440,5441,5442,5444,5457,5458,5473,5475,5500,5501,5502,5510,5520,5544,5550,5552,5553,5555,5560,5561,5566,5600,5601,5631,5632,5633,5644,5655,5656,5666,5671,5672,5678,5679,5680,5718,5730,5757,5780,5800,5801,5802,5803,5807,5810,5811,5812,5815,5818,5822,5823,5825,5850,5859,5862,5868,5869,5877,5881,5887,5888,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5909,5910,5911,5914,5915,5918,5922,5925,5938,5940,5950,5952,5959,5960,5961,5962,5963,5966,5968,5981,5987,5988,5989,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6017,6020,6025,6050,6051,6059,6060,6068,6080,6088,6090,6100,6101,6103,6106,6112,6118,6123,6129,6156,6167,6170,6180,6198,6203,6222,6226,6247,6259,6286,6346,6365,6372,6379,6388,6389,6443,6481,6500,6502,6504,6510,6520,6543,6546,6547,6550,6565,6566,6567,6580,6587,6600,6602,6603,6606,6611,6646,6648,6662,6664,6666,6667,6668,6669,6670,6677,6680,6688,6689,6692,6699,6711,6732,6778,6779,6788,6789,6792,6800,6801,6839,6842,6868,6869,6879,6881,6886,6887,6888,6889,6890,6896,6901,6920,6969,6988,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7017,7018,7019,7020,7021,7022,7023,7024,7025,7028,7031,7041,7044,7048,7050,7051,7055,7060,7070,7071,7072,7074,7078,7080,7081,7082,7083,7084,7086,7088,7090,7093,7094,7100,7101,7102,7103,7106,7108,7111,7117,7123,7129,7140,7171,7180,7200,7201,7202,7215,7241,7272,7273,7278,7280,7281,7288,7300,7321,7330,7380,7402,7435,7438,7443,7474,7496,7500,7501,7512,7547,7567,7625,7627,7676,7680,7687,7688,7700,7702,7703,7709,7711,7713,7725,7741,7742,7744,7749,7751,7770,7776,7777,7778,7788,7789,7791,7799,7800,7801,7856,7878,7888,7890,7896,7899,7900,7901,7903,7909,7911,7913,7915,7920,7921,7925,7929,7937,7938,7942,7943,7979,7995,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8060,8061,8062,8064,8065,8066,8067,8068,8069,8070,8071,8073,8075,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8108,8110,8111,8112,8118,8119,8122,8123,8130,8133,8136,8144,8153,8161,8168,8172,8176,8180,8181,8182,8183,8184,8186,8188,8189,8190,8191,8192,8193,8194,8196,8197,8200,8201,8202,8213,8220,8222,8232,8244,8250,8254,8258,8260,8280,8281,8282,8283,8288,8290,8291,8292,8293,8294,8298,8300,8308,8322,8333,8341,8343,8360,8380,8381,8382,8383,8384,8385,8390,8391,8399,8400,8401,8402,8403,8443,8445,8448,8465,8477,8480,8481,8484,8488,8499,8500,8512,8540,8548,8567,8580,8582,8585,8600,8601,8610,8648,8649,8651,8652,8654,8660,8666,8675,8676,8680,8681,8684,8686,8688,8700,8701,8710,8720,8735,8765,8766,8777,8780,8781,8787,8788,8799,8800,8801,8802,8806,8808,8809,8810,8813,8820,8822,8828,8834,8838,8839,8844,8848,8858,8860,8861,8864,8866,8868,8873,8877,8879,8880,8881,8885,8886,8887,8888,8889,8890,8891,8892,8893,8895,8896,8898,8899,8900,8901,8902,8905,8910,8912,8913,8955,8956,8972,8974,8980,8983,8987,8988,8989,8990,8991,8992,8994,8996,8997,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9019,9020,9022,9025,9030,9031,9036,9038,9039,9040,9043,9050,9053,9060,9061,9068,9070,9071,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9105,9110,9111,9112,9113,9119,9131,9152,9168,9180,9182,9188,9190,9191,9192,9197,9198,9200,9201,9207,9212,9220,9224,9231,9290,9300,9301,9302,9333,9409,9415,9418,9437,9443,9444,9448,9485,9494,9500,9501,9502,9503,9504,9507,9512,9517,9527,9535,9541,9542,9575,9593,9594,9595,9600,9618,9621,9643,9666,9673,9696,9704,9718,9800,9801,9815,9836,9845,9876,9877,9878,9888,9889,9898,9900,9901,9909,9910,9912,9914,9917,9918,9919,9922,9929,9941,9943,9944,9968,9977,9980,9981,9986,9988,9989,9990,9991,9992,9995,9997,9998,9999,10000,10001,10002,10003,10004,10005,10007,10008,10009,10010,10011,10012,10016,10017,10021,10022,10023,10024,10025,10034,10038,10040,10050,10051,10056,10057,10058,10060,10066,10068,10069,10070,10078,10080,10082,10083,10086,10087,10088,10089,10098,10099,10101,10111,10118,10152,10154,10160,10180,10200,10215,10243,10250,10255,10333,10443,10566,10616,10617,10621,10626,10628,10629,10777,10778,10873,11000,11001,11080,11110,11111,11158,11180,11211,11212,11324,11347,11362,11366,11372,11381,11660,11967,12000,12001,12006,12018,12021,12059,12174,12215,12262,12265,12315,12333,12345,12346,12380,12443,12452,12881,13333,13382,13456,13722,13724,13782,13783,13988,14000,14007,14238,14338,14441,14442,14549,15000,15001,15002,15003,15004,15018,15080,15400,15402,15580,15660,15672,15693,15698,15742,15801,15888,16000,16001,16012,16016,16018,16080,16113,16580,16705,16788,16800,16851,16929,16992,16993,17000,17003,17071,17095,17173,17595,17777,17877,17988,18000,18001,18002,18004,18008,18018,18040,18060,18080,18081,18082,18085,18088,18090,18098,18101,18103,18181,18264,18765,18801,18803,18880,18881,18888,18889,18988,19000,19001,19010,19045,19080,19101,19244,19283,19315,19350,19780,19801,19842,19900,19994,20000,20001,20002,20005,20021,20022,20031,20046,20052,20140,20142,20151,20153,20165,20200,20202,20221,20222,20720,20806,20808,20828,20992,21000,21080,21188,21245,21501,21502,21571,21792,21900,22080,22222,22228,22343,22480,22580,22939,23052,23352,23380,23454,23458,23502,23796,24444,24800,25006,25024,25734,25735,26000,26214,26470,27000,27017,27352,27353,27355,27356,27357,27715,27779,28017,28018,28080,28099,28201,28211,28214,28280,28780,29672,29798,29831,30000,30001,30005,30015,30025,30030,30058,30082,30088,30551,30704,30718,30951,31000,31038,31082,31188,31337,31727,31945,32766,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,32791,32792,32803,32816,32822,32835,33354,33453,33554,33899,34440,34571,34572,34573,34899,35500,35513,37006,37839,38000,38037,38080,38086,38185,38188,38292,38443,38501,38517,38888,39136,39376,39659,40000,40001,40069,40080,40193,40310,40811,40911,41064,41474,41511,41516,41523,42424,42510,43651,44176,44334,44401,44442,44443,44445,44501,44709,45100,45149,45177,45692,46200,46996,47078,47088,47544,47583,48080,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49164,49165,49167,49168,49171,49175,49176,49186,49195,49236,49400,49401,49705,49960,49999,50000,50001,50002,50003,50006,50030,50045,50050,50060,50070,50075,50080,50090,50100,50240,50300,50389,50500,50636,50800,51103,51106,51191,51413,51493,52660,52673,52710,52735,52822,52847,52848,52849,52850,52851,52853,52869,53211,53313,53314,53535,54045,54328,55020,55055,55056,55070,55351,55352,55555,55576,55600,55858,56688,56737,56738,57294,57665,57797,57880,58000,58001,58002,58031,58060,58080,58083,58124,58630,58632,58838,58898,59009,59093,59110,59200,59201,59202,59777,59999,60000,60010,60020,60022,60030,60080,60101,60123,60146,60443,60465,60642,61081,61532,61613,61616,61900,61999,62078,63331,64623,64680,65000,65001,65055,65129,65310,65389,65486,65493,65533"\n    synPorts = str.Join(str.FilterPorts("1-65535",tcpPorts), ",")\n} else {\n    synPorts = str.Join(str.FilterPorts(synPorts,tcpPorts), ",")\n}\n\ntcpOps = []\ntcpOps = append(tcpOps, servicescan.active(true))\n\ntcpOps = append(tcpOps, servicescan.concurrent(50))\ntcpOps = append(tcpOps, servicescan.maxProbes(4))\n\ntcpOps = append(tcpOps, servicescan.probeTimeout(5.0))\n\ntcpOps = append(tcpOps, servicescan.all())\n\n// 设置排除端口和主机\nif excludePorts != "" {\n    yakit.Info("设置排除端口：%v", excludePorts)\n    tcpOps = append(tcpOps, servicescan.excludePorts(excludePorts))\n}\nif excludeHosts != "" {\n    yakit.Info("设置排除主机：%v", excludeHosts)\n    tcpOps = append(tcpOps, servicescan.excludeHosts(excludeHosts))\n}\n\nsynPortsList = str.ParseStringToPorts(synPorts)\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\nyakit.Info("SYN Port 端口个数 ：%v",len(synPortsList))\nyakit.Info("TCP Port 端口个数 ：%v",len(tcpPortsList))\nyakit.Info("扫描参数设置完成，准备扫描~")\n\n\nvar synscanEnable = false\ntry {\n    yakit.Info("检测 SYN 扫描是否可用中")\n    for res in synscan.Scan("127.0.0.1", "80", synscan.wait(1))~ {  }\n    \n    synscanEnable = true\n    // yakit.StatusCard("SYN 扫描", "可用")\n} catch err {\n    yakit.Info("SYN 扫描不可用，原因是：%v", err)\n}\n\n\n\nbruteOpt = []\n\nbruteOpt = append(bruteOpt, brute.minDelay(1), brute.maxDelay(5))\n\nbruteOpt = append(bruteOpt, brute.finishingThreshold(1))\nbruteOpt = append(bruteOpt, brute.concurrentTarget(20))\nbruteOpt = append(bruteOpt, brute.concurrent(1))\n\nbruteWg = sync.NewSizedWaitGroup(10)\n\nbruteScan = func(result) {\n    bruteWg.Add()\n    go func() {\n      \tdefer bruteWg.Done()\n        bruteType = ""\n        if result.GetServiceName() == "exasoftport1" {\n            return\n        }\n        \n        for _, bt := range brute.GetAvailableBruteTypes() {\n            if result.GetServiceName().Lower().Contains(bt) || bt.Contains(result.GetServiceName().Lower()) {\n                bruteType = bt\n                break\n            }\n            \n        }\n        \n\n        if bruteType == "" {\n            return\n        }\n        \n\n        defaultusers = []\n        defaultpass = []\n\n        if bruteType == "ftp" {\n            defaultusers = ["ftp", "www", "anonymous", "admin"]\n            defaultpass = ["admin", "admin123", "123456"]\n        } else if bruteType == "memcached" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "123456"]\n        } else if bruteType == "mongodb" {\n            defaultusers = ["root", "admin", "mongodb"]\n            defaultpass = ["root", "admin123", "root@123", "123456"]\n        } else if bruteType == "mssql" {\n            defaultusers = ["root", "admin", "mssql"]\n            defaultpass = ["root", "admin123", "root@123", "admin", "123456"]\n        } else if bruteType == "mysql" {\n            defaultusers = ["mysql", "root", "admin"]\n            defaultpass = ["root", "123456", "admin123", "admin", "root@123"]\n        } else if bruteType == "postgres" {\n            defaultusers = ["postgres", "root", "admin"]\n            defaultpass = ["root", "admin", "123456"]\n        } else if bruteType == "rdp" {\n            defaultusers = ["admin", "administrator", "root", "guest"]\n            defaultpass = ["administrator", "guest", "admin", "123456"]\n        } else if bruteType == "redis" {\n            defaultusers = ["redis"]\n            defaultpass = ["redis", "123456"]\n        } else if bruteType == "smb" {\n            defaultusers = ["administrator", "admin", "test", "guest", "system", "root", "sa"]\n            defaultpass = ["admin123!@#", "admin", "admin123", "admin@123", "admin#123", "123456", "root@123"]\n        } else if bruteType == "snmp" {\n            defaultusers = ["snmp"]\n            defaultpass = ["public", "private", "0", "0392a0", "1234", "2read", "4changes"]\n        } else if bruteType == "ssh" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "telnet" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "tomcat" {\n            defaultusers = ["manager", "tomcat"]\n            defaultpass = ["tomcat", "manager"]\n        } else if bruteType == "vnc" {\n            defaultusers = ["vnc"]\n            defaultpass = ["123456", "admin", "root"]\n        //} else if bruteType == "oracle" {\n          //  defaultusers = ["sys", "system", "oracle"]\n            //defaultpass = ["sys", "system", "oracle", "123456", ""]\n        } else if bruteType == "rtsp" {\n            defaultusers = ["admin"]\n            defaultpass = ["12345", "123456", ""]\n        } else {\n          \treturn\n        }\n        \n\n        uL = make([]string)\n        pL = make([]string)\n\n        uL = append(uL, defaultusers...)\n\n        pL = append(pL, defaultpass...)\n\n        bruteTasks := len(uL) * len(pL)// 计算爆破任务数量        \n\n        addr := str.HostPort(result.Target, result.Port)\n        yakit.Info("Start Load Bruter for %s: %s", bruteType, addr)\n\n        instance, err := brute.New(string(bruteType), brute.userList(uL...), brute.passList(pL...), brute.debug(true), \n                                   brute.okToStop(true), bruteOpt...)\n        if err != nil {\n            yakit.Error(\n                "构建弱口令与未授权扫描失败：%v", \n                err, \n            )\n            return\n        }\n        \n\n        res, err := instance.Start(addr)\n        if err != nil {\n            yakit.Error("输入目标失败：%v", err)\n            return\n        }\n        \n\n        riskTarget = addr\n        for rt := range res {\n            yakit.Info("rt string %v ", rt.String())\n            if rt == nil {\n                continue\n            }\n            \n\n            if !rt.Ok {\n                continue\n            }\n            \n            if rt.Username == "" && rt.Password == "" {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("未授权访问"), \n                    risk.title(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.titleVerbose(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.description("由于配置不当或管理疏忽，某些服务、接口或应用存在未授权访问的风险。攻击者可以直接访问这些资源而不需要任何身份验证，这可能会导致敏感数据的泄露、系统的滥用或其他恶意行为。"), \n                    risk.solution(`1. 审核所有公开可访问的服务、接口和应用，确保它们都有适当的访问控制。\n2. 使用身份验证机制，如用户名/密码、API密钥或OAuth。\n3. 定期监控和审查访问日志，以检测任何可疑或未授权的活动。`), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            } else {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("弱口令"), \n                    risk.description("网站管理、运营人员由于安全意识不足，为了方便、避免忘记密码等，使用了非常容易记住的密码，或者是直接采用了系统的默认密码等。攻击者利用此漏洞可直接进入应用系统或者管理系统，从而进行系统、网页、数据的篡改与删除，非法获取系统、用户的数据，甚至可能导致服务器沦陷。"), \n                    risk.solution("用户层面 : 不要使用常见的弱口令作为密码,不要多个系统或者社交账号使用同一套密码,定期修改密码,建议使用包含随机值的或者随机生成的字符串作为系统密码"), \n                    risk.title(sprintf(\n                        "Weak Password[%v]：%v user(%v) pass(%v)", \n                        rt.Type, \n                        rt.Target, \n                        rt.Username, \n                        rt.Password, \n                    )), \n                    risk.titleVerbose(sprintf("弱口令[%v]：%v user(%v) pass(%v)", rt.Type, rt.Target, rt.Username, \n                                              rt.Password)), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            }\n            \n        }\n    }()\n}\n\nhandleServiceScanResult = func(result) {\n\n    manager.HandleServiceScanResult(result)\n    if enableBruteFlag && len(result.GetServiceName()) != 0 {\n        serviceName = result.GetServiceName()\n        yakit.Info("Start Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n        bruteScan(result)\n        yakit.Info("End Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n    }\n}\n\naliveHostCountList = []\n\n\nOpenPortCount = 0\nopenPortCountLock = sync.NewLock()\naddOpenPortCount = func() {\n    openPortCountLock.Lock()\n    defer openPortCountLock.Unlock()\n    OpenPortCount++\n}\n\nruntimeID = os.Getenv("YAK_RUNTIME_ID")\n\nfunc handleTCP(targets) {\n    try {\n        for result in servicescan.Scan(targets, tcpPorts, tcpOps...)~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            \n            yakit.Info("GOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err {\n        yakit.Error("处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\nfunc handleSYN(targets){\n\n    try {\n        for result in servicescan.ScanFromSynResult(\n            synscan.Scan(targets, synPorts, \n                    synscan.excludePorts(tcpPorts),\n                    synscan.concurrent(synConcurrent),\n                )~, \n                tcpOps..., \n            )~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            yakit.Info("SYNGOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err { \n        yakit.Error("SYN 处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\n\n\n\n\ntargets = str.ParseStringToHosts(targetRaw)\n\ninfo = {}\n\nalive = ""\n\nfor res := range ping.Scan(targetRaw, pingOpt...) {\n    if res.Ok {\n        alive += res.IP + ","\n    }\n}\n\nlog.Info("ping res %s",alive)\n\naliveTargets = str.ParseStringToHosts(alive)\n\n\ninfo["runtime_id"] = runtimeID\ninfo["host_total"] = len(targets)\ninfo["port_total"] = len(synPortsList) + len(tcpPortsList)\ninfo["plugins"] = len(pluginNames)\n\ninfoJson = json.dumps(info)\n\ndb.SetKey("JznQXuFDSepeNWHbiLGEwONiaBxhvj_SERVER_SCAN_MANAGER", infoJson)\n\ntargetBatch = ""\ncount := 0\nwgTCP := sync.NewSizedWaitGroup(50)\n\nfor _, target = range aliveTargets{\n    currentTarget = target\n\n    if count > 0 {\n        targetBatch += "," + currentTarget\n    } else {\n        targetBatch = currentTarget\n    }\n    count++\n\n    if count == 50 {\n        wgTCP.Add()\n        go func {\n            defer wgTCP.Done()\n            handleTCP(targetBatch)\n        }\n        if synscanEnable {\n            handleSYN(targetBatch)\n        }\n        targetBatch = ""\n        count = 0\n    }\n}\nlog.Info("targetBatch %s", targetBatch)\n\nif count > 0 {\n    wgTCP.Add()\n    go func {\n        defer wgTCP.Done()\n        handleTCP(targetBatch)\n    }\n    if synscanEnable {\n        handleSYN(targetBatch)\n    }\n}\n\nif synscanEnable {\n    yakit.StatusCard("SYN", "DONE")\n}\n\nwgTCP.Wait()\n\nhostCountSec = len(aliveHostCountList)\n\n\nif hostCountSec != 0 {\n    // 根据存活 ip + (加载成功的插件数 * 2s)/concurrent  + 开放端口数\n    // 定时器，超过一定时间，就扫描结束\n    waitTimeSec = hostCountSec + (loadPluginFinished * 2)/20 + OpenPortCount\n    if waitTimeSec < 10 {\n        waitTimeSec = 60\n    }\n  \tyakit.Info("waitTimeSec %v", waitTimeSec)\n    time.AfterFunc(waitTimeSec * 1000 * 1000 * 1000, func() {\n        yakit.SetProgress(1)\n        yakit.Info("AfterFunc 本次扫描任务已完成。")\n        os.Exit(0)\n    })\n}\nbruteWg.Wait()\nmanager.Wait()',
        script_type: '端口与漏洞扫描',
        tags: ['distributed-script'],
        type: '普通漏洞扫描',
    },
    {
        description: '专用靶场测试',
        disallow_scheduled: true,
        prompt_args: [
            {
                explain: '',
                key: 'target',
                value: '',
            },
            {
                explain: 'bool 类型，是否启用弱口令检测',
                key: 'enable-brute',
                value: '',
            },
            {
                explain:
                    '端口，当输入 1-65535 时，会分配 syn 和 tcp 扫描全端口',
                key: 'ports',
                value: '',
            },
        ],
        script: '// 重构SYN-20240718 go0p\n\nyakit.AutoInitYakit()\nloglevel(`info`)\n\n/*\n创建插件:\n   1. 插件的执行状态需要注意：加载成功与否？\n*/\n\n\ntargetRaw = cli.String("target",cli.setRequired(true))\n\npluginsStr = cli.String("plugins",cli.setRequired(true))\n\n// host alive scan\nskippedHostAliveScan = cli.String("skipped-host-alive-scan",cli.setDefault("false"))\nhostAliveConcurrent = cli.Int("host-alive-concurrent", cli.setDefault(20), cli.setRequired(false))\nhostAliveTimeout = cli.Float("host-alive-timeout", cli.setDefault(5.0), cli.setRequired(false))\nhostAliveTCPPorts = cli.String("host-alive-ports", cli.setDefault("80,22,443"), cli.setRequired(false))\n\nskippedHostAliveScanFlag = false\n\nif skippedHostAliveScan == "true" {\n    skippedHostAliveScanFlag = true\n}\n\n\npluginStatusMap = {};\npluginNames = str.Split(pluginsStr, ",")\nyakit.Info("开始创建漏洞扫描管理器")\nmanager, err := hook.NewMixPluginCaller()\nif err != nil {\n    yakit.Error("创建失败：%v", err)\n}\n\nmanager.SetDividedContext(true)\nmanager.SetConcurrent(20)\n\nloadPluginFinished = 0\nx.Foreach(pluginNames, func(i) {\n    // 插件加载状态\n    statusName = "加载中"\n    err = manager.LoadPlugin(i)\n    if err != nil {\n        yakit.Info("加载插件【%v】失败：%v", i, err)\n        statusName = "加载失败"\n    } else {\n        loadPluginFinished++\n\n        yakit.Info(i + " [加载成功]")\n\t   yakit.Info(sprintf("涉及扫描插件：%v个", len(pluginNames)))\n        statusName = "加载成功"\n    }\n    pluginStatusMap[i] = [i, statusName]\n})\n\n\n\n\npingOpt = []\n\n\nenableBrute = cli.String("enable-brute",cli.setDefault("false"))\n\n\nenableBruteFlag = false\n\nif enableBrute == "true" {\n    enableBruteFlag = true\n}\n\nif skippedHostAliveScan {\n    pingOpt = append(pingOpt, ping.skip(skippedHostAliveScanFlag))\n}\n\nif hostAliveTimeout > 0 {\n    pingOpt = append(pingOpt, ping.timeout(hostAliveTimeout))\n}\n\n\nif hostAliveConcurrent > 0 {\n    pingOpt = append(pingOpt, ping.concurrent(hostAliveConcurrent))\n}\n\n\nif len(hostAliveTCPPorts) > 0 {\n    pingOpt = append(pingOpt, ping.tcpPingPorts(hostAliveTCPPorts))\n}\n\nsynConcurrent = cli.Int("syn-concurrent", cli.setDefault(2000))\n\nexcludeHosts = cli.String("exclude-hosts")\nexcludePorts = cli.String("exclude-ports")\n\ntop100 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018"\n\ntcpPorts = cli.String("ports", cli.setDefault(top100))\n\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\n\nif len(tcpPortsList) == 0{\n    tcpPorts = top100\n}\n\n// top 5000 ports\ntop5000 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018,93,6666,7010,100,9003,6789,7060,8022,4848,3050,8787,8013,8040,10021,2011,6006,4000,8055,4430,6060,7788,8066,9898,8801,10040,7006,803,6688,10080,8050,7011,7009,40310,802,10003,8014,2080,7288,9992,8005,8889,5644,8886,9500,58031,50000,9020,8015,50060,8887,8021,8700,9900,9191,3312,8186,8735,8380,1234,38080,2110,8007,21245,3333,2046,9061,8686,9011,8061,9876,8282,60465,2222,9009,1100,18081,70,8383,5155,8188,2517,50070,8062,11324,9231,999,28214,8987,809,2010,7700,3535,7921,11080,6778,805,8073,114,2012,701,8810,8400,9007,8808,8065,8822,15000,9901,11158,1107,28099,12345,2006,9527,51106,688,25006,8045,9006,8023,8029,9997,7048,8580,8585,8035,10088,20022,4001,9005,2013,20808,3580,7742,8119,32766,50075,7272,3380,3220,7801,5256,5255,10086,1300,5200,6198,1158,6889,3503,6088,9991,806,8183,8688,1001,58080,1182,9025,8112,7776,7321,235,8077,8500,11347,7081,8877,8480,9182,58000,8026,11001,10089,5888,8196,8078,9995,2014,5656,8019,5003,8481,6002,9889,9015,8866,8182,8057,8399,8308,511,12881,4016,1039,28080,5678,7500,8051,18801,15018,15888,38443,8123,9004,8144,94,9070,1800,9112,8990,3456,2051,9131,97,7100,7711,7180,11000,8037,6988,122,8885,14007,8184,7012,8079,9888,9301,59999,49705,1979,8900,5080,5013,1550,8844,4850,206,5156,8813,3030,1790,8802,9012,5544,3721,8980,10009,8043,8390,7943,8381,8056,7111,1500,5881,9437,5655,8102,65486,4443,3690,10025,8024,8333,8666,103,8,9666,8999,9111,8071,522,11381,20806,8041,1085,8864,7900,1700,8036,8032,8033,8111,60022,955,3080,8788,27017,7443,8192,6969,9909,5002,9990,188,8910,9022,50030,866,8582,4300,9101,6879,8891,4567,4440,10051,10068,50080,8341,30001,6890,8168,8955,16788,8190,18060,6379,7041,42424,15693,2521,19010,18103,6010,8898,9910,9190,8260,8445,1680,8890,8649,30082,3013,30000,2480,7202,9704,5233,8991,11366,7888,8780,7129,6600,47088,7791,18888,50045,15672,2585,60,9494,31945,2060,8610,8860,58060,6118,2348,38000,18880,13382,6611,8064,7101,5081,7380,7942,10016,8027,2093,403,9014,8133,6886,95,8058,9201,6443,5966,27000,7017,6680,8401,9036,8988,8806,6180,421,423,57880,7778,18881,812,15004,9110,8213,9300,1213,8193,8956,1108,778,65000,7020,1122,9031,17000,8039,8600,50090,1863,8191,65,6587,8136,9507,132,200,2070,308,5811,3465,8680,7999,7084,3938,5902,9595,442,4433,7171,7567,811,1128,6003,2125,6090,10007,7022,1949,6565,65001,1301,19244,10087,8025,5098,21080,1200,15801,1005,22343,7086,8601,6259,7102,10333,211,10082,18085,180,40000,7021,7702,66,38086,666,6603,1212,65493,96,9053,7031,23454,30088,6226,8660,6170,8972,48080,10118,40069,28780,20153,20021,20151,58898,10066,1818,9914,55351,8343,6546,3880,8902,22222,19045,5561,7979,5203,50240,49960,2007,1722,8913,8912,9504,8103,8567,1666,8720,8197,3012,8220,9039,5898,925,38517,8382,6842,8895,2808,447,3600,3606,45177,19101,171,133,8189,7108,10154,47078,6800,8122,381,15580,23352,3443,1180,268,2382,43651,10099,65533,7018,60010,60101,6699,2005,2009,59777,591,1933,9013,8477,9696,9030,2015,7925,6510,18803,280,5601,2901,2301,5201,302,610,5552,8809,6869,9212,17095,20001,8781,25024,5280,7909,17003,1088,7117,20052,10038,30551,9980,9180,59009,28280,7028,61999,7915,8384,9918,9919,55858,7215,77,9845,20140,7856,1982,1123,17777,8839,208,2886,877,6101,5100,804,983,5600,8402,5887,8322,5632,770,13333,7330,3216,31188,47583,8710,22580,1042,34440,20,7703,65055,8997,6543,6388,8283,7201,4040,61081,12001,3588,7123,2490,4389,1313,19080,9050,6920,299,20046,8892,9302,7899,30058,7094,6801,321,1356,12333,11362,11372,6602,7709,45149,3668,517,9912,8130,7050,7713,40080,8104,13988,18264,8799,7072,55070,23458,8176,9517,9541,9542,9512,8905,11660,44445,44401,17173,436,560,733,968,602,3133,3398,16580,8488,8901,8512,10443,9113,9119,6606,22080,5560,5757,1600,8250,10024,10200,333,73,7547,8054,6372,223,3737,9019,8067,45692,15400,15698,9038,37006,2086,1002,9188,8201,8202,30030,2663,9105,10017,4503,1104,8893,40001,27779,3010,7083,5010,5501,309,1389,10070,10069,10056,3094,10057,10078,10050,10060,10098,4180,10777,270,6365,9801,1046,7140,1004,9198,8465,8548,108,30015,8153,1020,50100,8391,34899,7090,6100,8777,8298,8281,7023,3377,8499,7501,4321,3437,9977,14338,843,7901,6020,6011,1988,4023,20202,20200,7995,18181,9836,586,2340,8110,9192,2525,6887,4005,8992,11212,2168,60080,6664,10005,956,1016,4453,8974,10101,58124,30025,7789,7280,8068,11180,1984,5566,916,8828,17071,15080,8820,104,21900,5151,860,6286,5118,18765,7055,9989,807,7751,8684,1999,9333,55352,8681,19994,3033,8017,7093,7896,4242,58083,56688,6167,9922,3618,7082,1603,16929,198,8075,7044,8232,12315,4570,4569,31082,8861,3680,4455,8403,4497,4380,7273,8896,21188,22480,1445,20165,20142,9068,1083,59093,41474,9224,9718,23380,5225,18889,4237,30,14549,8052,911,19000,7799,7300,9168,29798,4480,22228,7903,810,68,31000,9103,20992,8049,2261,8105,10152,5780,10111,3003,1,3,4,6,24,32,33,42,43,49,109,125,146,161,163,212,222,254,256,259,264,301,306,311,340,366,406,407,416,417,425,458,464,481,497,500,512,524,541,545,555,563,593,616,617,625,636,648,667,668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,898,900,901,902,903,912,981,987,992,1007,1009,1011,1021,1022,1023,1031,1032,1033,1034,1035,1036,1037,1038,1040,1043,1044,1045,1047,1050,1051,1052,1055,1057,1058,1059,1060,1061,1062,1063,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1084,1086,1087,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1102,1105,1106,1111,1112,1113,1114,1117,1119,1121,1124,1126,1130,1131,1132,1137,1138,1141,1145,1147,1148,1149,1151,1152,1154,1163,1164,1165,1166,1169,1174,1175,1183,1185,1186,1187,1192,1198,1199,1201,1216,1217,1218,1233,1236,1244,1247,1248,1259,1271,1272,1277,1287,1296,1309,1310,1311,1322,1328,1334,1352,1417,1434,1455,1461,1494,1501,1503,1521,1524,1533,1556,1580,1583,1594,1641,1658,1687,1688,1717,1718,1719,1721,1761,1782,1783,1805,1812,1839,1840,1862,1864,1875,1914,1935,1947,1971,1972,1974,1998,2002,2003,2004,2021,2022,2030,2033,2034,2035,2038,2040,2041,2042,2043,2045,2047,2048,2065,2068,2099,2105,2106,2111,2119,2126,2135,2144,2160,2161,2170,2179,2190,2191,2196,2200,2251,2260,2288,2323,2366,2381,2383,2393,2394,2399,2401,2492,2500,2522,2557,2601,2602,2604,2605,2607,2608,2638,2701,2702,2710,2718,2725,2800,2809,2811,2869,2875,2909,2910,2920,2968,2998,3005,3006,3007,3011,3017,3031,3052,3071,3077,3119,3162,3168,3211,3221,3260,3261,3268,3269,3283,3300,3301,3304,3307,3322,3323,3324,3325,3351,3367,3369,3370,3371,3372,3376,3390,3400,3404,3410,3476,3493,3514,3517,3527,3546,3551,3659,3684,3689,3697,3700,3731,3766,3784,3792,3800,3801,3808,3809,3814,3820,3824,3826,3827,3828,3846,3848,3849,3851,3852,3853,3859,3863,3869,3871,3878,3889,3905,3914,3918,3920,3945,3971,3995,3998,4002,4003,4004,4006,4045,4111,4125,4126,4129,4224,4279,4343,4444,4445,4446,4449,4550,4662,4900,4998,5004,5030,5033,5054,5061,5087,5102,5120,5214,5221,5222,5226,5269,5298,5405,5414,5431,5440,5500,5510,5550,5633,5679,5718,5730,5801,5802,5810,5815,5822,5825,5850,5859,5862,5877,5901,5903,5904,5906,5907,5910,5911,5915,5922,5925,5950,5952,5959,5960,5961,5962,5963,5987,5988,5989,5998,5999,6005,6007,6009,6025,6059,6106,6112,6123,6129,6156,6346,6389,6502,6547,6566,6567,6580,6667,6668,6669,6689,6692,6779,6788,6792,6839,6881,6901,7019,7025,7103,7106,7402,7435,7496,7512,7625,7627,7676,7741,7800,7911,7920,7937,7938,8194,8254,8290,8291,8292,8651,8652,8654,8701,8873,8994,9040,9071,9102,9207,9220,9290,9415,9418,9485,9502,9503,9535,9575,9593,9594,9618,9877,9878,9917,9929,9943,9944,9968,10012,10180,10215,10243,10566,10616,10617,10621,10626,10628,10629,10778,11110,11111,11967,12000,12174,12265,13456,13722,13782,13783,14238,14441,14442,15002,15003,15660,15742,16000,16001,16012,16016,16018,16113,16992,16993,17877,17988,18040,18101,18988,19283,19315,19350,19780,19801,19842,20005,20031,20221,20222,20828,21571,22939,23502,24444,24800,25734,25735,26214,27352,27353,27355,27356,27715,28201,30718,30951,31038,31337,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,33354,33899,34571,34572,34573,35500,38292,40193,40911,41511,42510,44176,44442,44443,44501,45100,49158,49159,49160,49161,49163,49165,49167,49175,49176,49400,49999,50001,50002,50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055,55056,55555,55600,56737,56738,57294,57797,60020,60443,61532,61900,62078,63331,64623,64680,65129,65389"\n\nsynPorts = cli.String("syn-ports", cli.setDefault(top5000))\n\nsynPortsList = str.ParseStringToPorts(top5000)\n\nif synPortsList != "" && len(synPortsList) == 0{\n    synPorts = top5000\n}\n\ncli.check()\n\nif len(tcpPortsList) >= 65535 {\n    tcpPorts = "1,3,4,6,7,8,9,13,17,19,20,21,22,23,24,25,26,27,30,32,33,37,42,43,49,53,55,57,59,60,65,66,68,70,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,106,108,109,110,111,113,114,119,122,123,125,127,132,133,135,137,138,139,143,144,146,157,161,163,171,179,180,188,198,199,200,206,208,210,211,212,220,222,223,225,235,250,251,252,254,255,256,257,259,264,268,270,280,299,301,302,306,308,309,311,321,333,340,366,381,388,389,403,406,407,411,416,417,419,421,423,425,427,436,441,442,443,444,445,447,458,464,465,475,481,497,500,502,511,512,513,514,515,517,522,523,524,540,541,543,544,545,548,554,555,556,557,560,563,586,587,590,591,593,600,602,606,610,616,617,621,623,625,631,636,639,641,646,648,655,657,659,660,666,667,668,669,674,683,684,687,688,690,691,700,701,705,709,710,711,713,714,715,720,722,725,726,728,729,730,731,732,733,740,748,749,754,757,758,765,770,777,778,780,782,783,786,787,790,792,795,800,801,802,803,804,805,806,807,808,809,810,811,812,822,823,825,829,839,840,843,846,856,859,860,862,864,866,873,874,877,878,880,888,889,898,900,901,902,903,904,905,911,912,913,916,918,921,922,924,925,928,930,931,943,953,955,956,968,969,971,980,981,983,987,990,992,993,995,996,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1116,1117,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1130,1131,1132,1134,1135,1136,1137,1138,1141,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154,1156,1157,1158,1159,1162,1163,1164,1165,1166,1167,1168,1169,1173,1174,1175,1176,1179,1180,1182,1183,1184,1185,1186,1187,1188,1190,1191,1192,1194,1195,1196,1198,1199,1200,1201,1204,1207,1208,1209,1210,1211,1212,1213,1215,1216,1217,1218,1220,1221,1222,1223,1228,1229,1233,1234,1236,1239,1240,1241,1243,1244,1247,1248,1249,1250,1251,1259,1261,1262,1264,1268,1270,1271,1272,1276,1277,1279,1282,1287,1290,1291,1296,1297,1299,1300,1301,1302,1303,1305,1306,1307,1308,1309,1310,1311,1313,1314,1315,1316,1317,1318,1319,1321,1322,1324,1327,1328,1330,1331,1334,1336,1337,1339,1340,1347,1350,1351,1352,1353,1356,1357,1389,1413,1414,1417,1433,1434,1443,1445,1455,1461,1494,1500,1501,1503,1516,1521,1522,1524,1525,1526,1527,1533,1547,1550,1556,1558,1559,1560,1565,1566,1569,1580,1583,1584,1592,1594,1598,1600,1603,1605,1607,1615,1620,1622,1630,1632,1635,1638,1641,1645,1658,1666,1677,1680,1683,1687,1688,1691,1694,1699,1700,1701,1703,1707,1708,1709,1711,1712,1713,1715,1717,1718,1719,1720,1721,1722,1723,1730,1735,1736,1745,1750,1752,1753,1755,1761,1782,1783,1790,1791,1792,1799,1800,1801,1805,1806,1807,1808,1811,1812,1818,1823,1825,1835,1839,1840,1858,1861,1862,1863,1864,1871,1875,1883,1888,1900,1901,1911,1912,1914,1918,1924,1927,1933,1935,1947,1949,1954,1958,1971,1972,1973,1974,1975,1976,1979,1980,1981,1982,1984,1988,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2020,2021,2022,2025,2030,2031,2033,2034,2035,2038,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2051,2060,2062,2065,2067,2068,2069,2070,2080,2081,2082,2083,2086,2087,2093,2095,2096,2099,2100,2101,2103,2104,2105,2106,2107,2110,2111,2112,2115,2119,2121,2124,2125,2126,2134,2135,2142,2144,2148,2150,2160,2161,2168,2170,2179,2181,2187,2190,2191,2196,2197,2200,2201,2203,2222,2224,2232,2241,2250,2251,2253,2260,2261,2262,2265,2269,2270,2271,2280,2288,2291,2292,2300,2301,2302,2304,2312,2313,2323,2325,2326,2330,2335,2340,2348,2366,2371,2372,2375,2381,2382,2383,2391,2393,2394,2399,2401,2418,2425,2433,2435,2436,2438,2439,2449,2456,2463,2472,2480,2490,2492,2500,2501,2505,2517,2521,2522,2525,2531,2532,2550,2551,2557,2558,2567,2580,2583,2584,2585,2598,2600,2601,2602,2604,2605,2606,2607,2608,2622,2623,2628,2631,2638,2644,2663,2691,2700,2701,2702,2706,2710,2711,2712,2717,2718,2723,2725,2728,2734,2800,2804,2806,2808,2809,2811,2812,2847,2850,2869,2875,2882,2886,2888,2889,2898,2901,2902,2903,2908,2909,2910,2920,2930,2957,2958,2967,2968,2973,2984,2987,2988,2991,2997,2998,3000,3001,3002,3003,3005,3006,3007,3008,3010,3011,3012,3013,3014,3017,3023,3025,3030,3031,3033,3050,3052,3057,3062,3063,3071,3077,3080,3089,3094,3102,3103,3118,3119,3121,3128,3133,3146,3162,3167,3168,3190,3200,3210,3211,3216,3220,3221,3240,3260,3261,3263,3268,3269,3280,3281,3283,3291,3299,3300,3301,3304,3306,3307,3310,3311,3312,3319,3322,3323,3324,3325,3333,3334,3351,3362,3363,3365,3367,3368,3369,3370,3371,3372,3374,3376,3377,3380,3388,3389,3390,3396,3398,3399,3400,3404,3410,3414,3415,3419,3425,3430,3437,3439,3443,3456,3465,3476,3479,3483,3485,3486,3493,3497,3503,3505,3506,3511,3513,3514,3515,3517,3519,3520,3526,3527,3530,3532,3535,3546,3551,3577,3580,3586,3588,3599,3600,3602,3603,3606,3618,3621,3622,3632,3636,3637,3652,3653,3656,3658,3659,3663,3668,3669,3670,3672,3680,3681,3683,3684,3689,3690,3697,3700,3703,3712,3721,3728,3731,3737,3742,3749,3765,3766,3784,3787,3788,3790,3792,3793,3795,3796,3798,3799,3800,3801,3803,3806,3808,3809,3810,3811,3812,3813,3814,3817,3820,3823,3824,3825,3826,3827,3828,3830,3831,3837,3839,3842,3846,3847,3848,3849,3850,3851,3852,3853,3856,3859,3860,3863,3868,3869,3870,3871,3872,3876,3878,3879,3880,3882,3888,3889,3890,3897,3899,3901,3902,3904,3905,3906,3907,3908,3909,3911,3913,3914,3915,3916,3918,3919,3920,3922,3923,3928,3929,3930,3931,3935,3936,3937,3938,3940,3941,3943,3944,3945,3946,3948,3949,3952,3956,3957,3961,3962,3963,3964,3967,3968,3969,3971,3972,3975,3979,3980,3981,3982,3983,3986,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4009,4010,4016,4020,4022,4023,4024,4025,4029,4035,4036,4039,4040,4045,4056,4058,4065,4080,4087,4090,4096,4100,4101,4111,4112,4113,4118,4119,4120,4121,4125,4126,4129,4135,4141,4143,4147,4158,4161,4164,4174,4180,4190,4192,4200,4206,4220,4224,4234,4237,4242,4252,4262,4279,4294,4297,4298,4300,4302,4321,4325,4328,4333,4342,4343,4355,4356,4357,4358,4369,4374,4375,4376,4380,4384,4388,4389,4401,4407,4414,4415,4418,4430,4433,4440,4442,4443,4444,4445,4446,4447,4449,4453,4454,4455,4464,4471,4476,4480,4497,4503,4516,4517,4530,4534,4545,4550,4555,4558,4559,4567,4569,4570,4599,4600,4601,4602,4606,4609,4644,4649,4658,4662,4665,4687,4689,4700,4712,4713,4745,4760,4767,4770,4771,4778,4793,4800,4819,4848,4850,4859,4860,4875,4876,4877,4881,4899,4900,4903,4912,4931,4949,4998,4999,5000,5001,5002,5003,5004,5005,5009,5010,5011,5012,5013,5014,5015,5016,5017,5020,5021,5023,5030,5033,5040,5050,5051,5052,5053,5054,5055,5060,5061,5063,5066,5070,5074,5080,5081,5087,5088,5090,5095,5096,5098,5100,5101,5102,5111,5114,5118,5120,5121,5122,5125,5133,5137,5147,5151,5152,5155,5156,5190,5200,5201,5202,5203,5212,5214,5219,5221,5222,5223,5225,5226,5233,5234,5235,5242,5250,5252,5255,5256,5259,5261,5269,5279,5280,5291,5298,5339,5347,5353,5357,5370,5377,5405,5414,5423,5431,5432,5433,5440,5441,5442,5444,5457,5458,5473,5475,5500,5501,5502,5510,5520,5544,5550,5552,5553,5555,5560,5561,5566,5600,5601,5631,5632,5633,5644,5655,5656,5666,5671,5672,5678,5679,5680,5718,5730,5757,5780,5800,5801,5802,5803,5807,5810,5811,5812,5815,5818,5822,5823,5825,5850,5859,5862,5868,5869,5877,5881,5887,5888,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5909,5910,5911,5914,5915,5918,5922,5925,5938,5940,5950,5952,5959,5960,5961,5962,5963,5966,5968,5981,5987,5988,5989,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6017,6020,6025,6050,6051,6059,6060,6068,6080,6088,6090,6100,6101,6103,6106,6112,6118,6123,6129,6156,6167,6170,6180,6198,6203,6222,6226,6247,6259,6286,6346,6365,6372,6379,6388,6389,6443,6481,6500,6502,6504,6510,6520,6543,6546,6547,6550,6565,6566,6567,6580,6587,6600,6602,6603,6606,6611,6646,6648,6662,6664,6666,6667,6668,6669,6670,6677,6680,6688,6689,6692,6699,6711,6732,6778,6779,6788,6789,6792,6800,6801,6839,6842,6868,6869,6879,6881,6886,6887,6888,6889,6890,6896,6901,6920,6969,6988,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7017,7018,7019,7020,7021,7022,7023,7024,7025,7028,7031,7041,7044,7048,7050,7051,7055,7060,7070,7071,7072,7074,7078,7080,7081,7082,7083,7084,7086,7088,7090,7093,7094,7100,7101,7102,7103,7106,7108,7111,7117,7123,7129,7140,7171,7180,7200,7201,7202,7215,7241,7272,7273,7278,7280,7281,7288,7300,7321,7330,7380,7402,7435,7438,7443,7474,7496,7500,7501,7512,7547,7567,7625,7627,7676,7680,7687,7688,7700,7702,7703,7709,7711,7713,7725,7741,7742,7744,7749,7751,7770,7776,7777,7778,7788,7789,7791,7799,7800,7801,7856,7878,7888,7890,7896,7899,7900,7901,7903,7909,7911,7913,7915,7920,7921,7925,7929,7937,7938,7942,7943,7979,7995,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8060,8061,8062,8064,8065,8066,8067,8068,8069,8070,8071,8073,8075,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8108,8110,8111,8112,8118,8119,8122,8123,8130,8133,8136,8144,8153,8161,8168,8172,8176,8180,8181,8182,8183,8184,8186,8188,8189,8190,8191,8192,8193,8194,8196,8197,8200,8201,8202,8213,8220,8222,8232,8244,8250,8254,8258,8260,8280,8281,8282,8283,8288,8290,8291,8292,8293,8294,8298,8300,8308,8322,8333,8341,8343,8360,8380,8381,8382,8383,8384,8385,8390,8391,8399,8400,8401,8402,8403,8443,8445,8448,8465,8477,8480,8481,8484,8488,8499,8500,8512,8540,8548,8567,8580,8582,8585,8600,8601,8610,8648,8649,8651,8652,8654,8660,8666,8675,8676,8680,8681,8684,8686,8688,8700,8701,8710,8720,8735,8765,8766,8777,8780,8781,8787,8788,8799,8800,8801,8802,8806,8808,8809,8810,8813,8820,8822,8828,8834,8838,8839,8844,8848,8858,8860,8861,8864,8866,8868,8873,8877,8879,8880,8881,8885,8886,8887,8888,8889,8890,8891,8892,8893,8895,8896,8898,8899,8900,8901,8902,8905,8910,8912,8913,8955,8956,8972,8974,8980,8983,8987,8988,8989,8990,8991,8992,8994,8996,8997,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9019,9020,9022,9025,9030,9031,9036,9038,9039,9040,9043,9050,9053,9060,9061,9068,9070,9071,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9105,9110,9111,9112,9113,9119,9131,9152,9168,9180,9182,9188,9190,9191,9192,9197,9198,9200,9201,9207,9212,9220,9224,9231,9290,9300,9301,9302,9333,9409,9415,9418,9437,9443,9444,9448,9485,9494,9500,9501,9502,9503,9504,9507,9512,9517,9527,9535,9541,9542,9575,9593,9594,9595,9600,9618,9621,9643,9666,9673,9696,9704,9718,9800,9801,9815,9836,9845,9876,9877,9878,9888,9889,9898,9900,9901,9909,9910,9912,9914,9917,9918,9919,9922,9929,9941,9943,9944,9968,9977,9980,9981,9986,9988,9989,9990,9991,9992,9995,9997,9998,9999,10000,10001,10002,10003,10004,10005,10007,10008,10009,10010,10011,10012,10016,10017,10021,10022,10023,10024,10025,10034,10038,10040,10050,10051,10056,10057,10058,10060,10066,10068,10069,10070,10078,10080,10082,10083,10086,10087,10088,10089,10098,10099,10101,10111,10118,10152,10154,10160,10180,10200,10215,10243,10250,10255,10333,10443,10566,10616,10617,10621,10626,10628,10629,10777,10778,10873,11000,11001,11080,11110,11111,11158,11180,11211,11212,11324,11347,11362,11366,11372,11381,11660,11967,12000,12001,12006,12018,12021,12059,12174,12215,12262,12265,12315,12333,12345,12346,12380,12443,12452,12881,13333,13382,13456,13722,13724,13782,13783,13988,14000,14007,14238,14338,14441,14442,14549,15000,15001,15002,15003,15004,15018,15080,15400,15402,15580,15660,15672,15693,15698,15742,15801,15888,16000,16001,16012,16016,16018,16080,16113,16580,16705,16788,16800,16851,16929,16992,16993,17000,17003,17071,17095,17173,17595,17777,17877,17988,18000,18001,18002,18004,18008,18018,18040,18060,18080,18081,18082,18085,18088,18090,18098,18101,18103,18181,18264,18765,18801,18803,18880,18881,18888,18889,18988,19000,19001,19010,19045,19080,19101,19244,19283,19315,19350,19780,19801,19842,19900,19994,20000,20001,20002,20005,20021,20022,20031,20046,20052,20140,20142,20151,20153,20165,20200,20202,20221,20222,20720,20806,20808,20828,20992,21000,21080,21188,21245,21501,21502,21571,21792,21900,22080,22222,22228,22343,22480,22580,22939,23052,23352,23380,23454,23458,23502,23796,24444,24800,25006,25024,25734,25735,26000,26214,26470,27000,27017,27352,27353,27355,27356,27357,27715,27779,28017,28018,28080,28099,28201,28211,28214,28280,28780,29672,29798,29831,30000,30001,30005,30015,30025,30030,30058,30082,30088,30551,30704,30718,30951,31000,31038,31082,31188,31337,31727,31945,32766,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,32791,32792,32803,32816,32822,32835,33354,33453,33554,33899,34440,34571,34572,34573,34899,35500,35513,37006,37839,38000,38037,38080,38086,38185,38188,38292,38443,38501,38517,38888,39136,39376,39659,40000,40001,40069,40080,40193,40310,40811,40911,41064,41474,41511,41516,41523,42424,42510,43651,44176,44334,44401,44442,44443,44445,44501,44709,45100,45149,45177,45692,46200,46996,47078,47088,47544,47583,48080,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49164,49165,49167,49168,49171,49175,49176,49186,49195,49236,49400,49401,49705,49960,49999,50000,50001,50002,50003,50006,50030,50045,50050,50060,50070,50075,50080,50090,50100,50240,50300,50389,50500,50636,50800,51103,51106,51191,51413,51493,52660,52673,52710,52735,52822,52847,52848,52849,52850,52851,52853,52869,53211,53313,53314,53535,54045,54328,55020,55055,55056,55070,55351,55352,55555,55576,55600,55858,56688,56737,56738,57294,57665,57797,57880,58000,58001,58002,58031,58060,58080,58083,58124,58630,58632,58838,58898,59009,59093,59110,59200,59201,59202,59777,59999,60000,60010,60020,60022,60030,60080,60101,60123,60146,60443,60465,60642,61081,61532,61613,61616,61900,61999,62078,63331,64623,64680,65000,65001,65055,65129,65310,65389,65486,65493,65533"\n    synPorts = str.Join(str.FilterPorts("1-65535",tcpPorts), ",")\n} else {\n    synPorts = str.Join(str.FilterPorts(synPorts,tcpPorts), ",")\n}\n\ntcpOps = []\ntcpOps = append(tcpOps, servicescan.active(true))\n\ntcpOps = append(tcpOps, servicescan.concurrent(50))\ntcpOps = append(tcpOps, servicescan.maxProbes(4))\n\ntcpOps = append(tcpOps, servicescan.probeTimeout(5.0))\n\ntcpOps = append(tcpOps, servicescan.all())\n\n// 设置排除端口和主机\nif excludePorts != "" {\n    yakit.Info("设置排除端口：%v", excludePorts)\n    tcpOps = append(tcpOps, servicescan.excludePorts(excludePorts))\n}\nif excludeHosts != "" {\n    yakit.Info("设置排除主机：%v", excludeHosts)\n    tcpOps = append(tcpOps, servicescan.excludeHosts(excludeHosts))\n}\n\nsynPortsList = str.ParseStringToPorts(synPorts)\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\nyakit.Info("SYN Port 端口个数 ：%v",len(synPortsList))\nyakit.Info("TCP Port 端口个数 ：%v",len(tcpPortsList))\nyakit.Info("扫描参数设置完成，准备扫描~")\n\n\nvar synscanEnable = false\ntry {\n    yakit.Info("检测 SYN 扫描是否可用中")\n    for res in synscan.Scan("127.0.0.1", "80", synscan.wait(1))~ {  }\n    \n    synscanEnable = true\n    // yakit.StatusCard("SYN 扫描", "可用")\n} catch err {\n    yakit.Info("SYN 扫描不可用，原因是：%v", err)\n}\n\n\n\nbruteOpt = []\n\nbruteOpt = append(bruteOpt, brute.minDelay(1), brute.maxDelay(5))\n\nbruteOpt = append(bruteOpt, brute.finishingThreshold(1))\nbruteOpt = append(bruteOpt, brute.concurrentTarget(20))\nbruteOpt = append(bruteOpt, brute.concurrent(1))\n\nbruteWg = sync.NewSizedWaitGroup(10)\n\nbruteScan = func(result) {\n    bruteWg.Add()\n    go func() {\n      \tdefer bruteWg.Done()\n        bruteType = ""\n        if result.GetServiceName() == "exasoftport1" {\n            return\n        }\n        \n        for _, bt := range brute.GetAvailableBruteTypes() {\n            if result.GetServiceName().Lower().Contains(bt) || bt.Contains(result.GetServiceName().Lower()) {\n                bruteType = bt\n                break\n            }\n            \n        }\n        \n\n        if bruteType == "" {\n            return\n        }\n        \n\n        defaultusers = []\n        defaultpass = []\n\n        if bruteType == "ftp" {\n            defaultusers = ["ftp", "www", "anonymous", "admin"]\n            defaultpass = ["admin", "admin123", "123456"]\n        } else if bruteType == "memcached" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "123456"]\n        } else if bruteType == "mongodb" {\n            defaultusers = ["root", "admin", "mongodb"]\n            defaultpass = ["root", "admin123", "root@123", "123456"]\n        } else if bruteType == "mssql" {\n            defaultusers = ["root", "admin", "mssql"]\n            defaultpass = ["root", "admin123", "root@123", "admin", "123456"]\n        } else if bruteType == "mysql" {\n            defaultusers = ["mysql", "root", "admin"]\n            defaultpass = ["root", "123456", "admin123", "admin", "root@123"]\n        } else if bruteType == "postgres" {\n            defaultusers = ["postgres", "root", "admin"]\n            defaultpass = ["root", "admin", "123456"]\n        } else if bruteType == "rdp" {\n            defaultusers = ["admin", "administrator", "root", "guest"]\n            defaultpass = ["administrator", "guest", "admin", "123456"]\n        } else if bruteType == "redis" {\n            defaultusers = ["redis"]\n            defaultpass = ["redis", "123456"]\n        } else if bruteType == "smb" {\n            defaultusers = ["administrator", "admin", "test", "guest", "system", "root", "sa"]\n            defaultpass = ["admin123!@#", "admin", "admin123", "admin@123", "admin#123", "123456", "root@123"]\n        } else if bruteType == "snmp" {\n            defaultusers = ["snmp"]\n            defaultpass = ["public", "private", "0", "0392a0", "1234", "2read", "4changes"]\n        } else if bruteType == "ssh" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "telnet" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "tomcat" {\n            defaultusers = ["manager", "tomcat"]\n            defaultpass = ["tomcat", "manager"]\n        } else if bruteType == "vnc" {\n            defaultusers = ["vnc"]\n            defaultpass = ["123456", "admin", "root"]\n        //} else if bruteType == "oracle" {\n          //  defaultusers = ["sys", "system", "oracle"]\n            //defaultpass = ["sys", "system", "oracle", "123456", ""]\n        } else if bruteType == "rtsp" {\n            defaultusers = ["admin"]\n            defaultpass = ["12345", "123456", ""]\n        } else {\n          \treturn\n        }\n        \n\n        uL = make([]string)\n        pL = make([]string)\n\n        uL = append(uL, defaultusers...)\n\n        pL = append(pL, defaultpass...)\n\n        bruteTasks := len(uL) * len(pL)// 计算爆破任务数量        \n\n        addr := str.HostPort(result.Target, result.Port)\n        yakit.Info("Start Load Bruter for %s: %s", bruteType, addr)\n\n        instance, err := brute.New(string(bruteType), brute.userList(uL...), brute.passList(pL...), brute.debug(true), \n                                   brute.okToStop(true), bruteOpt...)\n        if err != nil {\n            yakit.Error(\n                "构建弱口令与未授权扫描失败：%v", \n                err, \n            )\n            return\n        }\n        \n\n        res, err := instance.Start(addr)\n        if err != nil {\n            yakit.Error("输入目标失败：%v", err)\n            return\n        }\n        \n\n        riskTarget = addr\n        for rt := range res {\n            yakit.Info("rt string %v ", rt.String())\n            if rt == nil {\n                continue\n            }\n            \n\n            if !rt.Ok {\n                continue\n            }\n            \n            if rt.Username == "" && rt.Password == "" {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("未授权访问"), \n                    risk.title(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.titleVerbose(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.description("由于配置不当或管理疏忽，某些服务、接口或应用存在未授权访问的风险。攻击者可以直接访问这些资源而不需要任何身份验证，这可能会导致敏感数据的泄露、系统的滥用或其他恶意行为。"), \n                    risk.solution(`1. 审核所有公开可访问的服务、接口和应用，确保它们都有适当的访问控制。\n2. 使用身份验证机制，如用户名/密码、API密钥或OAuth。\n3. 定期监控和审查访问日志，以检测任何可疑或未授权的活动。`), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            } else {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("弱口令"), \n                    risk.description("网站管理、运营人员由于安全意识不足，为了方便、避免忘记密码等，使用了非常容易记住的密码，或者是直接采用了系统的默认密码等。攻击者利用此漏洞可直接进入应用系统或者管理系统，从而进行系统、网页、数据的篡改与删除，非法获取系统、用户的数据，甚至可能导致服务器沦陷。"), \n                    risk.solution("用户层面 : 不要使用常见的弱口令作为密码,不要多个系统或者社交账号使用同一套密码,定期修改密码,建议使用包含随机值的或者随机生成的字符串作为系统密码"), \n                    risk.title(sprintf(\n                        "Weak Password[%v]：%v user(%v) pass(%v)", \n                        rt.Type, \n                        rt.Target, \n                        rt.Username, \n                        rt.Password, \n                    )), \n                    risk.titleVerbose(sprintf("弱口令[%v]：%v user(%v) pass(%v)", rt.Type, rt.Target, rt.Username, \n                                              rt.Password)), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            }\n            \n        }\n    }()\n}\n\nhandleServiceScanResult = func(result) {\n\n    manager.HandleServiceScanResult(result)\n    if enableBruteFlag && len(result.GetServiceName()) != 0 {\n        serviceName = result.GetServiceName()\n        yakit.Info("Start Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n        bruteScan(result)\n        yakit.Info("End Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n    }\n}\n\naliveHostCountList = []\n\n\nOpenPortCount = 0\nopenPortCountLock = sync.NewLock()\naddOpenPortCount = func() {\n    openPortCountLock.Lock()\n    defer openPortCountLock.Unlock()\n    OpenPortCount++\n}\n\nruntimeID = os.Getenv("YAK_RUNTIME_ID")\n\nfunc handleTCP(targets) {\n    try {\n        for result in servicescan.Scan(targets, tcpPorts, tcpOps...)~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            \n            yakit.Info("GOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err {\n        yakit.Error("处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\nfunc handleSYN(targets){\n\n    try {\n        for result in servicescan.ScanFromSynResult(\n            synscan.Scan(targets, synPorts, \n                    synscan.excludePorts(tcpPorts),\n                    synscan.concurrent(synConcurrent),\n                )~, \n                tcpOps..., \n            )~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            yakit.Info("SYNGOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err { \n        yakit.Error("SYN 处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\n\n\n\n\n\n\ntargets = str.ParseStringToHosts(targetRaw)\n\ninfo = {}\n\nalive = ""\n\nfor res := range ping.Scan(targetRaw, pingOpt...) {\n    if res.Ok {\n        alive += res.IP + ","\n    }\n}\n\nlog.Info("ping res %s",alive)\n\naliveTargets = str.ParseStringToHosts(alive)\n\n\ninfo["runtime_id"] = runtimeID\ninfo["host_total"] = len(targets)\ninfo["port_total"] = len(synPortsList) + len(tcpPortsList)\ninfo["plugins"] = len(pluginNames)\n\ninfoJson = json.dumps(info)\n\ndb.SetKey("JznQXuFDSepeNWHbiLGEwONiaBxhvj_SERVER_SCAN_MANAGER", infoJson)\n\ntargetBatch = ""\ncount := 0\nwgTCP := sync.NewSizedWaitGroup(50)\n\nfor _, target = range aliveTargets{\n    currentTarget = target\n\n    if count > 0 {\n        targetBatch += "," + currentTarget\n    } else {\n        targetBatch = currentTarget\n    }\n    count++\n\n    if count == 50 {\n        wgTCP.Add()\n        go func {\n            defer wgTCP.Done()\n            handleTCP(targetBatch)\n        }\n        if synscanEnable {\n            handleSYN(targetBatch)\n        }\n        targetBatch = ""\n        count = 0\n    }\n}\nlog.Info("targetBatch %s", targetBatch)\n\nif count > 0 {\n    wgTCP.Add()\n    go func {\n        defer wgTCP.Done()\n        handleTCP(targetBatch)\n    }\n    if synscanEnable {\n        handleSYN(targetBatch)\n    }\n}\n\nif synscanEnable {\n    yakit.StatusCard("SYN", "DONE")\n}\n\nwgTCP.Wait()\n\nhostCountSec = len(aliveHostCountList)\n\n\nif hostCountSec != 0 {\n    // 根据存活 ip + (加载成功的插件数 * 2s)/concurrent  + 开放端口数\n    // 定时器，超过一定时间，就扫描结束\n    waitTimeSec = hostCountSec + (loadPluginFinished * 2)/20 + OpenPortCount\n    if waitTimeSec < 10 {\n        waitTimeSec = 60\n    }\n  \tyakit.Info("waitTimeSec %v", waitTimeSec)\n    time.AfterFunc(waitTimeSec * 1000 * 1000 * 1000, func() {\n        yakit.SetProgress(1)\n        yakit.Info("AfterFunc 本次扫描任务已完成。")\n        os.Exit(0)\n    })\n}\nbruteWg.Wait()\nmanager.Wait()',
        script_type: '端口与漏洞扫描',
        tags: ['distributed-script'],
        type: '靶场测试漏洞扫描',
    },
    {
        description: '',
        disallow_scheduled: true,
        prompt_args: [
            {
                explain: '',
                key: 'gsil_keyword',
                value: '',
            },
        ],
        script: 'tokensStr =cli.String("token", cli.setDefault("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"))\nqueriesStr = cli.String("keyword",cli.setDefault("@uestc.edu.cn"))\n\n\nif tokensStr  == "" {\n  tokensStr = "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"\n}\ncli.check()\n\ndump(cli.Args())\n\ntokens = str.Split(tokensStr, ",")\nqueries = str.Split(queriesStr, ",")\nif len(tokens) == 0 {\n    tokens = append(tokens, "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")\n}\n\nif len(queries) == 0 {\n    queries = append(queries, "@uestc.edu.cn")\n}\n\n\nrawSearch =`GET /search/code?order=desc&per_page=10&q={{urlenc({{p(query)}})}}&sort=indexed HTTP/1.1\nHost: api.github.com\nUser-Agent: go-github/v63.0.0\nAuthorization: Bearer {{p(token)}}\nX-Github-Api-Version: 2022-11-28\nAccept-Encoding: gzip\n\n`\n\n\n// 条目如果被标记为 已处理/忽略，则不再显示\nfunc filterByDB(){\n    risk.YieldRiskByRuntimeId(runtimeId /*type: string*/)\n}\n\nfunc getRepoInfo(query,items) {\n    for item in items {\n        repo = item.repository.full_name\n        risk.NewRisk(\n            item.html_url, \n            risk.severity("high"),\n            risk.title(f"GitHub敏感信息泄露监控-[${repo}]"),\n            risk.payload(query),\n            risk.type("GSIL"),\nrisk.description("GitHub敏感信息泄露指的是在GitHub仓库中无意间公开了包含敏感数据的文件。这可能包括API密钥、数据库凭证、配置文件和其他应保密的信息。如果这些信息被公开，可能会导致数据泄露、账户被盗用或其他安全事件。"),\n            risk.solution(`为防止敏感信息泄露，建议采取以下措施：\n1. 使用.gitignore文件排除敏感文件和目录，防止它们被提交到仓库。\n2. 定期检查代码库中是否包含敏感信息。\n3. 使用密钥管理系统来存储和访问敏感数据，而不是硬编码在代码中。\n4. 对开发团队进行安全意识培训，确保他们了解如何安全地处理敏感信息。\n5. 利用GitHub的Secrets功能来安全地管理和访问敏感数据。\n6. 使用自动化工具扫描代码库，识别和解决潜在的敏感信息泄露问题。\n`),\n            risk.details(item.repository)\n        )\n    }\n}\n\n\ntokenIndex := 0\n\n\nfor query in queries {\n    token := tokens[tokenIndex] // 获取当前令牌\n    tokenIndex = (tokenIndex + 1) % len(tokens) // 更新令牌索引，循环使用令牌\n    params = {"query":query,"token":token}\n    sleep(10)\n    rsp, _ , err = poc.HTTPEx(rawSearch, poc.params(params),poc.https(true))\n    die(err)\n    code := rsp.GetStatusCode()\n    if code != 200 {\n        continue\n    }\n   body = rsp.GetBody()\n   bodyObj = json.loads(body)\n   try {\n        totalCount = bodyObj.total_count\n        if totalCount < 1 {\n            continue\n        }\n        items = bodyObj.items\n        getRepoInfo(query,items)\n   }catch {\n        log.Info("resp info", string(body))\n   }\n}\n\nruntimeID = env.Get("YAK_RUNTIME_ID")\n\nreportInstance = report.New()\nreportInstance.From("Github 敏感信息泄露")\ndefer func {\n    err := recover()\n    if err != nil {\n        yakit.Info("扫描报告构建失败：%#v", err)\n    }\n\n    id = reportInstance.Save()\n    yakit.Report(id)\n    println(runtimeID)\n}\n\n\n\nprintln(runtimeID)\nseverityToRisks = {}\ntargetToRisks = {}\nriskAll = []\npotentialRisks = []\nnoPotentialRisks = []\nweakPassWordRisks = []\nnoWeakPassWordRisks = []\n\n// 风险漏洞分组\n// env.Get("YAK_RUNTIME_ID")\nfor riskInstance = range risk.YieldRiskByRuntimeId(runtimeID) {\n    //println(riskInstance.IP)\n    // 按照级别分类 Risk\n    // printf("#%v\\\\n", riskInstance)\n    if severityToRisks[riskInstance.Severity] == undefined {\n        severityToRisks[riskInstance.Severity] = []\n    }\n\n    severityToRisks[riskInstance.Severity] = append(severityToRisks[riskInstance.Severity], riskInstance)\n\n    // 按照 IP 来分类 Risk\n    if targetToRisks[riskInstance.IP] == undefined {\n        targetToRisks[riskInstance.IP] = []\n    }\n\n    targetToRisks[riskInstance.IP] = append(targetToRisks[riskInstance.IP], riskInstance)\n\n    if parseBool(riskInstance.IsPotential) {\n        potentialRisks = append(potentialRisks, riskInstance)\n    } else {\n        noPotentialRisks = append(noPotentialRisks, riskInstance)\n    }\n\n\n    if riskInstance.RiskTypeVerbose == "弱口令" {\n        weakPassWordRisks = append(weakPassWordRisks, riskInstance)\n    } else {\n        noWeakPassWordRisks = append(noWeakPassWordRisks, riskInstance)\n    }\n\n\n    riskAll = append(riskAll, riskInstance)\n}\n\nreportInstance.Title("Github 铭感信息泄露")\n\n\nreportInstance.Markdown("### 1.1.1 漏洞统计")\nloopholeCriticalLens = 0\nloopholeHighLens = 0\nloopholeWarningLens = 0\nloopholeLowLens = 0\nif len(noPotentialRisks) == 0 {\n    reportInstance.Raw({"type": "report-cover", "data": "security"})\n} else {\n    for index, info = range noPotentialRisks {\n        if str.Contains(info.Severity, "critical") {\n            loopholeCriticalLens = loopholeCriticalLens + 1\n        }\n\n\n        if str.Contains(info.Severity, "high") {\n            loopholeHighLens = loopholeHighLens + 1\n        }\n\n\n        if str.Contains(info.Severity, "warning") {\n            loopholeWarningLens = loopholeWarningLens + 1\n        }\n\n\n        if str.Contains(info.Severity, "low") {\n            loopholeLowLens = loopholeLowLens + 1\n        }\n\n    }\n\n}\n\nif loopholeCriticalLens > 0 || loopholeHighLens > 0 || loopholeWarningLens > 0 || loopholeLowLens > 0 {\n    reportInstance.Raw({"type": "bar-graph", "data": [{"name": "严重漏洞", "value": loopholeCriticalLens}, {"name": "高危漏洞", "value": loopholeHighLens}, {"name": "中危漏洞", "value": loopholeWarningLens}, {"name": "低危漏洞", "value": loopholeLowLens}], "color": ["#f70208", "#f9c003", "#2ab150", "#5c9cd5"]})\n} else {\n    reportInstance.Markdown("暂无数据")\n}\n\n\nreportInstance.Markdown("### 1.1.2 漏洞统计列表")\n\nif len(noPotentialRisks) == 0 {\n    reportInstance.Markdown("无漏洞信息")\n} else {\n    _line = []\n    for index, info = range noPotentialRisks {\n        level = "-"\n        if str.Contains(info.Severity, "critical") {\n            level = "严重"\n        }\n\n\n        if str.Contains(info.Severity, "high") {\n            level = "高危"\n        }\n\n\n        if str.Contains(info.Severity, "warning") {\n            level = "中危"\n        }\n\n\n        if str.Contains(info.Severity, "low") {\n            level = "低危"\n        }\n\n\n        titleVerbose = info.TitleVerbose\n        if titleVerbose == "" {\n            titleVerbose = info.Title\n        }\n\n        url = info.url\n        keyword = info.payload\n        println(keyword)\n        if !str.Contains(info.Severity, "info") {\n            _line = append(\n                _line,\n                {"序号": {"value": index + 1, "sort": 1}, "URL": {"value": url, "sort": 2}, "漏洞情况": {"value": titleVerbose, "sort": 3}, "关键词": {"value": keyword, "sort": 4}},\n            )\n        }\n\n    }\n\n    potentialRisksList := json.dumps({"type": "potential-risks-list", "dump": "potential-risks-list", "data": _line})\n    reportInstance.Raw(potentialRisksList)\n}\n',
        script_type: '敏感信息',
        tags: ['distributed-script'],
        type: 'Github 敏感信息泄露扫描',
    },
    {
        description: '快速暗链扫描',
        disallow_scheduled: true,
        prompt_args: [
            {
                explain: '',
                key: 'target',
                value: '',
            },
            {
                explain: 'bool 类型，是否启用弱口令检测',
                key: 'enable-brute',
                value: '',
            },
            {
                explain:
                    '端口，当输入 1-65535 时，会分配 syn 和 tcp 扫描全端口',
                key: 'ports',
                value: '',
            },
        ],
        script: 'yakit.AutoInitYakit()\nloglevel(`info`)\n\n/*\n创建插件:\n   1. 插件的执行状态需要注意：加载成功与否？\n*/\npluginStatusMap = {};\npluginNames = [\n  "Fastjson综合检测（反连本地）",\n  "Log4j综合检测（反连本地）",\n  "SpringFramework_CVE-2022-22965远程代码执行漏洞检测",\n\n\n"[CVE-2022-22965] Spring-core-rce DNS反连检测",\n\n\n"Nacos漏洞扫描模块",\n\n\n"Alibaba Nacos derby未授权访问",\n\n\n"WebLogic CVE-2020-14750权限绕过漏洞检测",\n\n"WebLogic CVE-2020-14750远程代码执行漏洞检测",\n\n"VMware VCenter - 远程代码执行（Apache Log4j）",\n\n"Nacos 身份认证绕过漏洞 2023",\n\n"[Alibaba-Nacos-weakpass]: Alibaba Nacos 控制台存在默认弱口令 nacos/nacos，可登录后台查看敏感信息",\n\n"CVE_合规检测插件",\n"CVE 合规检测插件"\n]\nyakit.Info("开始创建漏洞扫描管理器")\nmanager, err := hook.NewMixPluginCaller()\nif err != nil {\n    yakit.Error("创建失败：%v", err)\n}\n\nmanager.SetDividedContext(true)\nmanager.SetConcurrent(20)\n\nloadPluginFinished = 0\nx.Foreach(pluginNames, func(i) {\n    // 插件加载状态\n    statusName = "加载中"\n    err = manager.LoadPlugin(i)\n    if err != nil {\n        yakit.Info("加载插件【%v】失败：%v", i, err)\n        statusName = "加载失败"\n    } else {\n        loadPluginFinished++\n\n        yakit.Info(i + " [加载成功]")\n\t   yakit.Info(sprintf("涉及扫描插件：%v个", len(pluginNames)))\n        statusName = "加载成功"\n    }\n    pluginStatusMap[i] = [i, statusName]\n})\n\n\ntargetRaw = cli.String("target",cli.setRequired(true))\nenableBrute = cli.String("enable-brute",cli.setDefault("false"))\n\nenableBruteFlag = false\n\nif enableBrute == "true" {\n    enableBruteFlag = true\n}\n\nsynConcurrent = cli.Int("syn-concurrent", cli.setDefault(2000))\n\nexcludeHosts = cli.String("exclude-hosts")\nexcludePorts = cli.String("exclude-ports")\n\ntop100 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018"\n\ntcpPorts = cli.String("ports", cli.setDefault(top100))\n\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\n\nif len(tcpPortsList) == 0{\n    tcpPorts = top100\n}\n\n// top 5000 ports\ntop5000 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018,93,6666,7010,100,9003,6789,7060,8022,4848,3050,8787,8013,8040,10021,2011,6006,4000,8055,4430,6060,7788,8066,9898,8801,10040,7006,803,6688,10080,8050,7011,7009,40310,802,10003,8014,2080,7288,9992,8005,8889,5644,8886,9500,58031,50000,9020,8015,50060,8887,8021,8700,9900,9191,3312,8186,8735,8380,1234,38080,2110,8007,21245,3333,2046,9061,8686,9011,8061,9876,8282,60465,2222,9009,1100,18081,70,8383,5155,8188,2517,50070,8062,11324,9231,999,28214,8987,809,2010,7700,3535,7921,11080,6778,805,8073,114,2012,701,8810,8400,9007,8808,8065,8822,15000,9901,11158,1107,28099,12345,2006,9527,51106,688,25006,8045,9006,8023,8029,9997,7048,8580,8585,8035,10088,20022,4001,9005,2013,20808,3580,7742,8119,32766,50075,7272,3380,3220,7801,5256,5255,10086,1300,5200,6198,1158,6889,3503,6088,9991,806,8183,8688,1001,58080,1182,9025,8112,7776,7321,235,8077,8500,11347,7081,8877,8480,9182,58000,8026,11001,10089,5888,8196,8078,9995,2014,5656,8019,5003,8481,6002,9889,9015,8866,8182,8057,8399,8308,511,12881,4016,1039,28080,5678,7500,8051,18801,15018,15888,38443,8123,9004,8144,94,9070,1800,9112,8990,3456,2051,9131,97,7100,7711,7180,11000,8037,6988,122,8885,14007,8184,7012,8079,9888,9301,59999,49705,1979,8900,5080,5013,1550,8844,4850,206,5156,8813,3030,1790,8802,9012,5544,3721,8980,10009,8043,8390,7943,8381,8056,7111,1500,5881,9437,5655,8102,65486,4443,3690,10025,8024,8333,8666,103,8,9666,8999,9111,8071,522,11381,20806,8041,1085,8864,7900,1700,8036,8032,8033,8111,60022,955,3080,8788,27017,7443,8192,6969,9909,5002,9990,188,8910,9022,50030,866,8582,4300,9101,6879,8891,4567,4440,10051,10068,50080,8341,30001,6890,8168,8955,16788,8190,18060,6379,7041,42424,15693,2521,19010,18103,6010,8898,9910,9190,8260,8445,1680,8890,8649,30082,3013,30000,2480,7202,9704,5233,8991,11366,7888,8780,7129,6600,47088,7791,18888,50045,15672,2585,60,9494,31945,2060,8610,8860,58060,6118,2348,38000,18880,13382,6611,8064,7101,5081,7380,7942,10016,8027,2093,403,9014,8133,6886,95,8058,9201,6443,5966,27000,7017,6680,8401,9036,8988,8806,6180,421,423,57880,7778,18881,812,15004,9110,8213,9300,1213,8193,8956,1108,778,65000,7020,1122,9031,17000,8039,8600,50090,1863,8191,65,6587,8136,9507,132,200,2070,308,5811,3465,8680,7999,7084,3938,5902,9595,442,4433,7171,7567,811,1128,6003,2125,6090,10007,7022,1949,6565,65001,1301,19244,10087,8025,5098,21080,1200,15801,1005,22343,7086,8601,6259,7102,10333,211,10082,18085,180,40000,7021,7702,66,38086,666,6603,1212,65493,96,9053,7031,23454,30088,6226,8660,6170,8972,48080,10118,40069,28780,20153,20021,20151,58898,10066,1818,9914,55351,8343,6546,3880,8902,22222,19045,5561,7979,5203,50240,49960,2007,1722,8913,8912,9504,8103,8567,1666,8720,8197,3012,8220,9039,5898,925,38517,8382,6842,8895,2808,447,3600,3606,45177,19101,171,133,8189,7108,10154,47078,6800,8122,381,15580,23352,3443,1180,268,2382,43651,10099,65533,7018,60010,60101,6699,2005,2009,59777,591,1933,9013,8477,9696,9030,2015,7925,6510,18803,280,5601,2901,2301,5201,302,610,5552,8809,6869,9212,17095,20001,8781,25024,5280,7909,17003,1088,7117,20052,10038,30551,9980,9180,59009,28280,7028,61999,7915,8384,9918,9919,55858,7215,77,9845,20140,7856,1982,1123,17777,8839,208,2886,877,6101,5100,804,983,5600,8402,5887,8322,5632,770,13333,7330,3216,31188,47583,8710,22580,1042,34440,20,7703,65055,8997,6543,6388,8283,7201,4040,61081,12001,3588,7123,2490,4389,1313,19080,9050,6920,299,20046,8892,9302,7899,30058,7094,6801,321,1356,12333,11362,11372,6602,7709,45149,3668,517,9912,8130,7050,7713,40080,8104,13988,18264,8799,7072,55070,23458,8176,9517,9541,9542,9512,8905,11660,44445,44401,17173,436,560,733,968,602,3133,3398,16580,8488,8901,8512,10443,9113,9119,6606,22080,5560,5757,1600,8250,10024,10200,333,73,7547,8054,6372,223,3737,9019,8067,45692,15400,15698,9038,37006,2086,1002,9188,8201,8202,30030,2663,9105,10017,4503,1104,8893,40001,27779,3010,7083,5010,5501,309,1389,10070,10069,10056,3094,10057,10078,10050,10060,10098,4180,10777,270,6365,9801,1046,7140,1004,9198,8465,8548,108,30015,8153,1020,50100,8391,34899,7090,6100,8777,8298,8281,7023,3377,8499,7501,4321,3437,9977,14338,843,7901,6020,6011,1988,4023,20202,20200,7995,18181,9836,586,2340,8110,9192,2525,6887,4005,8992,11212,2168,60080,6664,10005,956,1016,4453,8974,10101,58124,30025,7789,7280,8068,11180,1984,5566,916,8828,17071,15080,8820,104,21900,5151,860,6286,5118,18765,7055,9989,807,7751,8684,1999,9333,55352,8681,19994,3033,8017,7093,7896,4242,58083,56688,6167,9922,3618,7082,1603,16929,198,8075,7044,8232,12315,4570,4569,31082,8861,3680,4455,8403,4497,4380,7273,8896,21188,22480,1445,20165,20142,9068,1083,59093,41474,9224,9718,23380,5225,18889,4237,30,14549,8052,911,19000,7799,7300,9168,29798,4480,22228,7903,810,68,31000,9103,20992,8049,2261,8105,10152,5780,10111,3003,1,3,4,6,24,32,33,42,43,49,109,125,146,161,163,212,222,254,256,259,264,301,306,311,340,366,406,407,416,417,425,458,464,481,497,500,512,524,541,545,555,563,593,616,617,625,636,648,667,668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,898,900,901,902,903,912,981,987,992,1007,1009,1011,1021,1022,1023,1031,1032,1033,1034,1035,1036,1037,1038,1040,1043,1044,1045,1047,1050,1051,1052,1055,1057,1058,1059,1060,1061,1062,1063,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1084,1086,1087,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1102,1105,1106,1111,1112,1113,1114,1117,1119,1121,1124,1126,1130,1131,1132,1137,1138,1141,1145,1147,1148,1149,1151,1152,1154,1163,1164,1165,1166,1169,1174,1175,1183,1185,1186,1187,1192,1198,1199,1201,1216,1217,1218,1233,1236,1244,1247,1248,1259,1271,1272,1277,1287,1296,1309,1310,1311,1322,1328,1334,1352,1417,1434,1455,1461,1494,1501,1503,1521,1524,1533,1556,1580,1583,1594,1641,1658,1687,1688,1717,1718,1719,1721,1761,1782,1783,1805,1812,1839,1840,1862,1864,1875,1914,1935,1947,1971,1972,1974,1998,2002,2003,2004,2021,2022,2030,2033,2034,2035,2038,2040,2041,2042,2043,2045,2047,2048,2065,2068,2099,2105,2106,2111,2119,2126,2135,2144,2160,2161,2170,2179,2190,2191,2196,2200,2251,2260,2288,2323,2366,2381,2383,2393,2394,2399,2401,2492,2500,2522,2557,2601,2602,2604,2605,2607,2608,2638,2701,2702,2710,2718,2725,2800,2809,2811,2869,2875,2909,2910,2920,2968,2998,3005,3006,3007,3011,3017,3031,3052,3071,3077,3119,3162,3168,3211,3221,3260,3261,3268,3269,3283,3300,3301,3304,3307,3322,3323,3324,3325,3351,3367,3369,3370,3371,3372,3376,3390,3400,3404,3410,3476,3493,3514,3517,3527,3546,3551,3659,3684,3689,3697,3700,3731,3766,3784,3792,3800,3801,3808,3809,3814,3820,3824,3826,3827,3828,3846,3848,3849,3851,3852,3853,3859,3863,3869,3871,3878,3889,3905,3914,3918,3920,3945,3971,3995,3998,4002,4003,4004,4006,4045,4111,4125,4126,4129,4224,4279,4343,4444,4445,4446,4449,4550,4662,4900,4998,5004,5030,5033,5054,5061,5087,5102,5120,5214,5221,5222,5226,5269,5298,5405,5414,5431,5440,5500,5510,5550,5633,5679,5718,5730,5801,5802,5810,5815,5822,5825,5850,5859,5862,5877,5901,5903,5904,5906,5907,5910,5911,5915,5922,5925,5950,5952,5959,5960,5961,5962,5963,5987,5988,5989,5998,5999,6005,6007,6009,6025,6059,6106,6112,6123,6129,6156,6346,6389,6502,6547,6566,6567,6580,6667,6668,6669,6689,6692,6779,6788,6792,6839,6881,6901,7019,7025,7103,7106,7402,7435,7496,7512,7625,7627,7676,7741,7800,7911,7920,7937,7938,8194,8254,8290,8291,8292,8651,8652,8654,8701,8873,8994,9040,9071,9102,9207,9220,9290,9415,9418,9485,9502,9503,9535,9575,9593,9594,9618,9877,9878,9917,9929,9943,9944,9968,10012,10180,10215,10243,10566,10616,10617,10621,10626,10628,10629,10778,11110,11111,11967,12000,12174,12265,13456,13722,13782,13783,14238,14441,14442,15002,15003,15660,15742,16000,16001,16012,16016,16018,16113,16992,16993,17877,17988,18040,18101,18988,19283,19315,19350,19780,19801,19842,20005,20031,20221,20222,20828,21571,22939,23502,24444,24800,25734,25735,26214,27352,27353,27355,27356,27715,28201,30718,30951,31038,31337,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,33354,33899,34571,34572,34573,35500,38292,40193,40911,41511,42510,44176,44442,44443,44501,45100,49158,49159,49160,49161,49163,49165,49167,49175,49176,49400,49999,50001,50002,50003,50006,50300,50389,50500,50636,50800,51103,51493,52673,52822,52848,52869,54045,54328,55055,55056,55555,55600,56737,56738,57294,57797,60020,60443,61532,61900,62078,63331,64623,64680,65129,65389"\n\nsynPorts = cli.String("syn-ports", cli.setDefault(top5000))\n\nsynPortsList = str.ParseStringToPorts(top5000)\n\nif synPortsList != "" && len(synPortsList) == 0{\n    synPorts = top5000\n}\n\ncli.check()\n\nif len(tcpPortsList) >= 65535 {\n    tcpPorts = "1,3,4,6,7,8,9,13,17,19,20,21,22,23,24,25,26,27,30,32,33,37,42,43,49,53,55,57,59,60,65,66,68,70,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,106,108,109,110,111,113,114,119,122,123,125,127,132,133,135,137,138,139,143,144,146,157,161,163,171,179,180,188,198,199,200,206,208,210,211,212,220,222,223,225,235,250,251,252,254,255,256,257,259,264,268,270,280,299,301,302,306,308,309,311,321,333,340,366,381,388,389,403,406,407,411,416,417,419,421,423,425,427,436,441,442,443,444,445,447,458,464,465,475,481,497,500,502,511,512,513,514,515,517,522,523,524,540,541,543,544,545,548,554,555,556,557,560,563,586,587,590,591,593,600,602,606,610,616,617,621,623,625,631,636,639,641,646,648,655,657,659,660,666,667,668,669,674,683,684,687,688,690,691,700,701,705,709,710,711,713,714,715,720,722,725,726,728,729,730,731,732,733,740,748,749,754,757,758,765,770,777,778,780,782,783,786,787,790,792,795,800,801,802,803,804,805,806,807,808,809,810,811,812,822,823,825,829,839,840,843,846,856,859,860,862,864,866,873,874,877,878,880,888,889,898,900,901,902,903,904,905,911,912,913,916,918,921,922,924,925,928,930,931,943,953,955,956,968,969,971,980,981,983,987,990,992,993,995,996,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1116,1117,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1130,1131,1132,1134,1135,1136,1137,1138,1141,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154,1156,1157,1158,1159,1162,1163,1164,1165,1166,1167,1168,1169,1173,1174,1175,1176,1179,1180,1182,1183,1184,1185,1186,1187,1188,1190,1191,1192,1194,1195,1196,1198,1199,1200,1201,1204,1207,1208,1209,1210,1211,1212,1213,1215,1216,1217,1218,1220,1221,1222,1223,1228,1229,1233,1234,1236,1239,1240,1241,1243,1244,1247,1248,1249,1250,1251,1259,1261,1262,1264,1268,1270,1271,1272,1276,1277,1279,1282,1287,1290,1291,1296,1297,1299,1300,1301,1302,1303,1305,1306,1307,1308,1309,1310,1311,1313,1314,1315,1316,1317,1318,1319,1321,1322,1324,1327,1328,1330,1331,1334,1336,1337,1339,1340,1347,1350,1351,1352,1353,1356,1357,1389,1413,1414,1417,1433,1434,1443,1445,1455,1461,1494,1500,1501,1503,1516,1521,1522,1524,1525,1526,1527,1533,1547,1550,1556,1558,1559,1560,1565,1566,1569,1580,1583,1584,1592,1594,1598,1600,1603,1605,1607,1615,1620,1622,1630,1632,1635,1638,1641,1645,1658,1666,1677,1680,1683,1687,1688,1691,1694,1699,1700,1701,1703,1707,1708,1709,1711,1712,1713,1715,1717,1718,1719,1720,1721,1722,1723,1730,1735,1736,1745,1750,1752,1753,1755,1761,1782,1783,1790,1791,1792,1799,1800,1801,1805,1806,1807,1808,1811,1812,1818,1823,1825,1835,1839,1840,1858,1861,1862,1863,1864,1871,1875,1883,1888,1900,1901,1911,1912,1914,1918,1924,1927,1933,1935,1947,1949,1954,1958,1971,1972,1973,1974,1975,1976,1979,1980,1981,1982,1984,1988,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2020,2021,2022,2025,2030,2031,2033,2034,2035,2038,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2051,2060,2062,2065,2067,2068,2069,2070,2080,2081,2082,2083,2086,2087,2093,2095,2096,2099,2100,2101,2103,2104,2105,2106,2107,2110,2111,2112,2115,2119,2121,2124,2125,2126,2134,2135,2142,2144,2148,2150,2160,2161,2168,2170,2179,2181,2187,2190,2191,2196,2197,2200,2201,2203,2222,2224,2232,2241,2250,2251,2253,2260,2261,2262,2265,2269,2270,2271,2280,2288,2291,2292,2300,2301,2302,2304,2312,2313,2323,2325,2326,2330,2335,2340,2348,2366,2371,2372,2375,2381,2382,2383,2391,2393,2394,2399,2401,2418,2425,2433,2435,2436,2438,2439,2449,2456,2463,2472,2480,2490,2492,2500,2501,2505,2517,2521,2522,2525,2531,2532,2550,2551,2557,2558,2567,2580,2583,2584,2585,2598,2600,2601,2602,2604,2605,2606,2607,2608,2622,2623,2628,2631,2638,2644,2663,2691,2700,2701,2702,2706,2710,2711,2712,2717,2718,2723,2725,2728,2734,2800,2804,2806,2808,2809,2811,2812,2847,2850,2869,2875,2882,2886,2888,2889,2898,2901,2902,2903,2908,2909,2910,2920,2930,2957,2958,2967,2968,2973,2984,2987,2988,2991,2997,2998,3000,3001,3002,3003,3005,3006,3007,3008,3010,3011,3012,3013,3014,3017,3023,3025,3030,3031,3033,3050,3052,3057,3062,3063,3071,3077,3080,3089,3094,3102,3103,3118,3119,3121,3128,3133,3146,3162,3167,3168,3190,3200,3210,3211,3216,3220,3221,3240,3260,3261,3263,3268,3269,3280,3281,3283,3291,3299,3300,3301,3304,3306,3307,3310,3311,3312,3319,3322,3323,3324,3325,3333,3334,3351,3362,3363,3365,3367,3368,3369,3370,3371,3372,3374,3376,3377,3380,3388,3389,3390,3396,3398,3399,3400,3404,3410,3414,3415,3419,3425,3430,3437,3439,3443,3456,3465,3476,3479,3483,3485,3486,3493,3497,3503,3505,3506,3511,3513,3514,3515,3517,3519,3520,3526,3527,3530,3532,3535,3546,3551,3577,3580,3586,3588,3599,3600,3602,3603,3606,3618,3621,3622,3632,3636,3637,3652,3653,3656,3658,3659,3663,3668,3669,3670,3672,3680,3681,3683,3684,3689,3690,3697,3700,3703,3712,3721,3728,3731,3737,3742,3749,3765,3766,3784,3787,3788,3790,3792,3793,3795,3796,3798,3799,3800,3801,3803,3806,3808,3809,3810,3811,3812,3813,3814,3817,3820,3823,3824,3825,3826,3827,3828,3830,3831,3837,3839,3842,3846,3847,3848,3849,3850,3851,3852,3853,3856,3859,3860,3863,3868,3869,3870,3871,3872,3876,3878,3879,3880,3882,3888,3889,3890,3897,3899,3901,3902,3904,3905,3906,3907,3908,3909,3911,3913,3914,3915,3916,3918,3919,3920,3922,3923,3928,3929,3930,3931,3935,3936,3937,3938,3940,3941,3943,3944,3945,3946,3948,3949,3952,3956,3957,3961,3962,3963,3964,3967,3968,3969,3971,3972,3975,3979,3980,3981,3982,3983,3986,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4009,4010,4016,4020,4022,4023,4024,4025,4029,4035,4036,4039,4040,4045,4056,4058,4065,4080,4087,4090,4096,4100,4101,4111,4112,4113,4118,4119,4120,4121,4125,4126,4129,4135,4141,4143,4147,4158,4161,4164,4174,4180,4190,4192,4200,4206,4220,4224,4234,4237,4242,4252,4262,4279,4294,4297,4298,4300,4302,4321,4325,4328,4333,4342,4343,4355,4356,4357,4358,4369,4374,4375,4376,4380,4384,4388,4389,4401,4407,4414,4415,4418,4430,4433,4440,4442,4443,4444,4445,4446,4447,4449,4453,4454,4455,4464,4471,4476,4480,4497,4503,4516,4517,4530,4534,4545,4550,4555,4558,4559,4567,4569,4570,4599,4600,4601,4602,4606,4609,4644,4649,4658,4662,4665,4687,4689,4700,4712,4713,4745,4760,4767,4770,4771,4778,4793,4800,4819,4848,4850,4859,4860,4875,4876,4877,4881,4899,4900,4903,4912,4931,4949,4998,4999,5000,5001,5002,5003,5004,5005,5009,5010,5011,5012,5013,5014,5015,5016,5017,5020,5021,5023,5030,5033,5040,5050,5051,5052,5053,5054,5055,5060,5061,5063,5066,5070,5074,5080,5081,5087,5088,5090,5095,5096,5098,5100,5101,5102,5111,5114,5118,5120,5121,5122,5125,5133,5137,5147,5151,5152,5155,5156,5190,5200,5201,5202,5203,5212,5214,5219,5221,5222,5223,5225,5226,5233,5234,5235,5242,5250,5252,5255,5256,5259,5261,5269,5279,5280,5291,5298,5339,5347,5353,5357,5370,5377,5405,5414,5423,5431,5432,5433,5440,5441,5442,5444,5457,5458,5473,5475,5500,5501,5502,5510,5520,5544,5550,5552,5553,5555,5560,5561,5566,5600,5601,5631,5632,5633,5644,5655,5656,5666,5671,5672,5678,5679,5680,5718,5730,5757,5780,5800,5801,5802,5803,5807,5810,5811,5812,5815,5818,5822,5823,5825,5850,5859,5862,5868,5869,5877,5881,5887,5888,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5909,5910,5911,5914,5915,5918,5922,5925,5938,5940,5950,5952,5959,5960,5961,5962,5963,5966,5968,5981,5987,5988,5989,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6017,6020,6025,6050,6051,6059,6060,6068,6080,6088,6090,6100,6101,6103,6106,6112,6118,6123,6129,6156,6167,6170,6180,6198,6203,6222,6226,6247,6259,6286,6346,6365,6372,6379,6388,6389,6443,6481,6500,6502,6504,6510,6520,6543,6546,6547,6550,6565,6566,6567,6580,6587,6600,6602,6603,6606,6611,6646,6648,6662,6664,6666,6667,6668,6669,6670,6677,6680,6688,6689,6692,6699,6711,6732,6778,6779,6788,6789,6792,6800,6801,6839,6842,6868,6869,6879,6881,6886,6887,6888,6889,6890,6896,6901,6920,6969,6988,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7017,7018,7019,7020,7021,7022,7023,7024,7025,7028,7031,7041,7044,7048,7050,7051,7055,7060,7070,7071,7072,7074,7078,7080,7081,7082,7083,7084,7086,7088,7090,7093,7094,7100,7101,7102,7103,7106,7108,7111,7117,7123,7129,7140,7171,7180,7200,7201,7202,7215,7241,7272,7273,7278,7280,7281,7288,7300,7321,7330,7380,7402,7435,7438,7443,7474,7496,7500,7501,7512,7547,7567,7625,7627,7676,7680,7687,7688,7700,7702,7703,7709,7711,7713,7725,7741,7742,7744,7749,7751,7770,7776,7777,7778,7788,7789,7791,7799,7800,7801,7856,7878,7888,7890,7896,7899,7900,7901,7903,7909,7911,7913,7915,7920,7921,7925,7929,7937,7938,7942,7943,7979,7995,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8060,8061,8062,8064,8065,8066,8067,8068,8069,8070,8071,8073,8075,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8108,8110,8111,8112,8118,8119,8122,8123,8130,8133,8136,8144,8153,8161,8168,8172,8176,8180,8181,8182,8183,8184,8186,8188,8189,8190,8191,8192,8193,8194,8196,8197,8200,8201,8202,8213,8220,8222,8232,8244,8250,8254,8258,8260,8280,8281,8282,8283,8288,8290,8291,8292,8293,8294,8298,8300,8308,8322,8333,8341,8343,8360,8380,8381,8382,8383,8384,8385,8390,8391,8399,8400,8401,8402,8403,8443,8445,8448,8465,8477,8480,8481,8484,8488,8499,8500,8512,8540,8548,8567,8580,8582,8585,8600,8601,8610,8648,8649,8651,8652,8654,8660,8666,8675,8676,8680,8681,8684,8686,8688,8700,8701,8710,8720,8735,8765,8766,8777,8780,8781,8787,8788,8799,8800,8801,8802,8806,8808,8809,8810,8813,8820,8822,8828,8834,8838,8839,8844,8848,8858,8860,8861,8864,8866,8868,8873,8877,8879,8880,8881,8885,8886,8887,8888,8889,8890,8891,8892,8893,8895,8896,8898,8899,8900,8901,8902,8905,8910,8912,8913,8955,8956,8972,8974,8980,8983,8987,8988,8989,8990,8991,8992,8994,8996,8997,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9019,9020,9022,9025,9030,9031,9036,9038,9039,9040,9043,9050,9053,9060,9061,9068,9070,9071,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9105,9110,9111,9112,9113,9119,9131,9152,9168,9180,9182,9188,9190,9191,9192,9197,9198,9200,9201,9207,9212,9220,9224,9231,9290,9300,9301,9302,9333,9409,9415,9418,9437,9443,9444,9448,9485,9494,9500,9501,9502,9503,9504,9507,9512,9517,9527,9535,9541,9542,9575,9593,9594,9595,9600,9618,9621,9643,9666,9673,9696,9704,9718,9800,9801,9815,9836,9845,9876,9877,9878,9888,9889,9898,9900,9901,9909,9910,9912,9914,9917,9918,9919,9922,9929,9941,9943,9944,9968,9977,9980,9981,9986,9988,9989,9990,9991,9992,9995,9997,9998,9999,10000,10001,10002,10003,10004,10005,10007,10008,10009,10010,10011,10012,10016,10017,10021,10022,10023,10024,10025,10034,10038,10040,10050,10051,10056,10057,10058,10060,10066,10068,10069,10070,10078,10080,10082,10083,10086,10087,10088,10089,10098,10099,10101,10111,10118,10152,10154,10160,10180,10200,10215,10243,10250,10255,10333,10443,10566,10616,10617,10621,10626,10628,10629,10777,10778,10873,11000,11001,11080,11110,11111,11158,11180,11211,11212,11324,11347,11362,11366,11372,11381,11660,11967,12000,12001,12006,12018,12021,12059,12174,12215,12262,12265,12315,12333,12345,12346,12380,12443,12452,12881,13333,13382,13456,13722,13724,13782,13783,13988,14000,14007,14238,14338,14441,14442,14549,15000,15001,15002,15003,15004,15018,15080,15400,15402,15580,15660,15672,15693,15698,15742,15801,15888,16000,16001,16012,16016,16018,16080,16113,16580,16705,16788,16800,16851,16929,16992,16993,17000,17003,17071,17095,17173,17595,17777,17877,17988,18000,18001,18002,18004,18008,18018,18040,18060,18080,18081,18082,18085,18088,18090,18098,18101,18103,18181,18264,18765,18801,18803,18880,18881,18888,18889,18988,19000,19001,19010,19045,19080,19101,19244,19283,19315,19350,19780,19801,19842,19900,19994,20000,20001,20002,20005,20021,20022,20031,20046,20052,20140,20142,20151,20153,20165,20200,20202,20221,20222,20720,20806,20808,20828,20992,21000,21080,21188,21245,21501,21502,21571,21792,21900,22080,22222,22228,22343,22480,22580,22939,23052,23352,23380,23454,23458,23502,23796,24444,24800,25006,25024,25734,25735,26000,26214,26470,27000,27017,27352,27353,27355,27356,27357,27715,27779,28017,28018,28080,28099,28201,28211,28214,28280,28780,29672,29798,29831,30000,30001,30005,30015,30025,30030,30058,30082,30088,30551,30704,30718,30951,31000,31038,31082,31188,31337,31727,31945,32766,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,32791,32792,32803,32816,32822,32835,33354,33453,33554,33899,34440,34571,34572,34573,34899,35500,35513,37006,37839,38000,38037,38080,38086,38185,38188,38292,38443,38501,38517,38888,39136,39376,39659,40000,40001,40069,40080,40193,40310,40811,40911,41064,41474,41511,41516,41523,42424,42510,43651,44176,44334,44401,44442,44443,44445,44501,44709,45100,45149,45177,45692,46200,46996,47078,47088,47544,47583,48080,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49164,49165,49167,49168,49171,49175,49176,49186,49195,49236,49400,49401,49705,49960,49999,50000,50001,50002,50003,50006,50030,50045,50050,50060,50070,50075,50080,50090,50100,50240,50300,50389,50500,50636,50800,51103,51106,51191,51413,51493,52660,52673,52710,52735,52822,52847,52848,52849,52850,52851,52853,52869,53211,53313,53314,53535,54045,54328,55020,55055,55056,55070,55351,55352,55555,55576,55600,55858,56688,56737,56738,57294,57665,57797,57880,58000,58001,58002,58031,58060,58080,58083,58124,58630,58632,58838,58898,59009,59093,59110,59200,59201,59202,59777,59999,60000,60010,60020,60022,60030,60080,60101,60123,60146,60443,60465,60642,61081,61532,61613,61616,61900,61999,62078,63331,64623,64680,65000,65001,65055,65129,65310,65389,65486,65493,65533"\n    synPorts = str.Join(str.FilterPorts("1-65535",tcpPorts), ",")\n} else {\n    synPorts = str.Join(str.FilterPorts(synPorts,tcpPorts), ",")\n}\n\ntcpOps = []\ntcpOps = append(tcpOps, servicescan.active(true))\n\ntcpOps = append(tcpOps, servicescan.concurrent(50))\ntcpOps = append(tcpOps, servicescan.maxProbes(4))\n\ntcpOps = append(tcpOps, servicescan.probeTimeout(5.0))\n\ntcpOps = append(tcpOps, servicescan.all())\n\n// 设置排除端口和主机\nif excludePorts != "" {\n    yakit.Info("设置排除端口：%v", excludePorts)\n    tcpOps = append(tcpOps, servicescan.excludePorts(excludePorts))\n}\nif excludeHosts != "" {\n    yakit.Info("设置排除主机：%v", excludeHosts)\n    tcpOps = append(tcpOps, servicescan.excludeHosts(excludeHosts))\n}\n\nsynPortsList = str.ParseStringToPorts(synPorts)\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\nyakit.Info("SYN Port 端口个数 ：%v",len(synPortsList))\nyakit.Info("TCP Port 端口个数 ：%v",len(tcpPortsList))\nyakit.Info("扫描参数设置完成，准备扫描~")\n\n\nvar synscanEnable = false\ntry {\n    yakit.Info("检测 SYN 扫描是否可用中")\n    for res in synscan.Scan("127.0.0.1", "80", synscan.wait(1))~ {  }\n    \n    synscanEnable = true\n    // yakit.StatusCard("SYN 扫描", "可用")\n} catch err {\n    yakit.Info("SYN 扫描不可用，原因是：%v", err)\n}\n\n\n\nbruteOpt = []\n\nbruteOpt = append(bruteOpt, brute.minDelay(1), brute.maxDelay(5))\n\nbruteOpt = append(bruteOpt, brute.finishingThreshold(1))\nbruteOpt = append(bruteOpt, brute.concurrentTarget(20))\nbruteOpt = append(bruteOpt, brute.concurrent(1))\n\nbruteWg = sync.NewSizedWaitGroup(10)\n\nbruteScan = func(result) {\n    bruteWg.Add()\n    go func() {\n      \tdefer bruteWg.Done()\n        bruteType = ""\n        if result.GetServiceName() == "exasoftport1" {\n            return\n        }\n        \n        for _, bt := range brute.GetAvailableBruteTypes() {\n            if result.GetServiceName().Lower().Contains(bt) || bt.Contains(result.GetServiceName().Lower()) {\n                bruteType = bt\n                break\n            }\n            \n        }\n        \n\n        if bruteType == "" {\n            return\n        }\n        \n\n        defaultusers = []\n        defaultpass = []\n\n        if bruteType == "ftp" {\n            defaultusers = ["ftp", "www", "anonymous", "admin"]\n            defaultpass = ["admin", "admin123", "123456"]\n        } else if bruteType == "memcached" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "123456"]\n        } else if bruteType == "mongodb" {\n            defaultusers = ["root", "admin", "mongodb"]\n            defaultpass = ["root", "admin123", "root@123", "123456"]\n        } else if bruteType == "mssql" {\n            defaultusers = ["root", "admin", "mssql"]\n            defaultpass = ["root", "admin123", "root@123", "admin", "123456"]\n        } else if bruteType == "mysql" {\n            defaultusers = ["mysql", "root", "admin"]\n            defaultpass = ["root", "123456", "admin123", "admin", "root@123"]\n        } else if bruteType == "postgres" {\n            defaultusers = ["postgres", "root", "admin"]\n            defaultpass = ["root", "admin", "123456"]\n        } else if bruteType == "rdp" {\n            defaultusers = ["admin", "administrator", "root", "guest"]\n            defaultpass = ["administrator", "guest", "admin", "123456"]\n        } else if bruteType == "redis" {\n            defaultusers = ["redis"]\n            defaultpass = ["redis", "123456"]\n        } else if bruteType == "smb" {\n            defaultusers = ["administrator", "admin", "test", "guest", "system", "root", "sa"]\n            defaultpass = ["admin123!@#", "admin", "admin123", "admin@123", "admin#123", "123456", "root@123"]\n        } else if bruteType == "snmp" {\n            defaultusers = ["snmp"]\n            defaultpass = ["public", "private", "0", "0392a0", "1234", "2read", "4changes"]\n        } else if bruteType == "ssh" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "telnet" {\n            defaultusers = ["root", "admin"]\n            defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\n        } else if bruteType == "tomcat" {\n            defaultusers = ["manager", "tomcat"]\n            defaultpass = ["tomcat", "manager"]\n        } else if bruteType == "vnc" {\n            defaultusers = ["vnc"]\n            defaultpass = ["123456", "admin", "root"]\n        } else if bruteType == "oracle" {\n            defaultusers = ["sys", "system", "oracle"]\n            defaultpass = ["sys", "system", "oracle", "123456", ""]\n        } else if bruteType == "rtsp" {\n            defaultusers = ["admin"]\n            defaultpass = ["12345", "123456", ""]\n        }\n        \n\n        uL = make([]string)\n        pL = make([]string)\n\n        uL = append(uL, defaultusers...)\n\n        pL = append(pL, defaultpass...)\n\n        bruteTasks := len(uL) * len(pL)// 计算爆破任务数量        \n\n        addr := str.HostPort(result.Target, result.Port)\n        yakit.Info("Start Load Bruter for %s: %s", bruteType, addr)\n\n        instance, err := brute.New(string(bruteType), brute.userList(uL...), brute.passList(pL...), brute.debug(true), \n                                   brute.okToStop(true), bruteOpt...)\n        if err != nil {\n            yakit.Error(\n                "构建弱口令与未授权扫描失败：%v", \n                err, \n            )\n            return\n        }\n        \n\n        res, err := instance.Start(addr)\n        if err != nil {\n            yakit.Error("输入目标失败：%v", err)\n            return\n        }\n        \n\n        riskTarget = addr\n        for rt := range res {\n            yakit.Info("rt string %v ", rt.String())\n            if rt == nil {\n                continue\n            }\n            \n\n            if !rt.Ok {\n                continue\n            }\n            \n            if rt.Username == "" && rt.Password == "" {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("未授权访问"), \n                    risk.title(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.titleVerbose(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \n                    risk.description("由于配置不当或管理疏忽，某些服务、接口或应用存在未授权访问的风险。攻击者可以直接访问这些资源而不需要任何身份验证，这可能会导致敏感数据的泄露、系统的滥用或其他恶意行为。"), \n                    risk.solution(`1. 审核所有公开可访问的服务、接口和应用，确保它们都有适当的访问控制。\n2. 使用身份验证机制，如用户名/密码、API密钥或OAuth。\n3. 定期监控和审查访问日志，以检测任何可疑或未授权的活动。`), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            } else {\n                risk.NewRisk(\n                    riskTarget, \n                    risk.severity("high"), \n                    risk.type("weak-pass"), \n                    risk.typeVerbose("弱口令"), \n                    risk.description("网站管理、运营人员由于安全意识不足，为了方便、避免忘记密码等，使用了非常容易记住的密码，或者是直接采用了系统的默认密码等。攻击者利用此漏洞可直接进入应用系统或者管理系统，从而进行系统、网页、数据的篡改与删除，非法获取系统、用户的数据，甚至可能导致服务器沦陷。"), \n                    risk.solution("用户层面 : 不要使用常见的弱口令作为密码,不要多个系统或者社交账号使用同一套密码,定期修改密码,建议使用包含随机值的或者随机生成的字符串作为系统密码"), \n                    risk.title(sprintf(\n                        "Weak Password[%v]：%v user(%v) pass(%v)", \n                        rt.Type, \n                        rt.Target, \n                        rt.Username, \n                        rt.Password, \n                    )), \n                    risk.titleVerbose(sprintf("弱口令[%v]：%v user(%v) pass(%v)", rt.Type, rt.Target, rt.Username, \n                                              rt.Password)), \n                    risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \n                )\n            }\n            \n        }\n    }()\n}\n\nhandleServiceScanResult = func(result) {\n\n    manager.HandleServiceScanResult(result)\n    if enableBruteFlag && len(result.GetServiceName()) != 0 {\n        serviceName = result.GetServiceName()\n        yakit.Info("Start Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n        bruteScan(result)\n        yakit.Info("End Brute for %s-%s:%d", serviceName, result.Target, result.Port)\n    }\n}\n\naliveHostCountList = []\n\n\nOpenPortCount = 0\nopenPortCountLock = sync.NewLock()\naddOpenPortCount = func() {\n    openPortCountLock.Lock()\n    defer openPortCountLock.Unlock()\n    OpenPortCount++\n}\n\nruntimeID = os.Getenv("YAK_RUNTIME_ID")\n\nfunc handleTCP(target) {\n    try {\n        for result in servicescan.Scan(target, tcpPorts, tcpOps...)~ {\n            if !result.IsOpen() {\n                continue\n            }\n            if result.Target not in aliveHostCountList {\n                aliveHostCountList = append(aliveHostCountList, result.Target)\n            }\n            \n            yakit.Info("GOT: %v", result.String())\n            yakit.Output(result)\n            yakit.SavePortFromResult(result,runtimeID)\n            addOpenPortCount()\n            handleServiceScanResult(result)\n        }\n        \n    } catch err {\n        yakit.Error("处理 TCP 指纹识别失败 : %v",err)\n    }\n}\n\nsynWg = sync.NewSizedWaitGroup(2)\n\n\n\nfunc handleSYN(target){\n    synWg.Add()\n    go func(ctarget) {\n        defer synWg.Done()\n        try {\n            for result in servicescan.ScanFromSynResult(\n                synscan.Scan(ctarget, synPorts, \n                        synscan.initPortFilter(synPorts),\n                        synscan.excludePorts(tcpPorts),\n                        synscan.concurrent(synConcurrent),\n                    )~, \n                    tcpOps..., \n                )~ {\n                if !result.IsOpen() {\n                    continue\n                }\n                if result.Target not in aliveHostCountList {\n                    aliveHostCountList = append(aliveHostCountList, result.Target)\n                }\n                yakit.Info("SYNGOT: %v", result.String())\n                yakit.Output(result)\n                yakit.SavePortFromResult(result,runtimeID)\n                addOpenPortCount()\n                handleServiceScanResult(result)\n            }\n            \n        } catch err { \n            yakit.Error("SYN 处理 TCP 指纹识别失败 : %v",err)\n        }\n    }(target)\n}\n\nswg = sync.NewSizedWaitGroup(20)\n\n\ntargets = str.ParseStringToHosts(str.Trim(targetRaw, ","))\n\ninfo = {}\n\n\n\ninfo["runtime_id"] = runtimeID\ninfo["host_total"] = len(targets)\ninfo["port_total"] = len(synPortsList) + len(tcpPortsList)\ninfo["plugins"] = len(pluginNames)\n\ninfoJson = json.dumps(info)\n\ndb.SetKey("JznQXuFDSepeNWHbiLGEwONiaBxhvj_SERVER_SCAN_MANAGER", infoJson)\n\nfor _, target = range targets{\n    currentTarget = target\n    swg.Add()\n    go func {\n        defer swg.Done()\n        wg = sync.NewWaitGroup()\n        wg.Add(1)\n        go func {\n            defer wg.Done()\n\n            handleTCP(currentTarget)\n        }\n        if synscanEnable {\n            wg.Add(1)\n            go func {\n                defer wg.Done()\n                handleSYN(currentTarget)\n            }\n        }\n        wg.Wait()\n    }\n}\n\n\nswg.Wait()\nsynWg.Wait()\n\nhostCountSec = len(aliveHostCountList)\n\n\nif hostCountSec != 0 {\n    // 根据存活 ip + (加载成功的插件数 * 2s)/concurrent  + 开放端口数\n    // 定时器，超过一定时间，就扫描结束\n    waitTimeSec = hostCountSec + (loadPluginFinished * 2)/20 + OpenPortCount\n    if waitTimeSec < 10 {\n        waitTimeSec = 60\n    }\n  \tyakit.Info("waitTimeSec %v", waitTimeSec)\n    time.AfterFunc(waitTimeSec * 1000 * 1000 * 1000, func() {\n        yakit.SetProgress(1)\n        yakit.Info("AfterFunc 本次扫描任务已完成。")\n        os.Exit(0)\n    })\n}\nbruteWg.Wait()\nmanager.Wait()',
        tags: ['distributed-script'],
        type: '暗链扫描检测',
    },
];

const targetColorFn = (key: Key) => {
    return key !== 0
        ? 'default'
        : PresetColors[Math.floor(Math.random() * PresetColors.length)];
};
export { data, targetColorFn };
