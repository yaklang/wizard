import { CopyOutlined, ReloadOutlined } from '@ant-design/icons';
import { DNSLogOptions } from './compoments/data';
import { useMemoizedFn, useSafeState } from 'ahooks';
import { Button, message, Select, Switch, Tag } from 'antd';
import { copyToClipboard } from '@/utils';
import { WizardAceEditor, WizardTable } from '@/compoments';
import type { CreateTableProps } from '@/compoments/WizardTable/types';
import dayjs from 'dayjs';
import type { TReportRequest } from '@/apis/reportManage/types';
import { getssetsProts } from '@/apis/reportManage';

const str =
    // eslint-disable-next-line no-template-curly-in-string
    '// 优化扫描 11/14\r\n// 更新top5000 端口\r\n// 内置CVE脚本，通过传参开关CVE扫描 20240926\r\n// 重构SYN-20240718 go0p\r\n\r\n\r\n\r\n\r\n// 1.输入ip  (直接扫端口)\r\n// 2.输入域名 （扫子域，然后解析主域 子域IP扫端口  域名扫目录 扫敏感文件 等等）  \r\n// 3.输入公司全称（扫子公司 找全部备案主域名 然后重复2操作）、\r\n\r\n\r\nyakit.AutoInitYakit()\r\nloglevel(`info`)\r\n\r\n// 输入 IP\r\n// targetRaw = cli.String("target")\r\n// 输入域名\r\ndomainRaw = cli.String("target",)\r\n\r\nredirectTimes = cli.Int("redirectTimes", cli.setDefault(3),cli.setVerboseName("重定向次数"))\r\nuserPrefix = cli.String("userprefix", cli.setHelp("添加用户前缀"),cli.setVerboseName("路径爆破前缀"))\r\n\r\n\r\npluginsStr = cli.String("plugins")\r\n\r\n// host alive scan\r\nskippedHostAliveScan = cli.String("skipped-host-alive-scan",cli.setDefault("false"))\r\nhostAliveConcurrent = cli.Int("host-alive-concurrent", cli.setDefault(20), cli.setRequired(false))\r\nhostAliveTimeout = cli.Float("host-alive-timeout", cli.setDefault(5.0), cli.setRequired(false))\r\nhostAliveTCPPorts = cli.String("host-alive-ports", cli.setDefault("80,22,443"), cli.setRequired(false))\r\n\r\nskippedHostAliveScanFlag = false\r\n\r\nif skippedHostAliveScan == "true" {\r\n    skippedHostAliveScanFlag = true\r\n}\r\n\r\n\r\npluginStatusMap = {};\r\npluginNames = str.Split(pluginsStr, ",")\r\nyakit.Info("开始创建漏洞扫描管理器")\r\nmanager, err := hook.NewMixPluginCaller()\r\ndie(err)\r\n\r\nmanager.SetDividedContext(true)\r\nmanager.SetConcurrent(20)\r\n\r\nloadPluginFinished = 0\r\nx.Foreach(pluginNames, func(i) {\r\n    // 插件加载状态\r\n    statusName = "加载中"\r\n    if i == "" {\r\n        return false\r\n    }\r\n    err := manager.LoadPlugin(i)\r\n    if err != nil {\r\n        yakit.Info("加载插件【%v】失败：%v", i, err)\r\n        statusName = "加载失败"\r\n    } else {\r\n        loadPluginFinished++\r\n\r\n        yakit.Info(i + " [加载成功]")\r\n\t   yakit.Info(sprintf("涉及扫描插件：%v个", len(pluginNames)))\r\n        statusName = "加载成功"\r\n    }\r\n    pluginStatusMap[i] = [i, statusName]\r\n})\r\n\r\n\r\npingOpt = []\r\n\r\n\r\nenableBrute = cli.String("enable-brute",cli.setDefault("false"))\r\n\r\nenableBruteFlag = false\r\n\r\nif enableBrute == "true" {\r\n    enableBruteFlag = true\r\n}\r\n\r\n\r\nenableCveBaseLine = cli.String("enbale-cve-baseline",cli.setDefault("false"))\r\nenableCVEFlag = false\r\n\r\nif enableCveBaseLine == "true" {\r\n    enableCVEFlag = true\r\n}\r\n\r\nif skippedHostAliveScan {\r\n    pingOpt = append(pingOpt, ping.skip(skippedHostAliveScanFlag))\r\n}\r\n\r\nif hostAliveTimeout > 0 {\r\n    pingOpt = append(pingOpt, ping.timeout(hostAliveTimeout))\r\n}\r\n\r\n\r\nif hostAliveConcurrent > 0 {\r\n    pingOpt = append(pingOpt, ping.concurrent(hostAliveConcurrent))\r\n}\r\n\r\n\r\nif len(hostAliveTCPPorts) > 0 {\r\n    pingOpt = append(pingOpt, ping.tcpPingPorts(hostAliveTCPPorts))\r\n}\r\n\r\npingOpt = append(pingOpt)\r\nsynConcurrent = cli.Int("syn-concurrent", cli.setDefault(2000))\r\n\r\nexcludeHosts = cli.String("exclude-hosts")\r\nexcludePorts = cli.String("exclude-ports")\r\n\r\ntop100 = "7,5555,9,13,21,22,23,25,26,37,53,79,80,81,88,106,110,111,113,119,135,139,143,144,179,199,389,427,443,444,445,465,513,514,515,543,544,548,554,587,631,646,873,888,990,993,995,1025,1026,1027,1028,1029,1080,1110,1433,1443,1720,1723,1755,1900,2000,2001,2049,2121,2181,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000,6001,6646,7000,7001,7002,7003,7004,7005,7070,8000,8008,8009,8080,8081,8443,8888,9100,9999,10000,11211,32768,49152,49153,49154,49155,49156,49157,8088,9090,8090,8001,82,9080,8082,8089,9000,8002,89,8083,8200,90,8086,801,8011,8085,9001,9200,8100,8012,85,8084,8070,8091,8003,99,7777,8010,8028,8087,83,808,38888,8181,800,18080,8099,8899,86,8360,8300,8800,8180,3505,9002,8053,1000,7080,8989,28017,9060,8006,41516,880,8484,6677,8016,84,7200,9085,5555,8280,1980,8161,9091,7890,8060,6080,8880,8020,889,8881,9081,7007,8004,38501,1010,17,19,255,1024,1030,1041,1048,1049,1053,1054,1056,1064,1065,1801,2103,2107,2967,3001,3703,5001,5050,6004,8031,10010,10250,10255,6888,87,91,92,98,1081,1082,1118,1888,2008,2020,2100,2375,3008,6648,6868,7008,7071,7074,7078,7088,7680,7687,7688,8018,8030,8038,8042,8044,8046,8048,8069,8092,8093,8094,8095,8096,8097,8098,8101,8108,8118,8172,8222,8244,8258,8288,8448,8834,8838,8848,8858,8868,8879,8983,9008,9010,9043,9082,9083,9084,9086,9087,9088,9089,9092,9093,9094,9095,9096,9097,9098,9099,9443,9448,9800,9981,9986,9988,9998,10001,10002,10004,10008,12018,12443,14000,16080,18000,18001,18002,18004,18008,18082,18088,18090,18098,19001,20000,20720,21000,21501,21502,28018"\r\n\r\ntcpPorts = cli.String("ports", cli.setDefault(top100))\r\n\r\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\r\n\r\nif len(tcpPortsList) == 0{\r\n    tcpPorts = top100\r\n}\r\n\r\n// top 5000 ports\r\ntop5000 = "80,23,443,21,22,25,3389,110,445,139,143,53,135,3306,8080,1723,111,995,993,5900,1025,587,8888,199,1720,465,548,113,81,6001,10000,514,5060,179,1026,2000,8443,8000,32768,554,26,1433,49152,2001,515,8008,49154,1027,5666,646,5000,5631,631,49153,8081,2049,88,79,5800,106,2121,1110,49155,6000,513,990,5357,427,49156,543,544,5101,144,7,389,8009,3128,444,9999,5009,7070,5190,3000,5432,1900,3986,13,1029,9,5051,6646,49157,1028,873,1755,2717,4899,9100,119,37,1000,3001,5001,82,10010,1030,9090,2107,1024,2103,6004,1801,5050,19,8031,1041,255,1049,1048,2967,1053,3703,1056,1065,1064,1054,17,808,3689,1031,1044,1071,5901,100,9102,8010,2869,1039,5120,4001,9000,2105,636,1038,2601,1,7000,1066,1069,625,311,280,254,4000,1993,1761,5003,2002,2005,1998,1032,1050,6112,3690,1521,2161,6002,1080,2401,4045,902,7937,787,1058,2383,32771,1033,1040,1059,50000,5555,10001,1494,593,2301,3,1,3268,7938,1234,1022,1074,8002,1036,1035,9001,1037,464,497,1935,6666,2003,6543,1352,24,3269,1111,407,500,20,2006,3260,15000,1218,1034,4444,264,2004,33,1042,42510,999,3052,1023,1068,222,7100,888,4827,1999,563,1717,2008,992,32770,32772,7001,8082,2007,740,5550,2009,5801,1043,512,2701,7019,50001,1700,4662,2065,2010,42,9535,2602,3333,161,5100,5002,2604,4002,6059,1047,8192,8193,2702,6789,9595,1051,9594,9593,16993,16992,5226,5225,32769,3283,1052,8194,1055,1062,9415,8701,8652,8651,8089,65389,65000,64680,64623,55600,55555,52869,35500,33354,23502,20828,1311,1060,4443,730,731,709,1067,13782,5902,366,9050,1002,85,5500,5431,1864,1863,8085,51103,49999,45100,10243,49,3495,6667,90,475,27000,1503,6881,1500,8021,340,78,5566,8088,2222,9071,8899,6005,9876,1501,5102,32774,32773,9101,5679,163,648,146,1666,901,83,9207,8001,8083,5004,3476,8084,5214,14238,12345,912,30,2605,2030,6,541,8007,3005,4,1248,2500,880,306,4242,1097,9009,2525,1086,1088,8291,52822,6101,900,7200,2809,395,800,32775,12000,1083,211,987,705,20005,711,13783,6969,3071,5269,5222,1085,1046,5987,5989,5988,2190,11967,8600,3766,7627,8087,30000,9010,7741,14000,3367,1099,1098,3031,2718,6580,15002,4129,6901,3827,3580,2144,9900,8181,3801,1718,2811,9080,2135,1045,2399,3017,10002,1148,9002,8873,2875,9011,5718,8086,3998,2607,11110,4126,5911,5910,9618,2381,1096,3300,3351,1073,8333,3784,5633,15660,6123,3211,1078,3659,3551,2260,2160,2100,16001,3325,3323,1104,9968,9503,9502,9485,9290,9220,8994,8649,8222,7911,7625,7106,65129,63331,6156,6129,60020,5962,5961,5960,5959,5925,5877,5825,5810,58080,57294,50800,50006,50003,49160,49159,49158,48080,40193,34573,34572,34571,3404,33899,3301,32782,32781,31038,30718,28201,27715,25734,24800,22939,21571,20221,20031,19842,19801,19101,17988,1783,16018,16016,15003,14442,13456,10629,10628,10626,10621,10617,10616,10566,10025,10024,10012,1169,5030,5414,1057,6788,1947,1094,1075,1108,4003,1081,1093,4449,1687,1840,1100,1063,1061,1107,1106,9500,20222,7778,1077,1310,2119,2492,1070,20000,8400,1272,6389,7777,1072,1079,1082,8402,89,691,1001,32776,1999,212,2020,6003,7002,2998,50002,3372,898,5510,32,2033,4165,3061,5903,99,749,425,43,5405,6106,13722,6502,7007,458,9666,8100,3737,5298,1152,8090,2191,3011,1580,5200,3851,3371,3370,3369,7402,5054,3918,3077,7443,3493,3828,1186,2179,1183,19315,19283,3995,5963,1124,8500,1089,10004,2251,1087,5280,3871,3030,62078,9091,4111,1334,3261,2522,5859,1247,9944,9943,9877,9110,8654,8254,8180,8011,7512,7435,7103,61900,61532,5922,5915,5904,5822,56738,55055,51493,50636,50389,49175,49165,49163,3546,32784,27355,27353,27352,24444,19780,18988,16012,15742,10778,4006,2126,4446,3880,1782,1296,9998,9040,32779,1021,32777,2021,32778,616,666,700,5802,4321,545,1524,1112,49400,84,38292,2040,32780,3006,2111,1084,1600,2048,2638,6699,9111,16080,6547,6007,1533,5560,2106,1443,667,720,2034,555,801,6025,3221,3826,9200,2608,4279,7025,11111,3527,1151,8200,8300,6689,9878,10009,8800,5730,2394,2393,2725,5061,6566,9081,5678,3800,4550,5080,1201,3168,3814,1862,1114,6510,3905,8383,3914,3971,3809,5033,7676,3517,4900,3869,9418,2909,3878,8042,1091,1090,3920,6567,1138,3945,1175,10003,3390,3889,1131,8292,5087,1119,1117,4848,7800,16000,3324,3322,5221,4445,9917,9575,9099,9003,8290,8099,8093,8045,7921,7920,7496,6839,6792,6779,6692,6565,60443,5952,5950,5907,5906,5862,5850,5815,5811,57797,56737,5544,55056,5440,54328,54045,52848,52673,50500,50300,49176,49167,49161,44501,44176,41511,40911,32785,32783,30951,27356,26214,25735,19350,18101,18040,17877,16113,15004,14441,12265,12174,10215,10180,4567,6100,4004,4005,8022,9898,7999,1271,1199,3003,1122,2323,4224,2022,617,777,417,714,6346,981,722,1009,4998,70,1076,5999,10082,765,301,524,668,2041,6009,1417,1434,259,44443,1984,2068,7004,1007,4343,416,2038,6006,109,4125,1461,9103,911,726,1010,2046,2035,7201,687,2013,481,125,6669,6668,903,1455,683,1011,2043,2047,31337,256,9929,5998,406,44442,783,843,2042,2045,4040,6060,6051,1145,3916,9443,9444,1875,7272,4252,4200,7024,1556,13724,1141,1233,8765,1137,3963,5938,9191,3808,8686,3981,2710,3852,3849,3944,3853,9988,1163,4164,3820,6481,3731,5081,40000,8097,4555,3863,1287,4430,7744,1812,7913,1166,1164,1165,8019,10160,4658,7878,3304,3307,1259,1092,7278,3872,10008,7725,3410,1971,3697,3859,3514,4949,4147,7900,5353,3931,8675,1277,3957,1213,2382,6600,3700,3007,4080,1113,3969,1132,1309,3848,7281,3907,3972,3968,1126,5223,1217,3870,3941,8293,1719,1300,2099,6068,3013,3050,1174,3684,2170,3792,1216,5151,7080,22222,4143,5868,8889,12006,1121,3119,8015,10023,3824,1154,20002,3888,4009,5063,3376,1185,1198,1192,1972,1130,1149,4096,6500,8294,3990,3993,8016,3846,3929,1187,5074,8766,1102,2800,9941,9914,9815,9673,9643,9621,9501,9409,9198,9197,9098,8996,8987,8877,8676,8648,8540,8481,8385,8189,8098,8095,8050,7929,7770,7749,7438,7241,7123,7051,7050,6896,6732,6711,65310,6520,6504,6247,6203,61613,60642,60146,60123,5981,5940,59202,59201,59200,5918,5914,59110,5909,5905,5899,58838,5869,58632,58630,5823,5818,5812,5807,58002,58001,57665,55576,55020,53535,5339,53314,53313,53211,52853,52851,52850,52849,52847,5279,52735,52710,52660,5242,5212,51413,51191,5040,50050,49401,49236,49195,49186,49171,49168,49164,4875,47544,46996,46200,44709,41523,41064,40811,3994,39659,39376,39136,38188,38185,37839,35513,33554,33453,32835,32822,32816,32803,32792,32791,30704,30005,29831,29672,28211,27357,26470,23796,23052,2196,21792,19900,18264,18018,17595,16851,16800,16705,15402,15001,12452,12380,12262,12215,12059,12021,10873,10058,10034,10022,10011,2910,1594,1658,1583,3162,2920,26000,2366,4600,1688,1322,2557,1095,1839,2288,1123,5968,9600,1244,1641,2200,1105,6550,5501,1328,2968,1805,1914,1974,31727,3400,1301,1147,1721,1236,2501,2012,6222,1220,1109,1347,502,701,2232,2241,4559,710,10005,5680,623,913,1103,780,930,803,725,639,540,102,5010,1222,953,8118,9992,1270,27,123,86,447,1158,442,18000,419,931,874,856,250,475,2044,441,210,6008,7003,5803,1008,556,6103,829,3299,55,713,1550,709,2628,223,3025,87,57,10083,5520,980,251,1013,9152,1212,2433,1516,333,2011,748,1350,1526,7010,1241,127,157,220,1351,2067,684,77,4333,674,943,904,840,825,792,732,1020,1006,657,557,610,1547,523,996,2025,602,3456,862,600,2903,257,1522,1353,6662,998,660,729,730,731,782,1357,3632,3399,6050,2201,971,969,905,846,839,823,822,795,790,778,757,659,225,1015,1014,1012,655,786,6017,6670,690,388,44334,754,5011,98,411,1525,3999,740,12346,802,1337,1127,2112,1414,2600,621,606,59,928,924,922,921,918,878,864,859,806,805,728,252,1005,1004,641,758,669,38037,715,1413,2104,1229,3817,6063,6062,6055,6052,6030,6021,6015,6010,3220,6115,3940,2340,8006,4141,3810,1565,3511,5986,5985,2723,9202,4036,4035,2312,3652,3280,4243,4298,4297,4294,4262,4234,4220,4206,22555,9300,7121,1927,4433,5070,2148,1168,9979,7998,4414,1823,3653,1223,8201,4876,3240,2644,4020,2436,3906,4375,4024,5581,5580,9694,6251,7345,7325,7320,7300,3121,5473,5475,3600,3943,4912,2142,1976,1975,5202,5201,4016,5111,9911,10006,3923,3930,1221,2973,3909,5814,14001,3080,4158,3526,1911,5066,2711,2187,3788,3796,3922,2292,16161,3102,4881,3979,3670,4174,3483,2631,1750,3897,7500,5553,5554,9875,4570,3860,3712,8052,2083,8883,2271,1208,3319,3935,3430,1215,3962,3368,3964,1128,5557,4010,9400,1605,3291,7400,5005,1699,1195,5053,3813,1712,3002,3765,3806,43000,2371,3532,3799,3790,3599,3850,4355,4358,4357,4356,5433,3928,4713,4374,3961,9022,3911,3396,7628,3200,1753,3967,2505,5133,3658,8471,1314,2558,6161,4025,3089,9021,30001,8472,5014,9990,1159,1157,1308,5723,3443,4161,1135,9211,9210,4090,7789,6619,9628,12121,4454,3680,3167,3902,3901,3890,3842,16900,4700,4687,8980,1196,4407,3520,3812,5012,10115,1615,2902,4118,2706,2095,2096,3363,5137,3795,8005,10007,3515,8003,3847,3503,5252,27017,2197,4120,1180,5722,1134,1883,1249,3311,3837,2804,4558,4190,2463,1204,4056,1184,19333,9333,3913,3672,4342,4877,3586,8282,1861,1752,9592,1701,6085,2081,4058,2115,8900,4328,2958,2957,7071,3899,2531,2691,5052,1638,3419,2551,4029,3603,1336,2082,1143,3602,1176,4100,3486,6077,4800,2062,1918,12001,12002,9084,7072,1156,2313,3952,4999,5023,2069,28017,27019,27018,3439,6324,1188,1125,3908,7501,8232,1722,2988,10500,1136,1162,10020,22128,1211,3530,12009,9005,3057,3956,1191,3519,5235,1144,4745,1901,1807,2425,5912,3210,32767,5015,5013,3622,4039,10101,5233,5152,3983,3982,9616,4369,3728,3621,2291,5114,7101,1315,2087,5234,1635,3263,4121,4602,2224,3949,9131,3310,3937,2253,3882,3831,2376,2375,3876,3362,3663,3334,47624,1825,3868,4302,5721,1279,2606,1173,22125,17500,12005,6113,1973,3793,3637,8954,3742,9667,41795,41794,4300,8445,12865,3365,4665,3190,3577,3823,2261,2262,2812,1190,22350,3374,4135,2598,2567,1167,8470,8116,3830,8880,2734,3505,3388,3669,1871,4325,8025,1958,3681,3014,8999,4415,3414,4101,6503,9700,3683,1150,18333,4376,3991,3989,3992,2302,3415,1179,3946,2203,4192,4418,2712,25565,4065,3915,2080,3103,2265,8202,2304,8060,4119,4401,1560,3904,4534,1835,1116,8023,8474,3879,4087,4112,6350,9950,3506,3948,3825,2325,1800,1153,6379,3839,5672,4689,47806,3975,3980,4113,2847,2070,3425,6628,3997,3513,3656,2335,1182,1954,3996,4599,2391,3479,5021,5020,1558,1924,4545,2991,6065,1290,1559,1317,5423,1707,5055,9975,9971,9919,9915,9912,9910,9908,9901,9844,9830,9826,9825,9823,9814,9812,9777,9745,9683,9680,9679,9674,9665,9661,9654,9648,9620,9619,9613,9583,9527,9513,9493,9478,9464,9454,9364,9351,9183,9170,9133,9130,9128,9125,9065,9061,9044,9037,9013,9004,8925,8898,8887,8882,8879,8878,8865,8843,8801,8798,8790,8772,8756,8752,8736,8680,8673,8658,8655,8644,8640,8621,8601,8562,8539,8531,8530,8515,8484,8479,8477,8455,8454,8453,8452,8451,8409,8339,8308,8295,8273,8268,8255,8248,8245,8144,8133,8110,8092,8064,8037,8029,8018,8014,7975,7895,7854,7853,7852,7830,7813,7788,7780,7772,7771,7688,7685,7654,7637,7600,7555,7553,7456,7451,7231,7218,7184,7119,7104,7102,7092,7068,7067,7043,7033,6973,6972,6956,6942,6922,6920,6897,6877,6780,6734,6725,6710,6709,6650,6647,6644,6606,65514,65488,6535,65311,65048,64890,64727,64726,64551,64507,64438,64320,6412,64127,64080,63803,63675,6349,63423,6323,63156,6310,63105,6309,62866,6274,6273,62674,6259,62570,62519,6250,62312,62188,62080,62042,62006,61942,61851,61827,61734,61722,61669,61617,61616,61516,61473,61402,6126,6120,61170,61169,61159,60989,6091,6090,60794,60789,60783,60782,60753,60743,60728,60713,6067,60628,60621,60612,60579,60544,60504,60492,60485,60403,60401,60377,60279,60243,60227,60177,60111,60086,60055,60003,60002,60000,59987,59841,59829,59810,59778,5975,5974,5971,59684,5966,5958,59565,5954,5953,59525,59510,59509,59504,5949,59499,5948,5945,5939,5936,5934,59340,5931,5927,5926,5924,5923,59239,5921,5920,59191,5917,59160,59149,59122,59107,5908,59087,58991,58970,58908,5888,5887,5881,5878,5875,5874,58721,5871,58699,58634,58622,58610,5860,5858,58570,58562,5854,5853,5852,5849,58498,5848,58468,5845,58456,58446,58430,5840,5839,5838,58374,5836,5834,5831,58310,58305,5827,5826,58252,5824,5821,5820,5817,58164,58109,58107,5808,58072,5806,5804,57999,57988,57928,57923,57896,57891,57733,57730,57702,57681,57678,57576,57479,57398,57387,5737,57352,57350,5734,57347,57335,5732,57325,57123,5711,57103,57020,56975,56973,56827,56822,56810,56725,56723,56681,5667,56668,5665,56591,56535,56507,56293,56259,5622,5621,5620,5612,5611,56055,56016,55948,55910,55907,55901,55781,55773,55758,55721,55684,55652,55635,55579,55569,55568,55556,5552,55527,55479,55426,55400,55382,55350,55312,55227,55187,55183,55000,54991,54987,54907,54873,54741,54722,54688,54658,54605,5458,5457,54551,54514,5444,5442,5441,54323,54321,54276,54263,54235,54127,54101,54075,53958,53910,53852,53827,53782,5377,53742,5370,53690,53656,53639,53633,53491,5347,53469,53460,53370,53361,53319,53240,53212,53189,53178,53085,52948,5291,52893,52675,52665,5261,5259,52573,52506,52477,52391,52262,52237,52230,52226,52225,5219,52173,52071,52046,52025,52003,52002,52001,52000,51965,51961,51909,51906,51809,51800,51772,51771,51658,51582,51515,51488,51485,51484,5147,51460,51423,51366,51351,51343,51300,5125,51240,51235,51234,51233,5122,5121,51139,51118,51067,51037,51020,51011,50997,5098,5096,5095,50945,5090,50903,5088,50887,50854,50849,50836,50835,50834,50833,50831,50815,50809,50787,50733,50692,50585,50577,50576,50545,50529,50513,50356,50277,50258,50246,50224,50205,50202,50198,50189,5017,5016,50101,50040,50019,50016,49927,49803,49765,49762,49751,49678,49603,49597,49522,49521,49520,49519,49500,49498,49452,49398,49372,49352,4931,49302,49275,49241,49235,49232,49228,49216,49213,49211,49204,49203,49202,49201,49197,49196,49191,49190,49189,49179,49173,49172,49170,49169,49166,49132,49048,4903,49002,48973,48967,48966,48925,48813,48783,48682,48648,48631,4860,4859,48434,48356,4819,48167,48153,48127,48083,48067,48009,47969,47966,4793,47860,47858,47850,4778,47777,4771,4770,47700,4767,47634,4760,47595,47581,47567,47448,47372,47348,47267,47197,4712,47119,47029,47012,46992,46813,46593,4649,4644,46436,46418,46372,46310,46182,46171,46115,4609,4606,46069,46034,45960,45864,45777,45697,45624,45602,45463,45438,45413,4530,45226,45220,4517,4516,45164,45136,45050,45038,44981,44965,4476,4471,44711,44704,4464,44628,44616,44541,44505,44479,44431,44410,44380,44200,44119,44101,44004,4388,43868,4384,43823,43734,43690,43654,43425,43242,43231,43212,43143,43139,43103,43027,43018,43002,42990,42906,42735,42685,42679,42675,42632,42590,42575,42560,42559,42452,42449,42322,42276,42251,42158,42127,42035,42001,41808,41773,41632,41551,41442,41398,41348,41345,41342,41318,41281,41250,41142,41123,40951,40834,40812,40754,40732,40712,40628,40614,40513,40489,40457,40400,40393,40306,40011,40005,40003,40002,40001,39917,39895,39883,39869,39795,39774,39763,39732,39630,39489,39482,39433,39380,39293,39265,39117,39067,38936,38805,38780,38764,38761,38570,38561,38546,38481,38446,38358,38331,38313,38270,38224,38205,38194,38029,37855,37789,37777,37674,37647,37614,37607,37522,37393,37218,37185,37174,37151,37121,36983,36962,36950,36914,36824,36823,36748,36710,36694,36677,36659,36552,36530,36508,36436,36368,36275,36256,36105,36104,36046,35986,35929,35906,35901,35900,35879,35731,35593,35553,35506,35401,35393,35392,35349,35272,35217,35131,35116,35050,35033,34875,34833,34783,34765,34728,34683,34510,34507,34401,34381,34341,34317,34189,34096,34036,34021,33895,33889,33882,33879,33841,33605,33604,33550,33523,33522,33444,33395,33367,33337,33335,33327,33277,33203,33200,33192,33175,33124,33087,33070,33017,33011,33000,32976,32961,32960,32944,32932,32911,32910,32908,32905,32904,32898,32897,32888,32871,32869,32868,32858,32842,32837,32820,32815,32814,32807,32799,32798,32797,32790,32789,32788,32765,32764,32261,32260,32219,32200,32102,32088,32031,32022,32006,31728,31657,31522,31438,31386,31339,31072,31058,31033,30896,30705,30659,30644,30599,30519,30299,30195,30087,29810,29507,29243,29152,29045,28967,28924,28851,28850,28717,28567,28374,28142,28114,27770,27537,27521,27372,27351,27350,27316,27204,27087,27075,27074,27055,27016,27015,26972,26669,26417,26340,26007,26001,25847,25717,25703,25486,25473,25445,25327,25288,25262,25260,25174,24999,24616,24552,24416,24392,24218,23953,23887,23723,23451,23430,23382,23342,23296,23270,23228,23219,23040,23017,22969,22959,22882,22769,22727,22719,22711,22563,22341,22290,22223,22200,22177,22100,22063,22022,21915,21891,21728,21634,21631,21473,21078,21011,20990,20940,20934,20883,20734,20473,20280,20228,20227,20226,20225,20224,20223,20180,20179,20147,20127,20125,20118,20111,20106,20102,20089,20085,20080,20076,20052,20039,20032,20021,20017,20011,19996,19995,19852,19715,19634,19612,19501,19464,19403,19353,19201,19200,19130,19010,18962,18910,18887,18874,18669,18569,18517,18505,18439,18380,18337,18336,18231,18148,18080,18015,18012,17997,17985,17969,17867,17860,17802,17801,17715,17702,17701,17700,17413,17409,17255,17251,17129,17089,17070,17017,17016,16901,16845,16797,16725,16724,16723,16464,16372,16349,16297,16286,16283,16273,16270,16048,15915,15758,15730,15722,15677,15670,15646,15645,15631,15550,15448,15344,15317,15275,15191,15190,15145,15050,15005,14916,14891,14827,14733,14693,14545,14534,14444,14443,14418,14254,14237,14218,14147,13899,13846,13784,13766,13730,13723,13695,13580,13502,13359,13340,13318,13306,13265,13264,13261,13250,13229,13194,13193,13192,13188,13167,13149,13142,13140,13132,13130,13093,13017,12962,12955,12892,12891,12766,12702,12699,12414,12340,12296,12275,12271,12251,12243,12240,12225,12192,12171,12156,12146,12137,12132,12097,12096,12090,12080,12077,12034,12031,12019,11940,11863,11862,11813,11735,11697,11552,11401,11296,11288,11250,11224,11200,11180,11100,11089,11033,11032,11031,11026,11019,11007,11003,10900,10878,10852,10842,10754,10699,10602,10601,10567,10565,10556,10555,10554,10553,10552,10551,10550,10535,10529,10509,10494,10443,10414,10387,10357,10347,10338,10280,10255,10246,10245,10238,10093,10064,10045,10042,10035,10019,10018,1327,2330,2580,2700,1584,9020,3281,2439,1250,1607,1736,1330,2270,2728,2888,3803,5250,1645,1303,3636,1251,1243,1291,1297,1200,1811,4442,1118,8401,2101,2889,1694,1730,1912,1745,2250,1306,2997,2449,1262,4007,1101,1268,1735,1858,1264,1711,3118,4601,1321,1598,1305,1632,9995,1307,1981,2532,1808,2435,1194,1622,1239,1799,2882,1683,3063,3062,1340,4447,1806,6888,2438,1261,5969,9343,2583,2031,3798,2269,20001,2622,11001,1207,2850,21201,2908,3936,3023,2280,2623,7099,2372,1318,1339,1276,11000,48619,3497,1209,1331,1240,3856,2987,2326,25001,25000,1792,3919,1299,2984,1715,1703,1677,2086,1708,1228,3787,5502,1620,1316,1569,1210,1691,1282,2124,1791,2150,9909,4022,1324,2584,2300,9287,2806,1566,1713,1592,3749,1302,1709,3485,2418,2472,24554,3146,2134,2898,9161,9160,2930,1319,3811,2456,2901,6579,2550,8403,31416,22273,7005,66,32786,32787,706,635,6105,400,47,830,4008,5977,1989,1444,3985,678,27001,591,642,446,1441,54320,11,769,983,979,973,967,965,961,942,935,926,925,914,863,858,844,834,817,815,811,809,789,779,743,1019,1507,1492,509,762,5632,578,1495,5308,52,219,525,1420,665,620,3064,3045,653,158,716,861,9991,3049,1366,1364,833,91,1680,3398,750,615,603,6110,101,989,27010,510,810,1139,4199,76,847,649,707,68,449,664,75,104,629,1652,682,577,985,984,974,958,952,949,946,923,916,899,897,894,889,835,824,814,807,804,798,733,727,237,12,10,501,122,440,771,1663,828,860,695,634,538,1359,1358,1517,1370,3900,492,268,27374,605,8076,1651,1178,6401,761,5145,50,2018,1349,2014,7597,2120,1445,1402,1465,9104,627,4660,7273,950,1384,1388,760,92,831,5978,4557,45,112,456,1214,3086,702,6665,1404,651,5300,6347,5400,1389,647,448,1356,5232,1484,450,1991,1988,1523,1400,1399,221,1385,5191,1346,2024,2430,988,962,948,945,941,938,936,929,927,919,906,883,881,875,872,870,866,855,851,850,841,836,826,820,819,816,813,791,745,736,735,724,719,343,334,300,28,249,230,16,1018,1016,658,1474,696,630,663,2307,1552,609,741,353,638,1551,661,491,640,507,673,632,1354,9105,6143,676,214,14141,182,69,27665,1475,97,633,560,799,7009,2015,628,751,4480,1403,8123,1527,723,1466,1486,1650,991,832,137,1348,685,1762,6701,994,4500,194,180,1539,1379,51,886,2064,1405,1435,11371,1401,1369,402,103,1372,704,854,8892,47557,624,1387,3397,1996,1995,1997,18182,18184,3264,3292,13720,9107,9106,201,1381,35,6588,5530,3141,670,970,968,964,963,960,959,951,947,944,939,933,909,895,891,879,869,868,867,837,821,812,797,796,794,788,756,734,721,718,708,703,60,40,253,231,14,1017,1003,656,975,2026,1497,553,511,611,689,1668,1664,15,561,997,505,1496,637,213,1412,1515,692,694,681,680,644,675,1467,454,622,1476,1373,770,262,654,1535,58,177,26208,677,1519,1398,3457,401,412,493,13713,94,1498,871,1390,6145,133,362,118,193,115,1549,7008,608,1426,1436,38,74,73,71,601,136,4144,129,16444,1446,4132,308,1528,1365,1393,1394,1493,138,5997,397,29,31,44,2627,6147,1510,568,350,2053,6146,6544,1763,3531,399,1537,1992,1355,1454,261,887,200,1376,1424,6111,1410,1409,686,5301,5302,1513,747,9051,1499,7006,1439,1438,8770,853,196,93,410,462,619,1529,1990,1994,1986,1386,18183,18181,6700,1442,95,6400,1432,1548,486,1422,114,1397,6142,1827,626,422,688,206,202,204,1483,7634,774,699,2023,776,672,1545,2431,697,982,978,972,966,957,956,934,920,915,908,907,892,890,885,884,882,877,876,865,857,852,849,842,838,827,818,793,785,784,755,746,738,737,717,34,336,325,303,276,273,236,235,233,181,604,1362,712,1437,2027,1368,1531,645,65301,260,536,764,698,607,1667,1662,1661,404,224,418,176,848,315,466,403,1456,1479,355,763,1472,453,759,437,2432,120,415,1544,1511,1538,346,173,54,56,265,1462,13701,1518,1457,117,1470,13715,13714,267,1419,1418,1407,380,518,65,391,392,413,1391,614,1408,162,108,4987,1502,598,582,487,530,1509,72,4672,189,209,270,7464,408,191,1459,5714,5717,5713,564,767,583,1395,192,1448,428,4133,1416,773,1458,526,1363,742,1464,1427,1482,569,571,6141,351,3984,5490,2,13718,373,17300,910,148,7326,271,423,1451,480,1430,1429,781,383,2564,613,612,652,5303,1383,128,19150,1453,190,1505,1371,533,27009,27007,27005,27003,27002,744,1423,1374,141,1440,1396,352,96,48,552,570,217,528,452,451,2766,2108,132,1993,1987,130,18187,216,3421,142,13721,67,15151,364,1411,205,6548,124,116,5193,258,485,599,149,1469,775,2019,516,986,977,976,955,954,937,932,8,896,893,845,768,766,739,337,329,326,305,295,294,293,289,288,277,238,234,229,228,226,522,2028,150,572,596,420,460,1543,358,361,470,360,457,643,322,168,753,369,185,43188,1541,1540,752,496,662,1449,1480,1473,184,1672,1671,1670,435,434,1532,1360,174,472,1361,17007,414,535,432,479,473,151,1542,438,1488,1508,618,316,1367,439,284,542,370,2016,248,1491,44123,41230,7173,5670,18136,3925,7088,1425,17755,17756,4072,5841,2102,4123,2989,10051,10050,31029,3726,9978,9925,6061,6058,6057,6056,6054,6053,6049,6048,6047,6046,6045,6044,6043,6042,6041,6040,6039,6038,6037,6036,6035,6034,6033,6032,6031,6029,6028,6027,6026,6024,6023,6022,6020,6019,6018,6016,6014,6013,6012,6011,36462,5793,3423,3424,4095,3646,3510,3722,3651,14500,3865,15345,3763,38422,3877,9092,5344,2341,6116,2157,165,6936,8041,4888,4889,3074,2165,4389,5770,5769,16619,11876,11877,3741,3633,3840,3717,3716,3590,2805,4537,9762,5007,5006,5358,4879,6114,4185,2784,3724,2596,2595,4417,4845,22321,22289,3219,1338,36411,3861,5166,3674,1785,534,6602,47001,5363,8912,2231,5747,5748,11208,7236,4049,4050,22347,63,3233,3359,4177,48050,3111,3427,5321,5320,3702,2907,8991,8990,2054,4847,9802,9800,4368,5990,3563,5744,5743,12321,12322,9206,9204,9205,9201,9203,2949,2948,6626,8199,4145,3482,2216,13708,3786,3375,7566,2539,2387,3317,2410,2255,3883,4299,4296,4295,4293,4292,4291,4290,4289,4288,4287,4286,4285,4284,4283,4282,4281,4280,4278,4277,4276,4275,4274,4273,4272,4271,4270,4269,4268,4267,4266,4265,4264,4263,4261,4260,4259,4258,4257,4256,4255,4254,4253,4251,4250,4249,4248,4247,4246,4245,4244,4241,4240,4239,4238,4237,4236,4235,4233,4232,4231,4230,4229,4228,4227,4226,4225,4223,4222,4221,4219,4218,4217,4216,4215,4214,4213,4212,4211,4210,4209,4208,4207,4205,4204,4203,4202,4201,2530,5164,28200,3845,3541,4052,21590,1796,25793,8699,8182,4991,2474,5780,3676,24249,1631,6672,6673,3601,5046,3509,1852,2386,8473,7802,4789,3555,12013,12012,3752,3245,3231,16666,6678,17184,9086,9598,3073,2074,1956,2610,3738,2994,2993,2802,1885,14149,13786,10100,9284,14150,10107,4032,2821,3207,14154,24323,2771,5646,2426,18668,2554,4188,3654,8034,5675,15118,4031,2529,2248,1142,19194,433,3534,3664,2537,519,2655,4184,1506,3098,7887,37654,1979,9629,2357,1889,3314,3313,4867,2696,3217,6306,1189,5281,8953,1910,13894,372,3720,1382,2542,3584,4034,145,27999,3791,21800,2670,3492,24678,34249,39681,1846,5197,5462,5463,2862,2977,2978,3468,2675,3474,4422,12753,13709,2573,3012,4307,4725,3346,3686,4070,9555,4711,4323,4322,10200,7727,3608,3959,2405,3858,3857,24322,6118,4176,6442,8937,17224,17225,33434,1906,22351,2158,5153,3885,24465,3040,20167,8066,474,2739,3308,590,3309,7902,7901,7903,20046,5582,5583,7872,13716,13717,13705,6252,2915,1965,3459,3160,3754,3243,10261,7932,7933,5450,11971,379,7548,1832,3805,3805,16789,8320,8321,4423,2296,7359,7358,7357,7356,7355,7354,7353,7352,7351,7350,7349,7348,7347,7346,7344,7343,7342,7341,7340,7339,7338,7337,7336,7335,7334,7333,7332,7331,7330,7329,7328,7327,7324,7323,7322,7321,7319,7318,7317,7316,7315,7314,7313,7312,7311,7310,7309,7308,7307,7306,7305,7304,7303,7302,7301,8140,5196,5195,6130,5474,5471,5472,5470,4146,3713,5048,31457,7631,3544,41121,11600,3696,3696,3549,1380,22951,22800,3521,2060,6083,9668,3552,1814,1977,2576,2729,24680,13710,13712,25900,2403,2402,2470,5203,3579,2306,1450,7015,7012,7011,22763,2156,2493,4019,4018,4017,4015,2392,3175,32249,1627,10104,2609,5406,3251,4094,3241,6514,6418,3734,2679,4953,5008,2880,8243,8280,26133,8555,5629,3547,5639,5638,5637,5115,3723,4950,3895,3894,3491,3318,6419,3185,243,3212,9536,1925,11171,8404,8405,8989,6787,6483,3867,3866,1860,1870,5306,3816,7588,6786,2084,11165,11161,11163,11162,11164,3708,4850,7677,16959,247,3478,5349,3854,5397,7411,9612,11173,9293,5027,5026,5705,8778,527,1312,8808,6144,4157,4156,3249,7471,3615,2154,45966,17235,3018,38800,2737,156,3807,2876,1759,7981,3606,3647,3438,4683,9306,9312,7016,33334,3413,3834,3835,2440,6121,2568,17185,7982,2290,2569,2863,1964,4738,2132,17777,16162,6551,3230,4538,3884,9282,9281,4882,5146,580,1967,2659,2409,5416,2657,3380,5417,2658,5161,5162,10162,10161,33656,7560,2599,2704,2703,4170,7734,9522,3158,4426,4786,2721"\r\n\r\nsynPorts = cli.String("syn-ports", cli.setDefault(top5000))\r\n\r\nsynPortsList = str.ParseStringToPorts(top5000)\r\n\r\nif synPortsList != "" && len(synPortsList) == 0{\r\n    synPorts = top5000\r\n}\r\n\r\ncli.check()\r\n\r\nif len(tcpPortsList) >= 65535 {\r\n    tcpPorts = "1,3,4,6,7,8,9,13,17,19,20,21,22,23,24,25,26,27,30,32,33,37,42,43,49,53,55,57,59,60,65,66,68,70,73,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,102,103,104,106,108,109,110,111,113,114,119,122,123,125,127,132,133,135,137,138,139,143,144,146,157,161,163,171,179,180,188,198,199,200,206,208,210,211,212,220,222,223,225,235,250,251,252,254,255,256,257,259,264,268,270,280,299,301,302,306,308,309,311,321,333,340,366,381,388,389,403,406,407,411,416,417,419,421,423,425,427,436,441,442,443,444,445,447,458,464,465,475,481,497,500,502,511,512,513,514,515,517,522,523,524,540,541,543,544,545,548,554,555,556,557,560,563,586,587,590,591,593,600,602,606,610,616,617,621,623,625,631,636,639,641,646,648,655,657,659,660,666,667,668,669,674,683,684,687,688,690,691,700,701,705,709,710,711,713,714,715,720,722,725,726,728,729,730,731,732,733,740,748,749,754,757,758,765,770,777,778,780,782,783,786,787,790,792,795,800,801,802,803,804,805,806,807,808,809,810,811,812,822,823,825,829,839,840,843,846,856,859,860,862,864,866,873,874,877,878,880,888,889,898,900,901,902,903,904,905,911,912,913,916,918,921,922,924,925,928,930,931,943,953,955,956,968,969,971,980,981,983,987,990,992,993,995,996,998,999,1000,1001,1002,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1116,1117,1118,1119,1121,1122,1123,1124,1125,1126,1127,1128,1130,1131,1132,1134,1135,1136,1137,1138,1141,1143,1144,1145,1147,1148,1149,1150,1151,1152,1153,1154,1156,1157,1158,1159,1162,1163,1164,1165,1166,1167,1168,1169,1173,1174,1175,1176,1179,1180,1182,1183,1184,1185,1186,1187,1188,1190,1191,1192,1194,1195,1196,1198,1199,1200,1201,1204,1207,1208,1209,1210,1211,1212,1213,1215,1216,1217,1218,1220,1221,1222,1223,1228,1229,1233,1234,1236,1239,1240,1241,1243,1244,1247,1248,1249,1250,1251,1259,1261,1262,1264,1268,1270,1271,1272,1276,1277,1279,1282,1287,1290,1291,1296,1297,1299,1300,1301,1302,1303,1305,1306,1307,1308,1309,1310,1311,1313,1314,1315,1316,1317,1318,1319,1321,1322,1324,1327,1328,1330,1331,1334,1336,1337,1339,1340,1347,1350,1351,1352,1353,1356,1357,1389,1413,1414,1417,1433,1434,1443,1445,1455,1461,1494,1500,1501,1503,1516,1521,1522,1524,1525,1526,1527,1533,1547,1550,1556,1558,1559,1560,1565,1566,1569,1580,1583,1584,1592,1594,1598,1600,1603,1605,1607,1615,1620,1622,1630,1632,1635,1638,1641,1645,1658,1666,1677,1680,1683,1687,1688,1691,1694,1699,1700,1701,1703,1707,1708,1709,1711,1712,1713,1715,1717,1718,1719,1720,1721,1722,1723,1730,1735,1736,1745,1750,1752,1753,1755,1761,1782,1783,1790,1791,1792,1799,1800,1801,1805,1806,1807,1808,1811,1812,1818,1823,1825,1835,1839,1840,1858,1861,1862,1863,1864,1871,1875,1883,1888,1900,1901,1911,1912,1914,1918,1924,1927,1933,1935,1947,1949,1954,1958,1971,1972,1973,1974,1975,1976,1979,1980,1981,1982,1984,1988,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2020,2021,2022,2025,2030,2031,2033,2034,2035,2038,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2051,2060,2062,2065,2067,2068,2069,2070,2080,2081,2082,2083,2086,2087,2093,2095,2096,2099,2100,2101,2103,2104,2105,2106,2107,2110,2111,2112,2115,2119,2121,2124,2125,2126,2134,2135,2142,2144,2148,2150,2160,2161,2168,2170,2179,2181,2187,2190,2191,2196,2197,2200,2201,2203,2222,2224,2232,2241,2250,2251,2253,2260,2261,2262,2265,2269,2270,2271,2280,2288,2291,2292,2300,2301,2302,2304,2312,2313,2323,2325,2326,2330,2335,2340,2348,2366,2371,2372,2375,2381,2382,2383,2391,2393,2394,2399,2401,2418,2425,2433,2435,2436,2438,2439,2449,2456,2463,2472,2480,2490,2492,2500,2501,2505,2517,2521,2522,2525,2531,2532,2550,2551,2557,2558,2567,2580,2583,2584,2585,2598,2600,2601,2602,2604,2605,2606,2607,2608,2622,2623,2628,2631,2638,2644,2663,2691,2700,2701,2702,2706,2710,2711,2712,2717,2718,2723,2725,2728,2734,2800,2804,2806,2808,2809,2811,2812,2847,2850,2869,2875,2882,2886,2888,2889,2898,2901,2902,2903,2908,2909,2910,2920,2930,2957,2958,2967,2968,2973,2984,2987,2988,2991,2997,2998,3000,3001,3002,3003,3005,3006,3007,3008,3010,3011,3012,3013,3014,3017,3023,3025,3030,3031,3033,3050,3052,3057,3062,3063,3071,3077,3080,3089,3094,3102,3103,3118,3119,3121,3128,3133,3146,3162,3167,3168,3190,3200,3210,3211,3216,3220,3221,3240,3260,3261,3263,3268,3269,3280,3281,3283,3291,3299,3300,3301,3304,3306,3307,3310,3311,3312,3319,3322,3323,3324,3325,3333,3334,3351,3362,3363,3365,3367,3368,3369,3370,3371,3372,3374,3376,3377,3380,3388,3389,3390,3396,3398,3399,3400,3404,3410,3414,3415,3419,3425,3430,3437,3439,3443,3456,3465,3476,3479,3483,3485,3486,3493,3497,3503,3505,3506,3511,3513,3514,3515,3517,3519,3520,3526,3527,3530,3532,3535,3546,3551,3577,3580,3586,3588,3599,3600,3602,3603,3606,3618,3621,3622,3632,3636,3637,3652,3653,3656,3658,3659,3663,3668,3669,3670,3672,3680,3681,3683,3684,3689,3690,3697,3700,3703,3712,3721,3728,3731,3737,3742,3749,3765,3766,3784,3787,3788,3790,3792,3793,3795,3796,3798,3799,3800,3801,3803,3806,3808,3809,3810,3811,3812,3813,3814,3817,3820,3823,3824,3825,3826,3827,3828,3830,3831,3837,3839,3842,3846,3847,3848,3849,3850,3851,3852,3853,3856,3859,3860,3863,3868,3869,3870,3871,3872,3876,3878,3879,3880,3882,3888,3889,3890,3897,3899,3901,3902,3904,3905,3906,3907,3908,3909,3911,3913,3914,3915,3916,3918,3919,3920,3922,3923,3928,3929,3930,3931,3935,3936,3937,3938,3940,3941,3943,3944,3945,3946,3948,3949,3952,3956,3957,3961,3962,3963,3964,3967,3968,3969,3971,3972,3975,3979,3980,3981,3982,3983,3986,3989,3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,4000,4001,4002,4003,4004,4005,4006,4007,4009,4010,4016,4020,4022,4023,4024,4025,4029,4035,4036,4039,4040,4045,4056,4058,4065,4080,4087,4090,4096,4100,4101,4111,4112,4113,4118,4119,4120,4121,4125,4126,4129,4135,4141,4143,4147,4158,4161,4164,4174,4180,4190,4192,4200,4206,4220,4224,4234,4237,4242,4252,4262,4279,4294,4297,4298,4300,4302,4321,4325,4328,4333,4342,4343,4355,4356,4357,4358,4369,4374,4375,4376,4380,4384,4388,4389,4401,4407,4414,4415,4418,4430,4433,4440,4442,4443,4444,4445,4446,4447,4449,4453,4454,4455,4464,4471,4476,4480,4497,4503,4516,4517,4530,4534,4545,4550,4555,4558,4559,4567,4569,4570,4599,4600,4601,4602,4606,4609,4644,4649,4658,4662,4665,4687,4689,4700,4712,4713,4745,4760,4767,4770,4771,4778,4793,4800,4819,4848,4850,4859,4860,4875,4876,4877,4881,4899,4900,4903,4912,4931,4949,4998,4999,5000,5001,5002,5003,5004,5005,5009,5010,5011,5012,5013,5014,5015,5016,5017,5020,5021,5023,5030,5033,5040,5050,5051,5052,5053,5054,5055,5060,5061,5063,5066,5070,5074,5080,5081,5087,5088,5090,5095,5096,5098,5100,5101,5102,5111,5114,5118,5120,5121,5122,5125,5133,5137,5147,5151,5152,5155,5156,5190,5200,5201,5202,5203,5212,5214,5219,5221,5222,5223,5225,5226,5233,5234,5235,5242,5250,5252,5255,5256,5259,5261,5269,5279,5280,5291,5298,5339,5347,5353,5357,5370,5377,5405,5414,5423,5431,5432,5433,5440,5441,5442,5444,5457,5458,5473,5475,5500,5501,5502,5510,5520,5544,5550,5552,5553,5555,5560,5561,5566,5600,5601,5631,5632,5633,5644,5655,5656,5666,5671,5672,5678,5679,5680,5718,5730,5757,5780,5800,5801,5802,5803,5807,5810,5811,5812,5815,5818,5822,5823,5825,5850,5859,5862,5868,5869,5877,5881,5887,5888,5898,5899,5900,5901,5902,5903,5904,5905,5906,5907,5909,5910,5911,5914,5915,5918,5922,5925,5938,5940,5950,5952,5959,5960,5961,5962,5963,5966,5968,5981,5987,5988,5989,5998,5999,6000,6001,6002,6003,6004,6005,6006,6007,6008,6009,6010,6011,6017,6020,6025,6050,6051,6059,6060,6068,6080,6088,6090,6100,6101,6103,6106,6112,6118,6123,6129,6156,6167,6170,6180,6198,6203,6222,6226,6247,6259,6286,6346,6365,6372,6379,6388,6389,6443,6481,6500,6502,6504,6510,6520,6543,6546,6547,6550,6565,6566,6567,6580,6587,6600,6602,6603,6606,6611,6646,6648,6662,6664,6666,6667,6668,6669,6670,6677,6680,6688,6689,6692,6699,6711,6732,6778,6779,6788,6789,6792,6800,6801,6839,6842,6868,6869,6879,6881,6886,6887,6888,6889,6890,6896,6901,6920,6969,6988,7000,7001,7002,7003,7004,7005,7006,7007,7008,7009,7010,7011,7012,7017,7018,7019,7020,7021,7022,7023,7024,7025,7028,7031,7041,7044,7048,7050,7051,7055,7060,7070,7071,7072,7074,7078,7080,7081,7082,7083,7084,7086,7088,7090,7093,7094,7100,7101,7102,7103,7106,7108,7111,7117,7123,7129,7140,7171,7180,7200,7201,7202,7215,7241,7272,7273,7278,7280,7281,7288,7300,7321,7330,7380,7402,7435,7438,7443,7474,7496,7500,7501,7512,7547,7567,7625,7627,7676,7680,7687,7688,7700,7702,7703,7709,7711,7713,7725,7741,7742,7744,7749,7751,7770,7776,7777,7778,7788,7789,7791,7799,7800,7801,7856,7878,7888,7890,7896,7899,7900,7901,7903,7909,7911,7913,7915,7920,7921,7925,7929,7937,7938,7942,7943,7979,7995,7999,8000,8001,8002,8003,8004,8005,8006,8007,8008,8009,8010,8011,8012,8013,8014,8015,8016,8017,8018,8019,8020,8021,8022,8023,8024,8025,8026,8027,8028,8029,8030,8031,8032,8033,8035,8036,8037,8038,8039,8040,8041,8042,8043,8044,8045,8046,8048,8049,8050,8051,8052,8053,8054,8055,8056,8057,8058,8060,8061,8062,8064,8065,8066,8067,8068,8069,8070,8071,8073,8075,8077,8078,8079,8080,8081,8082,8083,8084,8085,8086,8087,8088,8089,8090,8091,8092,8093,8094,8095,8096,8097,8098,8099,8100,8101,8102,8103,8104,8105,8108,8110,8111,8112,8118,8119,8122,8123,8130,8133,8136,8144,8153,8161,8168,8172,8176,8180,8181,8182,8183,8184,8186,8188,8189,8190,8191,8192,8193,8194,8196,8197,8200,8201,8202,8213,8220,8222,8232,8244,8250,8254,8258,8260,8280,8281,8282,8283,8288,8290,8291,8292,8293,8294,8298,8300,8308,8322,8333,8341,8343,8360,8380,8381,8382,8383,8384,8385,8390,8391,8399,8400,8401,8402,8403,8443,8445,8448,8465,8477,8480,8481,8484,8488,8499,8500,8512,8540,8548,8567,8580,8582,8585,8600,8601,8610,8648,8649,8651,8652,8654,8660,8666,8675,8676,8680,8681,8684,8686,8688,8700,8701,8710,8720,8735,8765,8766,8777,8780,8781,8787,8788,8799,8800,8801,8802,8806,8808,8809,8810,8813,8820,8822,8828,8834,8838,8839,8844,8848,8858,8860,8861,8864,8866,8868,8873,8877,8879,8880,8881,8885,8886,8887,8888,8889,8890,8891,8892,8893,8895,8896,8898,8899,8900,8901,8902,8905,8910,8912,8913,8955,8956,8972,8974,8980,8983,8987,8988,8989,8990,8991,8992,8994,8996,8997,8999,9000,9001,9002,9003,9004,9005,9006,9007,9008,9009,9010,9011,9012,9013,9014,9015,9019,9020,9022,9025,9030,9031,9036,9038,9039,9040,9043,9050,9053,9060,9061,9068,9070,9071,9080,9081,9082,9083,9084,9085,9086,9087,9088,9089,9090,9091,9092,9093,9094,9095,9096,9097,9098,9099,9100,9101,9102,9103,9105,9110,9111,9112,9113,9119,9131,9152,9168,9180,9182,9188,9190,9191,9192,9197,9198,9200,9201,9207,9212,9220,9224,9231,9290,9300,9301,9302,9333,9409,9415,9418,9437,9443,9444,9448,9485,9494,9500,9501,9502,9503,9504,9507,9512,9517,9527,9535,9541,9542,9575,9593,9594,9595,9600,9618,9621,9643,9666,9673,9696,9704,9718,9800,9801,9815,9836,9845,9876,9877,9878,9888,9889,9898,9900,9901,9909,9910,9912,9914,9917,9918,9919,9922,9929,9941,9943,9944,9968,9977,9980,9981,9986,9988,9989,9990,9991,9992,9995,9997,9998,9999,10000,10001,10002,10003,10004,10005,10007,10008,10009,10010,10011,10012,10016,10017,10021,10022,10023,10024,10025,10034,10038,10040,10050,10051,10056,10057,10058,10060,10066,10068,10069,10070,10078,10080,10082,10083,10086,10087,10088,10089,10098,10099,10101,10111,10118,10152,10154,10160,10180,10200,10215,10243,10250,10255,10333,10443,10566,10616,10617,10621,10626,10628,10629,10777,10778,10873,11000,11001,11080,11110,11111,11158,11180,11211,11212,11324,11347,11362,11366,11372,11381,11660,11967,12000,12001,12006,12018,12021,12059,12174,12215,12262,12265,12315,12333,12345,12346,12380,12443,12452,12881,13333,13382,13456,13722,13724,13782,13783,13988,14000,14007,14238,14338,14441,14442,14549,15000,15001,15002,15003,15004,15018,15080,15400,15402,15580,15660,15672,15693,15698,15742,15801,15888,16000,16001,16012,16016,16018,16080,16113,16580,16705,16788,16800,16851,16929,16992,16993,17000,17003,17071,17095,17173,17595,17777,17877,17988,18000,18001,18002,18004,18008,18018,18040,18060,18080,18081,18082,18085,18088,18090,18098,18101,18103,18181,18264,18765,18801,18803,18880,18881,18888,18889,18988,19000,19001,19010,19045,19080,19101,19244,19283,19315,19350,19780,19801,19842,19900,19994,20000,20001,20002,20005,20021,20022,20031,20046,20052,20140,20142,20151,20153,20165,20200,20202,20221,20222,20720,20806,20808,20828,20992,21000,21080,21188,21245,21501,21502,21571,21792,21900,22080,22222,22228,22343,22480,22580,22939,23052,23352,23380,23454,23458,23502,23796,24444,24800,25006,25024,25734,25735,26000,26214,26470,27000,27017,27352,27353,27355,27356,27357,27715,27779,28017,28018,28080,28099,28201,28211,28214,28280,28780,29672,29798,29831,30000,30001,30005,30015,30025,30030,30058,30082,30088,30551,30704,30718,30951,31000,31038,31082,31188,31337,31727,31945,32766,32768,32769,32770,32771,32772,32773,32774,32775,32776,32777,32778,32779,32780,32781,32782,32783,32784,32785,32791,32792,32803,32816,32822,32835,33354,33453,33554,33899,34440,34571,34572,34573,34899,35500,35513,37006,37839,38000,38037,38080,38086,38185,38188,38292,38443,38501,38517,38888,39136,39376,39659,40000,40001,40069,40080,40193,40310,40811,40911,41064,41474,41511,41516,41523,42424,42510,43651,44176,44334,44401,44442,44443,44445,44501,44709,45100,45149,45177,45692,46200,46996,47078,47088,47544,47583,48080,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49163,49164,49165,49167,49168,49171,49175,49176,49186,49195,49236,49400,49401,49705,49960,49999,50000,50001,50002,50003,50006,50030,50045,50050,50060,50070,50075,50080,50090,50100,50240,50300,50389,50500,50636,50800,51103,51106,51191,51413,51493,52660,52673,52710,52735,52822,52847,52848,52849,52850,52851,52853,52869,53211,53313,53314,53535,54045,54328,55020,55055,55056,55070,55351,55352,55555,55576,55600,55858,56688,56737,56738,57294,57665,57797,57880,58000,58001,58002,58031,58060,58080,58083,58124,58630,58632,58838,58898,59009,59093,59110,59200,59201,59202,59777,59999,60000,60010,60020,60022,60030,60080,60101,60123,60146,60443,60465,60642,61081,61532,61613,61616,61900,61999,62078,63331,64623,64680,65000,65001,65055,65129,65310,65389,65486,65493,65533"\r\n    synPorts = str.Join(str.FilterPorts("1-65535",tcpPorts), ",")\r\n} else {\r\n    synPorts = str.Join(str.FilterPorts(synPorts,tcpPorts), ",")\r\n}\r\n\r\ntcpOps = []\r\ntcpOps = append(tcpOps, servicescan.active(true))\r\n\r\ntcpOps = append(tcpOps, servicescan.concurrent(50))\r\ntcpOps = append(tcpOps, servicescan.maxProbes(4))\r\n\r\ntcpOps = append(tcpOps, servicescan.probeTimeout(5.0))\r\n\r\ntcpOps = append(tcpOps, servicescan.all())\r\n\r\n// 设置排除端口和主机\r\nif excludePorts != "" {\r\n    yakit.Info("设置排除端口：%v", excludePorts)\r\n    tcpOps = append(tcpOps, servicescan.excludePorts(excludePorts))\r\n}\r\nif excludeHosts != "" {\r\n    yakit.Info("设置排除主机：%v", excludeHosts)\r\n    tcpOps = append(tcpOps, servicescan.excludeHosts(excludeHosts))\r\n}\r\n\r\nsynPortsList = str.ParseStringToPorts(synPorts)\r\ntcpPortsList = str.ParseStringToPorts(tcpPorts)\r\nyakit.Info("SYN Port 端口个数 ：%v",len(synPortsList))\r\nyakit.Info("TCP Port 端口个数 ：%v",len(tcpPortsList))\r\nyakit.Info("扫描参数设置完成，准备扫描~")\r\n\r\n\r\nvar synscanEnable = false\r\ntry {\r\n    yakit.Info("检测 SYN 扫描是否可用中")\r\n    for res in synscan.Scan("127.0.0.1", "80", synscan.wait(1))~ {  }\r\n    \r\n    synscanEnable = true\r\n    // yakit.StatusCard("SYN 扫描", "可用")\r\n} catch err {\r\n    yakit.Info("SYN 扫描不可用，原因是：%v", err)\r\n}\r\n\r\n\r\n\r\nbruteOpt = []\r\n\r\nbruteOpt = append(bruteOpt, brute.minDelay(1), brute.maxDelay(5))\r\n\r\nbruteOpt = append(bruteOpt, brute.finishingThreshold(1))\r\nbruteOpt = append(bruteOpt, brute.concurrentTarget(20))\r\nbruteOpt = append(bruteOpt, brute.concurrent(10))\r\n\r\n\r\nbruteScan = func(result) {\r\n    bruteType = ""\r\n    if result.GetServiceName() == "exasoftport1" {\r\n        return\r\n    }\r\n    \r\n    for _, bt := range brute.GetAvailableBruteTypes() {\r\n        if result.GetServiceName().Lower().Contains(bt) || bt.Contains(result.GetServiceName().Lower()) {\r\n            bruteType = bt\r\n            break\r\n        }\r\n        \r\n    }\r\n    \r\n\r\n    if bruteType == "" {\r\n        return\r\n    }\r\n    \r\n\r\n    defaultusers = []\r\n    defaultpass = []\r\n\r\n    if bruteType == "ftp" {\r\n        defaultusers = ["ftp", "www", "anonymous", "admin"]\r\n        defaultpass = ["admin", "admin123", "123456"]\r\n    } else if bruteType == "memcached" {\r\n        defaultusers = ["root", "admin"]\r\n        defaultpass = ["root", "123456"]\r\n    } else if bruteType == "mongodb" {\r\n        defaultusers = ["root", "admin", "mongodb"]\r\n        defaultpass = ["root", "admin123", "root@123", "123456"]\r\n    } else if bruteType == "mssql" {\r\n        defaultusers = ["root", "admin", "mssql"]\r\n        defaultpass = ["root", "admin123", "root@123", "admin", "123456"]\r\n    } else if bruteType == "mysql" {\r\n        defaultusers = ["mysql", "root", "admin"]\r\n        defaultpass = ["root", "123456", "admin123", "admin", "root@123"]\r\n    } else if bruteType == "postgres" {\r\n        defaultusers = ["postgres", "root", "admin"]\r\n        defaultpass = ["root", "admin", "123456"]\r\n    } else if bruteType == "rdp" {\r\n        defaultusers = ["admin", "administrator", "root", "guest"]\r\n        defaultpass = ["administrator", "guest", "admin", "123456"]\r\n    } else if bruteType == "redis" {\r\n        defaultusers = ["redis"]\r\n        defaultpass = ["redis", "123456"]\r\n    } else if bruteType == "smb" {\r\n        defaultusers = ["administrator", "admin", "test", "guest", "system", "root", "sa"]\r\n        defaultpass = ["admin123!@#", "admin", "admin123", "admin@123", "admin#123", "123456", "root@123"]\r\n    } else if bruteType == "snmp" {\r\n        defaultusers = ["snmp"]\r\n        defaultpass = ["public", "private", "0", "0392a0", "1234", "2read", "4changes"]\r\n    } else if bruteType == "ssh" {\r\n        defaultusers = ["root", "admin"]\r\n        defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\r\n    } else if bruteType == "telnet" {\r\n        defaultusers = ["root", "admin"]\r\n        defaultpass = ["root", "admin123", "root@123", "123456", "admin", "admin@123"]\r\n    } else if bruteType == "tomcat" {\r\n        defaultusers = ["manager", "tomcat"]\r\n        defaultpass = ["tomcat", "manager"]\r\n    } else if bruteType == "vnc" {\r\n        defaultusers = ["vnc"]\r\n        defaultpass = ["123456", "admin", "root"]\r\n    //} else if bruteType == "oracle" {\r\n        //  defaultusers = ["sys", "system", "oracle"]\r\n        //defaultpass = ["sys", "system", "oracle", "123456", ""]\r\n    } else if bruteType == "rtsp" {\r\n        defaultusers = ["admin"]\r\n        defaultpass = ["12345", "123456", ""]\r\n    } else {\r\n        return\r\n    }\r\n    \r\n\r\n    uL = make([]string)\r\n    pL = make([]string)\r\n\r\n    uL = append(uL, defaultusers...)\r\n\r\n    pL = append(pL, defaultpass...)\r\n\r\n    bruteTasks := len(uL) * len(pL)// 计算爆破任务数量        \r\n\r\n    addr := str.HostPort(result.Target, result.Port)\r\n    yakit.Info("Start Load Bruter for %s: %s", bruteType, addr)\r\n\r\n    instance, err := brute.New(string(bruteType), brute.userList(uL...), brute.passList(pL...), brute.debug(true), \r\n                                brute.okToStop(true), bruteOpt...)\r\n    if err != nil {\r\n        yakit.Error(\r\n            "构建弱口令与未授权扫描失败：%v", \r\n            err, \r\n        )\r\n        return\r\n    }\r\n    \r\n\r\n    res, err := instance.Start(addr)\r\n    if err != nil {\r\n        yakit.Error("输入目标失败：%v", err)\r\n        return\r\n    }\r\n    \r\n\r\n    riskTarget = addr\r\n    for rt := range res {\r\n        yakit.Info("rt string %v ", rt.String())\r\n        if rt == nil {\r\n            continue\r\n        }\r\n        \r\n\r\n        if !rt.Ok {\r\n            continue\r\n        }\r\n        \r\n        if rt.Username == "" && rt.Password == "" {\r\n            risk.NewRisk(\r\n                riskTarget, \r\n                risk.severity("high"), \r\n                risk.type("weak-pass"), \r\n                risk.typeVerbose("未授权访问"), \r\n                risk.title(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \r\n                risk.titleVerbose(sprintf("未授权访问[%v]：%v", rt.Type, rt.Target)), \r\n                risk.description("由于配置不当或管理疏忽，某些服务、接口或应用存在未授权访问的风险。攻击者可以直接访问这些资源而不需要任何身份验证，这可能会导致敏感数据的泄露、系统的滥用或其他恶意行为。"), \r\n                risk.solution(`1. 审核所有公开可访问的服务、接口和应用，确保它们都有适当的访问控制。\r\n2. 使用身份验证机制，如用户名/密码、API密钥或OAuth。\r\n3. 定期监控和审查访问日志，以检测任何可疑或未授权的活动。`), \r\n                risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \r\n            )\r\n        } else {\r\n            risk.NewRisk(\r\n                riskTarget, \r\n                risk.severity("high"), \r\n                risk.type("weak-pass"), \r\n                risk.typeVerbose("弱口令"), \r\n                risk.description("网站管理、运营人员由于安全意识不足，为了方便、避免忘记密码等，使用了非常容易记住的密码，或者是直接采用了系统的默认密码等。攻击者利用此漏洞可直接进入应用系统或者管理系统，从而进行系统、网页、数据的篡改与删除，非法获取系统、用户的数据，甚至可能导致服务器沦陷。"), \r\n                risk.solution("用户层面 : 不要使用常见的弱口令作为密码,不要多个系统或者社交账号使用同一套密码,定期修改密码,建议使用包含随机值的或者随机生成的字符串作为系统密码"), \r\n                risk.title(sprintf(\r\n                    "Weak Password[%v]：%v user(%v) pass(%v)", \r\n                    rt.Type, \r\n                    rt.Target, \r\n                    rt.Username, \r\n                    rt.Password, \r\n                )), \r\n                risk.titleVerbose(sprintf("弱口令[%v]：%v user(%v) pass(%v)", rt.Type, rt.Target, rt.Username, \r\n                                            rt.Password)), \r\n                risk.details({"username": rt.Username, "password": rt.Password, "target": rt.Target}), \r\n            )\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n\r\ncveBaseLineWg = sync.NewSizedWaitGroup(10)\r\n\r\ncveBaselineCheck = func (result) {\r\n    cveBaseLineWg.Add(1)\r\n    go func() {\r\n        defer cveBaseLineWg.Done()\r\n        target = str.HostPort(result.Target, result.Port)\r\n        cpes = x.RemoveRepeat(result.Fingerprint.CPEs)\r\n        versionList = []\r\n        for _, cpe = range cpes {\r\n            parameter = cpe\r\n            cpe, err = cve.parseToCpe(cpe)\r\n            if err != nil {\r\n                continue\r\n            }\r\n            if cpe.Version != "*" {\r\n                // 防止重复判断漏洞\r\n                if cpe.Version not in versionList {\r\n                    versionList = append(versionList, cpe.Version)\r\n                    for res = range cve.QueryEx(cve.product(cpe.Product, cpe.Version)) {\r\n                        titleStr = sprintf("%s: - %s", res.CVE, res.TitleZh)\r\n                        risk.NewRisk(target, risk.title(titleStr), risk.type("cve-baseline"), risk.typeVerbose("CVE基线检查"),\r\n                                risk.parameter(parameter), risk.potential(true), risk.level(res.Severity),\r\n                                risk.description(res.DescriptionMainZh), risk.solution(res.Solution), risk.cve(res.CVE))\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }()\r\n}\r\n\r\nhandleServiceScanResult = func(result) {\r\n    if enableCVEFlag {\r\n        cveBaselineCheck(result)\r\n    }\r\n    manager.HandleServiceScanResult(result)\r\n    if enableBruteFlag && len(result.GetServiceName()) != 0 {\r\n        serviceName = result.GetServiceName()\r\n        yakit.Info("Start Brute for %s-%s:%d", serviceName, result.Target, result.Port)\r\n        bruteScan(result)\r\n        yakit.Info("End Brute for %s-%s:%d", serviceName, result.Target, result.Port)\r\n    }\r\n}\r\n\r\naliveHostCountList = []\r\n\r\n\r\nOpenPortCount = 0\r\nopenPortCountLock = sync.NewLock()\r\naddOpenPortCount = func() {\r\n    openPortCountLock.Lock()\r\n    defer openPortCountLock.Unlock()\r\n    OpenPortCount++\r\n}\r\n\r\nruntimeID = os.Getenv("YAK_RUNTIME_ID")\r\n\r\nfunc handleTCP(targets) {\r\n    try {\r\n        for result in servicescan.Scan(targets, tcpPorts, tcpOps...)~ {\r\n            if !result.IsOpen() {\r\n                continue\r\n            }\r\n            if result.Target not in aliveHostCountList {\r\n                aliveHostCountList = append(aliveHostCountList, result.Target)\r\n            }\r\n            \r\n            yakit.Info("GOT: %v", result.String())\r\n            yakit.Output(result)\r\n            yakit.SavePortFromResult(result,runtimeID)\r\n            addOpenPortCount()\r\n            handleServiceScanResult(result)\r\n        }\r\n        \r\n    } catch err {\r\n        yakit.Error("处理 TCP 指纹识别失败 : %v",err)\r\n    }\r\n}\r\n\r\n\r\n\r\nfunc handleSYN(targets){\r\n\r\n    try {\r\n        for result in servicescan.ScanFromSynResult(\r\n            synscan.Scan(targets, synPorts, \r\n                    synscan.excludePorts(tcpPorts),\r\n                    synscan.concurrent(synConcurrent),\r\n                )~, \r\n                tcpOps..., \r\n            )~ {\r\n            if !result.IsOpen() {\r\n                continue\r\n            }\r\n            if result.Target not in aliveHostCountList {\r\n                aliveHostCountList = append(aliveHostCountList, result.Target)\r\n            }\r\n            yakit.Info("SYNGOT: %v", result.String())\r\n            yakit.Output(result)\r\n            yakit.SavePortFromResult(result,runtimeID)\r\n            addOpenPortCount()\r\n            handleServiceScanResult(result)\r\n        }\r\n        \r\n    } catch err { \r\n        yakit.Error("SYN 处理 TCP 指纹识别失败 : %v",err)\r\n    }\r\n}\r\n\r\nextraPocOpts = []\r\n\r\nif redirectTimes == 0 {\r\n    extraPocOpts.Append(poc.noRedirect(true))\r\n} else {\r\n    extraPocOpts.Append(poc.redirectTimes(redirectTimes))\r\n}\r\n\r\n\r\n\r\nmainDomains = x.Map(str.ParseStringToHosts(str.Join(str.Split(domainRaw, "\\n"), ",")), func(i){return str.TrimSpace(i)})\r\n\r\nfofaQuery = ""\r\n\r\n// (cert="xiaomi.com" && domain="xiaomi.com") || (cert="baidu.com" && domain="baidu.com")\r\nfor _,domain := range mainDomains{\r\n    fofaQuery += f`(cert="${domain}" && domain="${domain}") || `\r\n}\r\n\r\nfofaQuery =  str.TrimSuffix(fofaQuery," || ")\r\n\r\n\r\nqueryResult,err := spacengine.Query(fofaQuery,spacengine.fofa("gp827782797@qq.com","37fb166a078ca027cbaa1fcc64b85908"),spacengine.pageSize(10000),spacengine.maxRecord(5))\r\ndie(err)\r\n\r\ntargets = make([]string)\r\nsubDomains = make([]string)\r\n\r\nfor res := range queryResult {\r\n    targets = append(targets,res.Host)\r\n\r\n    subDomains = append(subDomains,res.Url)\r\n\r\n}\r\n\r\ntargets = str.RemoveRepeat(targets)\r\nsubDomains = str.RemoveRepeat(subDomains)\r\n\r\nlog.Info("发现 IP : %d", len(targets))\r\nlog.Info("发现 Domain : %d", len(subDomains))\r\n\r\nall = make([]string)\r\nall= str.ParseStringToLines(`/api\r\n    /api/\r\n    /api/v1\r\n    /api/v2\r\n    /v1/\r\n    /v2/\r\n    /admin/\r\n    /wp-admin/\r\n    /template/\r\n    /data/\r\n    /search/\r\n    /install/\r\n    /admin.php\r\n    /tupian\r\n    /js/\r\n    /member.php\r\n    /includes/\r\n    /uc_client/\r\n    /userapp.php?mod=app&*\r\n    /uc_server/\r\n    /tmp/\r\n    /static/\r\n    /source/\r\n    /search.php`\r\n    )\r\n\r\ndelaySeconds = 0.0\r\n\r\nua = ""\r\nif ua == "" {\r\n    ua = `Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0`\r\n}\r\n\r\ntimeoutSeconds = 5\r\n\r\ntlsMap = sync.NewMap()\r\nabandonedMap = sync.NewMap()\r\n\r\n// 标准 404 判断\r\nstandard404Map = sync.NewMap()\r\nsample404Map = sync.NewMap()\r\n\r\ncounter = 0\r\n\r\nswg = sync.NewSizedWaitGroup(50)\r\n\r\nlock = sync.NewLock()\r\ndomainCount = 0\r\n\r\ndomainTotal = len(all) * len(subDomains) * 2\r\n\r\n\r\nadd = func() {\r\n    lock.Lock()\r\n    defer lock.Unlock()\r\n    domainCount++\r\n    // yakit.StatusCard("已发请求", sprintf("%v/%v", count, domainTotal))\r\n    if domainTotal <= 0 {\r\n        return\r\n    }\r\n    yakit.SetProgress(float(domainCount)/float(domainTotal))\r\n}\r\n\r\nhandleResult = func(targetRaw, path, isTls) {\r\n    counter = counter + 1\r\n    swg.Add()\r\n    go func{\r\n        defer swg.Done()\r\n        defer func{err := recover(); if err != nil {yakit.Error("Recover from panic: %v", err)}}\r\n        defer func{ if delaySeconds > 0 { sleep(delaySeconds) } }\r\n\r\n        addr = targetRaw\r\n        if !str.HasPrefix(path ,"/") {\r\n            path = "/" + path\r\n        }\r\n\r\n        if isTls && addr.HasSuffix(":443") {\r\n            addr, _ = str.CutSuffix(addr, ":443")\r\n        } else if !isTls && addr.HasSuffix(":80") {\r\n            addr, _ = str.CutSuffix(addr, ":80")\r\n        }\r\n\r\n        resultResponse, resultRequest,err := poc.HTTP(`GET {{params(path)}} HTTP/1.1\r\nHost: {{params(target)}}\r\nUser-Agent: {{params(ua)}}\r\n`, poc.params({\r\n    "path": path, "target": addr,\r\n    "ua": ua, \r\n}), poc.timeout(timeoutSeconds), poc.https(isTls), extraPocOpts...)\r\n        add()\r\n        if err != nil && sprint(err) != "<nil>" {\r\n            err = sprint(err)\r\n            if str.MatchAnyOfRegexp(err, "no such host", "reset by remote peer") {\r\n                abandonedMap.Store(addr, err)\r\n            }\r\n            return\r\n        }\r\n\r\n        rspIns1 := poc.ParseBytesToHTTPResponse(resultResponse)~\r\n        if rspIns1 != nil {\r\n            yakit.Info("[%v] %v: %v", rspIns1.StatusCode, addr, path)\r\n\r\n            url, _ = str.ExtractURLFromHTTPRequestRaw(resultRequest, isTls)\r\n            \r\n            _, body = str.SplitHTTPHeadersAndBodyFromPacket(resultResponse)\r\n            title = str.ExtractTitle(body)\r\n\r\n            _, check404 = standard404Map.Load(addr)\r\n            if check404 {\r\n                if rspIns1.StatusCode == 404 {\r\n                    return\r\n                }\r\n            }\r\n\r\n            // 非标准404\r\n            rspOrigin, ok = sample404Map.Load(addr)\r\n            if ok {\r\n                if judge.CompareRaw(rspOrigin, resultResponse) > 0.85 {\r\n                    return\r\n                }\r\n            }\r\n            \r\n            // 啥都没有的话，不是404就报\r\n            if rspIns1.StatusCode != 404 {\r\n                // addTable(url.String(), rspIns1.StatusCode, len(body), title)\r\n            }\r\n        }\r\n    }\r\n}\r\ndefer swg.Wait()\r\n\r\n\r\ncheckForAddr = func(host, port, url...) {\r\n    pathPrefix = ""\r\n\r\n    if host.Contains("/") {\r\n        host, pathPrefix, _ = str.Cut(host, "/")\r\n        yakit.StatusCard("HOST", host)\r\n        yakit.StatusCard("PREFIX", pathPrefix)\r\n    }\r\n\r\n    addr = str.HostPort(host, port)\r\n    if len(url) > 0 && pathPrefix == "" && url[0].Contains("://") {\r\n        _, pkg, _ := poc.ParseUrlToHTTPRequestRaw("GET", url[0])\r\n        pathPrefix = poc.GetHTTPRequestPathWithoutQuery(pkg)\r\n    }\r\n\r\n    yakit.Info("checking TLS for %v", addr)\r\n    isHttps = false\r\n    if str.HasPrefix(host, "http://") || str.HasPrefix(host, "https://") {\r\n        isHttps = str.HasPrefix(host, "https://")\r\n    } else{\r\n        isHttps = str.IsTLSServer(addr)\r\n    }\r\n\r\n    rsp, req, err = poc.HTTP(`GET /{{rs}} HTTP/1.1\r\nHost: {{params(target)}}\r\nUser-Agent: {{params(ua)}}\r\n`, poc.params({\r\n    "target": addr,\r\n    "ua": ua, \r\n}), poc.timeout(timeoutSeconds), poc.https(isHttps),  extraPocOpts...)\r\n    if err != nil && sprint(err) != "<nil>" {\r\n        yakit.Info("Target: %v 无法连接：%v", addr, err)\r\n        return\r\n    }\r\n\r\n    rspIns, _ = poc.ParseBytesToHTTPResponse(rsp)\r\n    if rspIns != nil {\r\n        if rspIns.StatusCode == 404 {\r\n            standard404Map.Store(addr, true)\r\n        }\r\n    }\r\n\r\n    for _, path = range all {\r\n        err, ok = abandonedMap.Load(addr)\r\n        if ok {\r\n            yakit.Info("Target: %v 无法连接：%v", addr, err)\r\n            break\r\n        }\r\n        if pathPrefix != "" {\r\n            pathPrefix = pathPrefix.HasPrefix("/") ? pathPrefix : ("/" + pathPrefix)\r\n            pathPrefix = pathPrefix.HasSuffix("/") ? str.TrimRight(pathPrefix, "/") : pathPrefix\r\n            path = pathPrefix + path\r\n        }\r\n        handleResult(addr, path, isHttps)\r\n    }\r\n}\r\n\r\ngo func {\r\n    yakit.Info("开始执行 Web 目录爆破")\r\n    for _, t = range subDomains {\r\n        t = str.TrimSpace(t)\r\n        if t == "" {\r\n            continue\r\n        }\r\n        host, port, _ = str.ParseStringToHostPort(t)\r\n        if port <= 0 {\r\n            checkForAddr(t, 80, t)\r\n            checkForAddr(t, 443, t)\r\n            continue\r\n        }\r\n        if host == "" {\r\n            host = t\r\n        }\r\n        checkForAddr(host, port, t)\r\n    }\r\n}\r\n\r\n\r\ntargetRaw = str.Join(targets, ",")\r\n\r\ninfo = {}\r\n\r\nalive = ""\r\n\r\nfor res := range ping.Scan(targetRaw, pingOpt...) {\r\n    if res.Ok {\r\n        alive += res.IP + ","\r\n    }\r\n}\r\n\r\nlog.Info("ping res %s",alive)\r\n\r\naliveTargets = str.ParseStringToHosts(alive)\r\n\r\n\r\ninfo["runtime_id"] = runtimeID\r\ninfo["host_total"] = len(targets)\r\ninfo["port_total"] = len(synPortsList) + len(tcpPortsList)\r\ninfo["plugins"] = len(pluginNames)\r\n\r\ninfoJson = json.dumps(info)\r\n\r\ndb.SetKey("JznQXuFDSepeNWHbiLGEwONiaBxhvj_SERVER_SCAN_MANAGER", infoJson)\r\n\r\ntargetBatch = ""\r\ncount := 0\r\nwgScan := sync.NewSizedWaitGroup(2)\r\n\r\nhandleBatch := func(batch) {\r\n    wgScan.Add(1)\r\n    go func(targets) {\r\n        defer wgScan.Done()\r\n        handleTCP(targets)\r\n    }(batch)\r\n\r\n    if synscanEnable {\r\n        wgScan.Add(1)\r\n        go func(targets) {\r\n            defer wgScan.Done()\r\n            handleSYN(targets)\r\n        }(batch)\r\n    }\r\n}\r\n\r\nfor _, target = range aliveTargets{\r\n    currentTarget = target\r\n\r\n    if count > 0 {\r\n        targetBatch += "," + currentTarget\r\n    } else {\r\n        targetBatch = currentTarget\r\n    }\r\n    count++\r\n\r\n    if count == 200 {\r\n        handleBatch(targetBatch)\r\n        targetBatch = ""\r\n        count = 0\r\n    }\r\n}\r\nlog.Info("targetBatch %s", targetBatch)\r\n\r\nif count > 0 {\r\n    handleBatch(targetBatch)\r\n}\r\n\r\n\r\nwgScan.Wait()\r\n\r\nyakit.StatusCard("Scan", "DONE")\r\n\r\nhostCountSec = len(aliveHostCountList)\r\n\r\n\r\nif hostCountSec != 0 {\r\n    // 根据存活 ip + (加载成功的插件数 * 2s)/concurrent  + 开放端口数\r\n    // 定时器，超过一定时间，就扫描结束\r\n    waitTimeSec = hostCountSec + (loadPluginFinished * 2)/20 + OpenPortCount\r\n    if waitTimeSec < 10 {\r\n        waitTimeSec = 60\r\n    }\r\n  \tyakit.Info("waitTimeSec %v", waitTimeSec)\r\n    time.AfterFunc(waitTimeSec * 1000 * 1000 * 1000, func() {\r\n        yakit.SetProgress(1)\r\n        yakit.Info("AfterFunc 本次扫描任务已完成。")\r\n        os.Exit(0)\r\n    })\r\n}\r\n\r\ncveBaseLineWg.Wait()\r\nyakit.Info("cvebaseline end success!")\r\nyakit.Info("brute end success!")\r\n\r\nmanager.Wait()';

const ActiChainDNS = () => {
    const [dnsLog, setDnsLog] = useSafeState('builtin');
    const [page] = WizardTable.usePage();

    const ReportManageColumns: CreateTableProps<any>['columns'] = [
        {
            title: '域名',
            dataIndex: 'report_title',
        },
        {
            title: '类型',
            dataIndex: 'source',
        },
        {
            title: '远端IP',
            dataIndex: 'source_task_group',
        },
        {
            title: 'Timestamp',
            // width: 280,
            dataIndex: 'start_time',
            render: (text) =>
                text ? (
                    <Tag color="blue">
                        {dayjs.unix(text).format('YYYY-MM-DD HH:mm:ss')}
                    </Tag>
                ) : (
                    '-'
                ),
        },
    ];

    const headnExpandedRowRender = useMemoizedFn((record) => {
        console.log(record);
        return (
            <WizardAceEditor
                style={{ minHeight: '100%' }}
                value={str}
                height="400px"
                readOnly={true}
            />
        );
    });

    return (
        <WizardTable
            rowKey="report_id"
            page={page}
            columns={ReportManageColumns}
            bordered={false}
            tableHeader={{
                headerRender: (
                    <div className="border-b-solid border-[1px] border-gray-200 pb-4">
                        {/* <h1 className="mt-0">DNSLog</h1> */}
                        <div className="flex items-center gap-4 mb-4">
                            <div className="border-r-solid border-[1px] border-gray-200 pr-4">
                                <span className="mr-2 font-400 text-[16px]">
                                    内置DNSLog:
                                </span>
                                <Select
                                    className="w-48"
                                    options={DNSLogOptions}
                                    value={dnsLog}
                                    onChange={(e) => setDnsLog(e)}
                                />
                            </div>
                            <Button type="primary">生成一个可用域名</Button>
                        </div>
                        <div className="flex items-center">
                            当前激活域名为：{' '}
                            <Tag color="blue">
                                <span className="mr-[2px]"> aaa</span>
                                <CopyOutlined
                                    style={{ minWidth: 16 }}
                                    onClick={() => {
                                        copyToClipboard('aaa')
                                            .then(() => {
                                                message.success('复制成功');
                                            })
                                            .catch(() => {
                                                message.info(
                                                    '复制失败，请重试',
                                                );
                                            });
                                    }}
                                />
                            </Tag>
                        </div>
                    </div>
                ),
                title: (
                    <div className="font-400 text-[12px] flex items-center gap-4 mt-2">
                        <div>
                            只看A记录：
                            <Switch />
                        </div>
                        <div>
                            自动刷新记录：
                            <Switch />
                        </div>
                    </div>
                ),
                options: {
                    trigger: (
                        <div>
                            <ReloadOutlined className="cursor-pointer hover:color-[#4a94f8] mt-" />
                        </div>
                    ),
                },
            }}
            expandable={{
                expandedRowRender: (record) => headnExpandedRowRender(record),
                columnWidth: 48,
                expandRowByClick: true,
            }}
            request={async (params, filter) => {
                const star = filter?.start_time?.[0];
                const end = filter?.start_time?.[1];
                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
                const request = {
                    ...params,
                    ...filter,
                    start: star ? dayjs(star).unix() : undefined,
                    end: end ? dayjs(end).unix() : undefined,
                    start_time: undefined,
                } as TReportRequest;
                const result = await getssetsProts({ ...request });
                const { data } = result;
                return {
                    list: data?.elements ?? [],
                    pagemeta: {
                        page: data?.page ?? 1,
                        total: data?.total ?? 1,
                        limit: data?.limit ?? 1,
                        total_page: data?.page_total ?? 1,
                    },
                };
            }}
        />
    );
};

export { ActiChainDNS };
